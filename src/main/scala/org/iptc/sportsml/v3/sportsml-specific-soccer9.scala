// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package org.iptc.sportsml.v3


/** Soccer-specific metadata for events. | Metadata that is specific to soccer for events.
*/
case class SoccerEventMetadataComplexType(timeu45adjustment: Seq[org.iptc.sportsml.v3.SoccerTimeAdjustmentComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EventMetadataComplexTypeOption {
  lazy val kicku45offu45teamu45idref = attributes.get("@kick-off-team-idref") map { _.as[String]}
  lazy val week = attributes.get("@week") map { _.as[String]}
}

      


/** Record time added by referee. | Holds values for the time added by the referee and how much extra time was actually played.
*/
case class SoccerTimeAdjustmentComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseTimeAdjustmentComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val periodu45extrau45timeu45added = attributes.get("@period-extra-time-added") map { _.as[String]}
  lazy val periodu45extrau45timeu45elapsed = attributes.get("@period-extra-time-elapsed") map { _.as[String]}
}

      


/** Player metadata specific to soccer. | Metadata for one player, specific to soccer.
*/
case class SoccerPlayerMetadataComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends PlayerMetadataComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val lineu45formationu45row = attributes.get("@line-formation-row") map { _.as[BigInt]}
  lazy val lineu45formationu45position = attributes.get("@line-formation-position") map { _.as[BigInt]}
}

      


/** Soccer specific stats for one team. | Team-stats that is specific to	soccer and does not apply to all sports.
*/
case class SoccerTeamStatsComplexType(statsu45socceru45offensive: Seq[org.iptc.sportsml.v3.SoccerStatsOffensiveComplexType] = Nil,
  statsu45socceru45defensive: Seq[org.iptc.sportsml.v3.SoccerStatsDefensiveComplexType] = Nil,
  statsu45socceru45foul: Seq[org.iptc.sportsml.v3.SoccerStatsFoulComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseSoccerStatsComplexTypable with TeamStatsComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val touches = attributes.get("@touches") map { _.as[String]}
  lazy val aerialsu45won = attributes.get("@aerials-won") map { _.as[String]}
  lazy val lineu45formation = attributes.get("@line-formation") map { _.as[String]}
}

      


/** Player statistics that are specific to soccer. | Soccer specific statistic information about a player.
*/
case class SoccerPlayerStatsComplexType(statsu45socceru45offensive: Seq[org.iptc.sportsml.v3.SoccerStatsOffensiveComplexType] = Nil,
  statsu45socceru45defensive: Seq[org.iptc.sportsml.v3.SoccerStatsDefensiveComplexType] = Nil,
  statsu45socceru45foul: Seq[org.iptc.sportsml.v3.SoccerStatsFoulComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseSoccerStatsComplexTypable with PlayerStatsComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val touches = attributes.get("@touches") map { _.as[String]}
  lazy val aerialsu45won = attributes.get("@aerials-won") map { _.as[String]}
}

      


trait BaseSoccerStatsComplexTypable {
  def statsu45socceru45offensive: Seq[org.iptc.sportsml.v3.SoccerStatsOffensiveComplexType]
  def statsu45socceru45defensive: Seq[org.iptc.sportsml.v3.SoccerStatsDefensiveComplexType]
  def statsu45socceru45foul: Seq[org.iptc.sportsml.v3.SoccerStatsFoulComplexType]
  def id: Option[String]
  def classValue: Option[String]
  def style: Option[String]
  def statsu45coverage: Option[String]
  def teamu45coverage: Option[org.iptc.sportsml.v3.Teamu45coverage]
  def durationu45scope: Option[String]
  def alignmentu45scope: Option[org.iptc.sportsml.v3.Alignmentu45scope]
  def position: Option[String]
  def recordu45makingu45scope: Option[String]
  def scopingu45label: Option[String]
  def periodu45value: Option[String]
  def periodu45type: Option[String]
  def startu45dateu45time: Option[String]
  def endu45dateu45time: Option[String]
  def periodu45startu45dateu45time: Option[String]
  def periodu45endu45dateu45time: Option[String]
  def temporalu45unitu45type: Option[String]
  def temporalu45unitu45value: Option[String]
  def eventu45span: Option[BigInt]
  def opponentu45value: Option[String]
  def opponentu45type: Option[String]
  def team: Option[String]
  def competition: Option[String]
  def unitu45value: Option[String]
  def unitu45type: Option[String]
  def situation: Option[String]
  def locationu45key: Option[String]
  def venueu45type: Option[String]
  def surfaceu45type: Option[String]
  def weatheru45type: Option[String]
  def scopeu45value: Option[String]
  def distance: Option[String]
  def distanceu45maximum: Option[String]
  def distanceu45minimum: Option[String]
  def measurementu45units: Option[String]
  def touches: Option[String]
  def aerialsu45won: Option[String]
}


case class BaseSoccerStatsComplexType(statsu45socceru45offensive: Seq[org.iptc.sportsml.v3.SoccerStatsOffensiveComplexType] = Nil,
  statsu45socceru45defensive: Seq[org.iptc.sportsml.v3.SoccerStatsDefensiveComplexType] = Nil,
  statsu45socceru45foul: Seq[org.iptc.sportsml.v3.SoccerStatsFoulComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseSoccerStatsComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val touches = attributes.get("@touches") map { _.as[String]}
  lazy val aerialsu45won = attributes.get("@aerials-won") map { _.as[String]}
}

      


/** Offensive stats specific to soccer. | Offensive stats for one team,
					specific to soccer.
*/
case class SoccerStatsOffensiveComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val goalsu45gameu45winning = attributes.get("@goals-game-winning") map { _.as[String]}
  lazy val goalsu45gameu45tying = attributes.get("@goals-game-tying") map { _.as[String]}
  lazy val goalsu45overtime = attributes.get("@goals-overtime") map { _.as[String]}
  lazy val goalsu45shootout = attributes.get("@goals-shootout") map { _.as[String]}
  lazy val goalsu45total = attributes.get("@goals-total") map { _.as[String]}
  lazy val assistsu45gameu45winning = attributes.get("@assists-game-winning") map { _.as[String]}
  lazy val assistsu45gameu45tying = attributes.get("@assists-game-tying") map { _.as[String]}
  lazy val assistsu45overtime = attributes.get("@assists-overtime") map { _.as[String]}
  lazy val assistsu45total = attributes.get("@assists-total") map { _.as[String]}
  lazy val points = attributes.get("@points") map { _.as[String]}
  lazy val shotsu45total = attributes.get("@shots-total") map { _.as[String]}
  lazy val shotsu45onu45goalu45total = attributes.get("@shots-on-goal-total") map { _.as[String]}
  lazy val shotsu45offu45goalu45total = attributes.get("@shots-off-goal-total") map { _.as[String]}
  lazy val shotsu45penaltyu45shotu45taken = attributes.get("@shots-penalty-shot-taken") map { _.as[String]}
  lazy val shotsu45penaltyu45shotu45scored = attributes.get("@shots-penalty-shot-scored") map { _.as[String]}
  lazy val shotsu45penaltyu45shotu45missed = attributes.get("@shots-penalty-shot-missed") map { _.as[String]}
  lazy val shotsu45penaltyu45shotu45percentage = attributes.get("@shots-penalty-shot-percentage") map { _.as[String]}
  lazy val shotsu45shootoutu45taken = attributes.get("@shots-shootout-taken") map { _.as[String]}
  lazy val shotsu45shootoutu45scored = attributes.get("@shots-shootout-scored") map { _.as[String]}
  lazy val shotsu45shootoutu45missed = attributes.get("@shots-shootout-missed") map { _.as[String]}
  lazy val shotsu45shootoutu45percentage = attributes.get("@shots-shootout-percentage") map { _.as[String]}
  lazy val giveaways = attributes.get("@giveaways") map { _.as[String]}
  lazy val offsides = attributes.get("@offsides") map { _.as[String]}
  lazy val corneru45kicks = attributes.get("@corner-kicks") map { _.as[String]}
  lazy val hatu45tricks = attributes.get("@hat-tricks") map { _.as[String]}
  lazy val shotsu45hitu45frame = attributes.get("@shots-hit-frame") map { _.as[String]}
  lazy val goalsu45own = attributes.get("@goals-own") map { _.as[String]}
  lazy val freeu45kicks = attributes.get("@free-kicks") map { _.as[String]}
  lazy val goalsu45leftu45foot = attributes.get("@goals-left-foot") map { _.as[String]}
  lazy val goalsu45rightu45foot = attributes.get("@goals-right-foot") map { _.as[String]}
  lazy val goalsu45head = attributes.get("@goals-head") map { _.as[String]}
  lazy val passesu45total = attributes.get("@passes-total") map { _.as[String]}
  lazy val passesu45complete = attributes.get("@passes-complete") map { _.as[String]}
  lazy val passesu45completeu45percentage = attributes.get("@passes-complete-percentage") map { _.as[String]}
  lazy val passesu45incomplete = attributes.get("@passes-incomplete") map { _.as[String]}
  lazy val passesu45completeu453rdu45final = attributes.get("@passes-complete-3rd-final") map { _.as[String]}
  lazy val passesu45completeu45long = attributes.get("@passes-complete-long") map { _.as[String]}
  lazy val tacklesu45total = attributes.get("@tackles-total") map { _.as[String]}
  lazy val tacklesu45won = attributes.get("@tackles-won") map { _.as[String]}
  lazy val tacklesu45wonu45percentage = attributes.get("@tackles-won-percentage") map { _.as[String]}
  lazy val tacklesu45lost = attributes.get("@tackles-lost") map { _.as[String]}
}

      


/** Defensive stats specific to soccer. | Defensive stats for one team,
					specific to soccer.
*/
case class SoccerStatsDefensiveComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val shotsu45penaltyu45shotu45allowed = attributes.get("@shots-penalty-shot-allowed") map { _.as[String]}
  lazy val goalsu45penaltyu45shotu45allowed = attributes.get("@goals-penalty-shot-allowed") map { _.as[String]}
  lazy val goalsu45againstu45average = attributes.get("@goals-against-average") map { _.as[String]}
  lazy val goalsu45againstu45total = attributes.get("@goals-against-total") map { _.as[String]}
  lazy val saves = attributes.get("@saves") map { _.as[String]}
  lazy val saveu45percentage = attributes.get("@save-percentage") map { _.as[String]}
  lazy val catchesu45punches = attributes.get("@catches-punches") map { _.as[String]}
  lazy val shotsu45onu45goalu45againstu45total = attributes.get("@shots-on-goal-against-total") map { _.as[String]}
  lazy val shotsu45shootoutu45total = attributes.get("@shots-shootout-total") map { _.as[String]}
  lazy val shotsu45shootoutu45allowed = attributes.get("@shots-shootout-allowed") map { _.as[String]}
  lazy val shotsu45blocked = attributes.get("@shots-blocked") map { _.as[String]}
  lazy val shutouts = attributes.get("@shutouts") map { _.as[String]}
  lazy val crossesu4518u45yardu45plus = attributes.get("@crosses-18-yard-plus") map { _.as[String]}
  lazy val crossesu4518u45yard = attributes.get("@crosses-18-yard") map { _.as[String]}
  lazy val shotsu45blockedu45outfielder = attributes.get("@shots-blocked-outfielder") map { _.as[String]}
  lazy val shotsu45blockedu45cross = attributes.get("@shots-blocked-cross") map { _.as[String]}
  lazy val clearancesu45successful = attributes.get("@clearances-successful") map { _.as[String]}
  lazy val interceptions = attributes.get("@interceptions") map { _.as[String]}
}

      


/** Stats specific to fauls, cautions, and ejections. | Could occur while
					players are on the offense, the defense, or even the bench.
*/
case class SoccerStatsFoulComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val foulsu45commited = attributes.get("@fouls-commited") map { _.as[String]}
  lazy val foulsu45suffered = attributes.get("@fouls-suffered") map { _.as[String]}
  lazy val cautionsu45total = attributes.get("@cautions-total") map { _.as[String]}
  lazy val cautionsu45pending = attributes.get("@cautions-pending") map { _.as[String]}
  lazy val cautionu45pointsu45total = attributes.get("@caution-points-total") map { _.as[String]}
  lazy val cautionu45pointsu45pending = attributes.get("@caution-points-pending") map { _.as[String]}
  lazy val ejectionsu45total = attributes.get("@ejections-total") map { _.as[String]}
  lazy val ejectionsu45secondu45caution = attributes.get("@ejections-second-caution") map { _.as[String]}
  lazy val ejectionsu45straight = attributes.get("@ejections-straight") map { _.as[String]}
}

      

