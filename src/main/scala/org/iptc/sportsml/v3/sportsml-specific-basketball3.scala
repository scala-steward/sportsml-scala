// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package org.iptc.sportsml.v3


/** Specific statistics for basketball players. | Includes offensive, rebounding, and defensive stats.
*/
case class BasketballPlayerStatsComplexType(statsBasketballOffensive: Seq[org.iptc.sportsml.v3.BasketballStatsOffensiveComplexType] = Nil,
  statsBasketballRebounding: Seq[org.iptc.sportsml.v3.BasketballStatsReboundingComplexType] = Nil,
  statsBasketballDefensive: Seq[org.iptc.sportsml.v3.BasketballStatsDefensiveComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseBasketballStatsComplexTypable with PlayerStatsComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsCoverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamCoverage = attributes.get("@team-coverage") map { _.as[TeamCoverage]}
  lazy val durationScope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentScope = attributes.get("@alignment-scope") map { _.as[AlignmentScope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordMakingScope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingLabel = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodValue = attributes.get("@period-value") map { _.as[String]}
  lazy val periodType = attributes.get("@period-type") map { _.as[String]}
  lazy val startDateTime = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endDateTime = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodStartDateTime = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodEndDateTime = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalUnitType = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalUnitValue = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventSpan = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentValue = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentType = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitValue = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitType = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationKey = attributes.get("@location-key") map { _.as[String]}
  lazy val venueType = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceType = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatherType = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeValue = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceMaximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceMinimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementUnits = attributes.get("@measurement-units") map { _.as[String]}
  lazy val minutesPlayed = attributes.get("@minutes-played") map { _.as[String]}
  lazy val gamesPlayed = attributes.get("@games-played") map { _.as[String]}
  lazy val gamesStarted = attributes.get("@games-started") map { _.as[String]}
  lazy val averageMinutesPerGame = attributes.get("@average-minutes-per-game") map { _.as[String]}
  lazy val personalFoulsPerGame = attributes.get("@personal-fouls-per-game") map { _.as[String]}
  lazy val doubleDoubles = attributes.get("@double-doubles") map { _.as[String]}
  lazy val tripleDoubles = attributes.get("@triple-doubles") map { _.as[String]}
}

      


/** Specific statistics for basketball. | Includes offensive, rebounding, and defensive stats.
*/
case class BasketballTeamStatsComplexType(statsBasketballOffensive: Seq[org.iptc.sportsml.v3.BasketballStatsOffensiveComplexType] = Nil,
  statsBasketballRebounding: Seq[org.iptc.sportsml.v3.BasketballStatsReboundingComplexType] = Nil,
  statsBasketballDefensive: Seq[org.iptc.sportsml.v3.BasketballStatsDefensiveComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseBasketballStatsComplexTypable with TeamStatsComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsCoverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamCoverage = attributes.get("@team-coverage") map { _.as[TeamCoverage]}
  lazy val durationScope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentScope = attributes.get("@alignment-scope") map { _.as[AlignmentScope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordMakingScope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingLabel = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodValue = attributes.get("@period-value") map { _.as[String]}
  lazy val periodType = attributes.get("@period-type") map { _.as[String]}
  lazy val startDateTime = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endDateTime = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodStartDateTime = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodEndDateTime = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalUnitType = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalUnitValue = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventSpan = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentValue = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentType = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitValue = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitType = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationKey = attributes.get("@location-key") map { _.as[String]}
  lazy val venueType = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceType = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatherType = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeValue = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceMaximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceMinimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementUnits = attributes.get("@measurement-units") map { _.as[String]}
  lazy val timeoutsLeft = attributes.get("@timeouts-left") map { _.as[String]}
  lazy val largestLead = attributes.get("@largest-lead") map { _.as[String]}
  lazy val foulsTotal = attributes.get("@fouls-total") map { _.as[String]}
  lazy val turnoverMargin = attributes.get("@turnover-margin") map { _.as[String]}
}

      


trait BaseBasketballStatsComplexTypable {
  def statsBasketballOffensive: Seq[org.iptc.sportsml.v3.BasketballStatsOffensiveComplexType]
  def statsBasketballRebounding: Seq[org.iptc.sportsml.v3.BasketballStatsReboundingComplexType]
  def statsBasketballDefensive: Seq[org.iptc.sportsml.v3.BasketballStatsDefensiveComplexType]
  def id: Option[String]
  def classValue: Option[String]
  def style: Option[String]
  def statsCoverage: Option[String]
  def teamCoverage: Option[org.iptc.sportsml.v3.TeamCoverage]
  def durationScope: Option[String]
  def alignmentScope: Option[org.iptc.sportsml.v3.AlignmentScope]
  def position: Option[String]
  def recordMakingScope: Option[String]
  def scopingLabel: Option[String]
  def periodValue: Option[String]
  def periodType: Option[String]
  def startDateTime: Option[String]
  def endDateTime: Option[String]
  def periodStartDateTime: Option[String]
  def periodEndDateTime: Option[String]
  def temporalUnitType: Option[String]
  def temporalUnitValue: Option[String]
  def eventSpan: Option[BigInt]
  def opponentValue: Option[String]
  def opponentType: Option[String]
  def team: Option[String]
  def competition: Option[String]
  def unitValue: Option[String]
  def unitType: Option[String]
  def situation: Option[String]
  def locationKey: Option[String]
  def venueType: Option[String]
  def surfaceType: Option[String]
  def weatherType: Option[String]
  def scopeValue: Option[String]
  def distance: Option[String]
  def distanceMaximum: Option[String]
  def distanceMinimum: Option[String]
  def measurementUnits: Option[String]
}


case class BaseBasketballStatsComplexType(statsBasketballOffensive: Seq[org.iptc.sportsml.v3.BasketballStatsOffensiveComplexType] = Nil,
  statsBasketballRebounding: Seq[org.iptc.sportsml.v3.BasketballStatsReboundingComplexType] = Nil,
  statsBasketballDefensive: Seq[org.iptc.sportsml.v3.BasketballStatsDefensiveComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseBasketballStatsComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsCoverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamCoverage = attributes.get("@team-coverage") map { _.as[TeamCoverage]}
  lazy val durationScope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentScope = attributes.get("@alignment-scope") map { _.as[AlignmentScope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordMakingScope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingLabel = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodValue = attributes.get("@period-value") map { _.as[String]}
  lazy val periodType = attributes.get("@period-type") map { _.as[String]}
  lazy val startDateTime = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endDateTime = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodStartDateTime = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodEndDateTime = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalUnitType = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalUnitValue = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventSpan = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentValue = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentType = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitValue = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitType = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationKey = attributes.get("@location-key") map { _.as[String]}
  lazy val venueType = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceType = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatherType = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeValue = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceMaximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceMinimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementUnits = attributes.get("@measurement-units") map { _.as[String]}
}

      


/** Statistics for a team or player while they had possession of the ball. | Includes scoring and assisting stats.
*/
case class BasketballStatsOffensiveComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsCoverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamCoverage = attributes.get("@team-coverage") map { _.as[TeamCoverage]}
  lazy val durationScope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentScope = attributes.get("@alignment-scope") map { _.as[AlignmentScope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordMakingScope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingLabel = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodValue = attributes.get("@period-value") map { _.as[String]}
  lazy val periodType = attributes.get("@period-type") map { _.as[String]}
  lazy val startDateTime = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endDateTime = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodStartDateTime = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodEndDateTime = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalUnitType = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalUnitValue = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventSpan = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentValue = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentType = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitValue = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitType = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationKey = attributes.get("@location-key") map { _.as[String]}
  lazy val venueType = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceType = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatherType = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeValue = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceMaximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceMinimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementUnits = attributes.get("@measurement-units") map { _.as[String]}
  lazy val fieldGoalsMade = attributes.get("@field-goals-made") map { _.as[String]}
  lazy val fieldGoalsAttempted = attributes.get("@field-goals-attempted") map { _.as[String]}
  lazy val fieldGoalsPercentage = attributes.get("@field-goals-percentage") map { _.as[String]}
  lazy val fieldGoalsPerGame = attributes.get("@field-goals-per-game") map { _.as[String]}
  lazy val fieldGoalsAttemptedPerGame = attributes.get("@field-goals-attempted-per-game") map { _.as[String]}
  lazy val fieldGoalsPercentageAdjusted = attributes.get("@field-goals-percentage-adjusted") map { _.as[String]}
  lazy val threePointersMade = attributes.get("@three-pointers-made") map { _.as[String]}
  lazy val threePointersAttempted = attributes.get("@three-pointers-attempted") map { _.as[String]}
  lazy val threePointersPercentage = attributes.get("@three-pointers-percentage") map { _.as[String]}
  lazy val threePointersPerGame = attributes.get("@three-pointers-per-game") map { _.as[String]}
  lazy val threePointersAttemptedPerGame = attributes.get("@three-pointers-attempted-per-game") map { _.as[String]}
  lazy val freeThrowsMade = attributes.get("@free-throws-made") map { _.as[String]}
  lazy val freeThrowsAttempted = attributes.get("@free-throws-attempted") map { _.as[String]}
  lazy val freeThrowsPercentage = attributes.get("@free-throws-percentage") map { _.as[String]}
  lazy val freeThrowsPerGame = attributes.get("@free-throws-per-game") map { _.as[String]}
  lazy val freeThrowsAttemptedPerGame = attributes.get("@free-throws-attempted-per-game") map { _.as[String]}
  lazy val pointsScoredTotal = attributes.get("@points-scored-total") map { _.as[String]}
  lazy val pointsScoredPerGame = attributes.get("@points-scored-per-game") map { _.as[String]}
  lazy val pointsScoredPerGameHighest = attributes.get("@points-scored-per-game-highest") map { _.as[String]}
  lazy val pointsScoredPerShot = attributes.get("@points-scored-per-shot") map { _.as[String]}
  lazy val assistsTotal = attributes.get("@assists-total") map { _.as[String]}
  lazy val assistsPerGame = attributes.get("@assists-per-game") map { _.as[String]}
  lazy val turnoversTotal = attributes.get("@turnovers-total") map { _.as[String]}
  lazy val turnoversPerGame = attributes.get("@turnovers-per-game") map { _.as[String]}
  lazy val teamTurnoversTotal = attributes.get("@team-turnovers-total") map { _.as[String]}
  lazy val teamTurnoversPerGame = attributes.get("@team-turnovers-per-game") map { _.as[String]}
  lazy val pointsScoredOffTurnovers = attributes.get("@points-scored-off-turnovers") map { _.as[String]}
  lazy val pointsScoredInPaint = attributes.get("@points-scored-in-paint") map { _.as[String]}
  lazy val pointsScoredOnSecondChance = attributes.get("@points-scored-on-second-chance") map { _.as[String]}
  lazy val pointsScoredOnFastBreak = attributes.get("@points-scored-on-fast-break") map { _.as[String]}
}

      


/** Statistics for a team or player revolving around rebounds. | Includes rebounds credited to particular players, and credited to the entire team.
*/
case class BasketballStatsReboundingComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsCoverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamCoverage = attributes.get("@team-coverage") map { _.as[TeamCoverage]}
  lazy val durationScope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentScope = attributes.get("@alignment-scope") map { _.as[AlignmentScope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordMakingScope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingLabel = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodValue = attributes.get("@period-value") map { _.as[String]}
  lazy val periodType = attributes.get("@period-type") map { _.as[String]}
  lazy val startDateTime = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endDateTime = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodStartDateTime = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodEndDateTime = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalUnitType = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalUnitValue = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventSpan = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentValue = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentType = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitValue = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitType = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationKey = attributes.get("@location-key") map { _.as[String]}
  lazy val venueType = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceType = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatherType = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeValue = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceMaximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceMinimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementUnits = attributes.get("@measurement-units") map { _.as[String]}
  lazy val reboundsTotal = attributes.get("@rebounds-total") map { _.as[String]}
  lazy val reboundsTotalPercentage = attributes.get("@rebounds-total-percentage") map { _.as[String]}
  lazy val reboundsDefensive = attributes.get("@rebounds-defensive") map { _.as[String]}
  lazy val reboundsOpponentDefensive = attributes.get("@rebounds-opponent-defensive") map { _.as[String]}
  lazy val reboundsDefensivePercentage = attributes.get("@rebounds-defensive-percentage") map { _.as[String]}
  lazy val reboundsOffensive = attributes.get("@rebounds-offensive") map { _.as[String]}
  lazy val reboundsOffensivePercentage = attributes.get("@rebounds-offensive-percentage") map { _.as[String]}
  lazy val reboundsOpponentOffensive = attributes.get("@rebounds-opponent-offensive") map { _.as[String]}
  lazy val teamReboundsTotal = attributes.get("@team-rebounds-total") map { _.as[String]}
  lazy val teamReboundsTotalPercentage = attributes.get("@team-rebounds-total-percentage") map { _.as[String]}
  lazy val teamReboundsDefensive = attributes.get("@team-rebounds-defensive") map { _.as[String]}
  lazy val teamReboundsDefensivePercentage = attributes.get("@team-rebounds-defensive-percentage") map { _.as[String]}
  lazy val teamReboundsOffensive = attributes.get("@team-rebounds-offensive") map { _.as[String]}
  lazy val teamReboundsOffensivePercentage = attributes.get("@team-rebounds-offensive-percentage") map { _.as[String]}
  lazy val teamReboundsOpponentDefensive = attributes.get("@team-rebounds-opponent-defensive") map { _.as[String]}
  lazy val teamReboundsOpponentOffensive = attributes.get("@team-rebounds-opponent-offensive") map { _.as[String]}
  lazy val reboundsPerGame = attributes.get("@rebounds-per-game") map { _.as[String]}
  lazy val teamReboundsPerGame = attributes.get("@team-rebounds-per-game") map { _.as[String]}
  lazy val reboundsOffensivePerGame = attributes.get("@rebounds-offensive-per-game") map { _.as[String]}
  lazy val reboundsDefensivePerGame = attributes.get("@rebounds-defensive-per-game") map { _.as[String]}
  lazy val reboundsDifferential = attributes.get("@rebounds-differential") map { _.as[String]}
  lazy val reboundsOpponentTotal = attributes.get("@rebounds-opponent-total") map { _.as[String]}
  lazy val teamReboundsOpponentTotal = attributes.get("@team-rebounds-opponent-total") map { _.as[String]}
}

      


/** Statistics for a team or player while the other team was in possession of the ball. | Includes information on steals and blocks.
*/
case class BasketballStatsDefensiveComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsCoverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamCoverage = attributes.get("@team-coverage") map { _.as[TeamCoverage]}
  lazy val durationScope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentScope = attributes.get("@alignment-scope") map { _.as[AlignmentScope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordMakingScope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingLabel = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodValue = attributes.get("@period-value") map { _.as[String]}
  lazy val periodType = attributes.get("@period-type") map { _.as[String]}
  lazy val startDateTime = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endDateTime = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodStartDateTime = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodEndDateTime = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalUnitType = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalUnitValue = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventSpan = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentValue = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentType = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitValue = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitType = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationKey = attributes.get("@location-key") map { _.as[String]}
  lazy val venueType = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceType = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatherType = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeValue = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceMaximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceMinimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementUnits = attributes.get("@measurement-units") map { _.as[String]}
  lazy val stealsTotal = attributes.get("@steals-total") map { _.as[String]}
  lazy val stealsPerGame = attributes.get("@steals-per-game") map { _.as[String]}
  lazy val stealsOpponent = attributes.get("@steals-opponent") map { _.as[String]}
  lazy val stealsDifferential = attributes.get("@steals-differential") map { _.as[String]}
  lazy val blocksTotal = attributes.get("@blocks-total") map { _.as[String]}
  lazy val blocksPerGame = attributes.get("@blocks-per-game") map { _.as[String]}
  lazy val blocksOpponent = attributes.get("@blocks-opponent") map { _.as[String]}
  lazy val blocksDifferential = attributes.get("@blocks-differential") map { _.as[String]}
  lazy val pointsScoredAgainstPerGame = attributes.get("@points-scored-against-per-game") map { _.as[String]}
  lazy val pointsScoredAgainstPerGameHighest = attributes.get("@points-scored-against-per-game-highest") map { _.as[String]}
  lazy val fieldGoalsAgainstPerGame = attributes.get("@field-goals-against-per-game") map { _.as[String]}
  lazy val fieldGoalsAgainstPercentage = attributes.get("@field-goals-against-percentage") map { _.as[String]}
  lazy val chargesTaken = attributes.get("@charges-taken") map { _.as[String]}
}

      


