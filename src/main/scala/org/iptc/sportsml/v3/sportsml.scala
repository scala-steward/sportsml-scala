// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package org.iptc.sportsml.v3


/** SportsML is a global XML standard for the interchange of sports data.
            Designed to be as easy to understand and implement as possible, SportsML allows for the
            exchange of sports scores, schedules, standings, and statistics for a wide variety of
            competitions. Its extensibility allows for the easy accommodation of many sports from
            around the globe. It cooperates with current IPTC standards NewsML and NITF to enable
            publishers to package sports statistics alongside edited coverage of
            sports.
*/


case class Sportsu45content(sportsu45contentoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.Sportsu45contentOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
}

      

trait Sportsu45contentOption

/** Background information about a game. | Where, when, and what an event
                is.
*/
case class EventMetadataComplexType(sportsu45contentu45codes: Option[org.iptc.sportsml.v3.SportsContentCodesComplexType] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  site: Seq[org.iptc.sportsml.v3.SiteComplexType] = Nil,
  award: Seq[org.iptc.sportsml.v3.AwardComplexType] = Nil,
  eventu45sponsor: Seq[org.iptc.sportsml.v3.EventSponsorComplexType] = Nil,
  eventu45recurringu45name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  eventmetadatacomplextypeoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.EventMetadataComplexTypeOption]] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseEventMetadataComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val key = attributes.get("@key") map { _.as[String]}
  lazy val minutesu45elapsed = attributes.get("@minutes-elapsed") map { _.as[String]}
  lazy val periodu45minuteu45elapsed = attributes.get("@period-minute-elapsed") map { _.as[String]}
  lazy val periodu45timeu45elapsed = attributes.get("@period-time-elapsed") map { _.as[String]}
  lazy val periodu45timeu45remaining = attributes.get("@period-time-remaining") map { _.as[String]}
  lazy val eventu45recurringu45key = attributes.get("@event-recurring-key") map { _.as[String]}
  lazy val eventu45style = attributes.get("@event-style") map { _.as[String]}
  lazy val eventu45number = attributes.get("@event-number") map { _.as[BigInt]}
  lazy val eventu45status = attributes.get("@event-status") map { _.as[String]}
  lazy val eventu45type = attributes.get("@event-type") map { _.as[String]}
  lazy val eventu45statusu45reason = attributes.get("@event-status-reason") map { _.as[String]}
  lazy val eventu45statusu45note = attributes.get("@event-status-note") map { _.as[String]}
  lazy val eventu45ofu45day = attributes.get("@event-of-day") map { _.as[String]}
  lazy val eventsu45dayu45total = attributes.get("@events-day-total") map { _.as[String]}
  lazy val startu45weekday = attributes.get("@start-weekday") map { _.as[String]}
  lazy val endu45weekday = attributes.get("@end-weekday") map { _.as[String]}
  lazy val heatu45number = attributes.get("@heat-number") map { _.as[String]}
  lazy val duration = attributes.get("@duration") map { _.as[javax.xml.datatype.Duration]}
  lazy val timeu45certainty = attributes.get("@time-certainty") map { _.as[Timeu45certainty]}
  lazy val seasonu45key = attributes.get("@season-key") map { _.as[String]}
  lazy val seasonu45type = attributes.get("@season-type") map { _.as[String]}
  lazy val seriesu45index = attributes.get("@series-index") map { _.as[String]}
  lazy val eventu45outcomeu45type = attributes.get("@event-outcome-type") map { _.as[String]}
}

      

trait EventMetadataComplexTypeOption

/** Stats applying to the game as a whole. Initially designed for motor-racing, but potentially applicable to many sports.
*/
case class EventStatsComplexType(sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  eventstatscomplextypeoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.MotorRacingEventStatsComplexType]] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
}

      

trait EventStatsComplexTypeOption

/** Complex type for sports events, both generic and sport specific.
*/
case class EventActionsComplexType(action: Seq[org.iptc.sportsml.v3.BaseActionComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
}

      


/** Background data about a tournament. | Where and when the this tournament took place.
*/
case class TournamentMetadataComplexType(sportsu45contentu45codes: Option[org.iptc.sportsml.v3.SportsContentCodesComplexType] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  site: Seq[org.iptc.sportsml.v3.SiteComplexType] = Nil,
  award: Seq[org.iptc.sportsml.v3.AwardComplexType] = Nil,
  tournamentmetadatacomplextypeoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.TournamentMetadataComplexTypeOption]] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseTournamentMetadataComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val key = attributes.get("@key") map { _.as[String]}
  lazy val status = attributes.get("@status") map { _.as[String]}
  lazy val minimumu45subparts = attributes.get("@minimum-subparts") map { _.as[BigInt]}
  lazy val maximumu45subparts = attributes.get("@maximum-subparts") map { _.as[BigInt]}
  lazy val number = attributes.get("@number") map { _.as[BigInt]}
}

      

trait TournamentMetadataComplexTypeOption

/** General information about the division of this tournament. | Where and when this division is competing.
*/
case class TournamentDivisionMetadataComplexType(sportsu45contentu45codes: Option[org.iptc.sportsml.v3.SportsContentCodesComplexType] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  site: Seq[org.iptc.sportsml.v3.SiteComplexType] = Nil,
  award: Seq[org.iptc.sportsml.v3.AwardComplexType] = Nil,
  tournamentdivisionmetadatacomplextypeoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.GolfTournamentDivisionMetadataComplexType]] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseTournamentMetadataComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val key = attributes.get("@key") map { _.as[String]}
  lazy val status = attributes.get("@status") map { _.as[String]}
  lazy val minimumu45subparts = attributes.get("@minimum-subparts") map { _.as[BigInt]}
  lazy val maximumu45subparts = attributes.get("@maximum-subparts") map { _.as[BigInt]}
  lazy val number = attributes.get("@number") map { _.as[BigInt]}
  lazy val divisionu45number = attributes.get("@division-number") map { _.as[String]}
}

      

trait TournamentDivisionMetadataComplexTypeOption

/** General information about the division of this tournament. | Where and when this division is competing.
*/
case class TournamentPartMetadataComplexType(sportsu45contentu45codes: Option[org.iptc.sportsml.v3.SportsContentCodesComplexType] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  site: Seq[org.iptc.sportsml.v3.SiteComplexType] = Nil,
  award: Seq[org.iptc.sportsml.v3.AwardComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseTournamentMetadataComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val key = attributes.get("@key") map { _.as[String]}
  lazy val status = attributes.get("@status") map { _.as[String]}
  lazy val minimumu45subparts = attributes.get("@minimum-subparts") map { _.as[BigInt]}
  lazy val maximumu45subparts = attributes.get("@maximum-subparts") map { _.as[BigInt]}
  lazy val number = attributes.get("@number") map { _.as[BigInt]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val formatu45type = attributes.get("@format-type") map { _.as[String]}
}

      


case class TeamMetadataComplexType(name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  homeu45location: Option[org.iptc.sportsml.v3.FlexLocationPropTypable] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  site: Seq[org.iptc.sportsml.v3.SiteComplexType] = Nil,
  sportsu45contentu45codes: Seq[org.iptc.sportsml.v3.SportsContentCodesComplexType] = Nil,
  teammetadatacomplextypeoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.TeamMetadataComplexTypeOption]] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseTeamMetadataComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val key = attributes.get("@key") map { _.as[String]}
  lazy val nationality = attributes.get("@nationality") map { _.as[String]}
  lazy val alignment = attributes.get("@alignment") map { _.as[AlignmentType]}
  lazy val established = attributes.get("@established") map { _.as[String]}
  lazy val dissolved = attributes.get("@dissolved") map { _.as[String]}
  lazy val teamu45idref = attributes.get("@team-idref") map { _.as[String]}
  lazy val homeu45pageu45url = attributes.get("@home-page-url") map { _.as[java.net.URI]}
  lazy val roundu45position = attributes.get("@round-position") map { _.as[String]}
}

      

trait TeamMetadataComplexTypeOption

case class TeamStatsComplexType(rating: Seq[org.iptc.sportsml.v3.RatingComplexType] = Nil,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  stats: Seq[org.iptc.sportsml.v3.GenericStatComplexType] = Nil,
  outcomeu45totals: Seq[org.iptc.sportsml.v3.OutcomeTotalsComplexType] = Nil,
  outcomeu45result: Seq[org.iptc.sportsml.v3.OutcomeResultComplexType] = Nil,
  penaltyu45stats: Seq[org.iptc.sportsml.v3.PenaltyStatsComplexType] = Nil,
  award: Seq[org.iptc.sportsml.v3.AwardComplexType] = Nil,
  rank: Seq[org.iptc.sportsml.v3.RankComplexType] = Nil,
  subu45score: Seq[org.iptc.sportsml.v3.SubScoreComplexType] = Nil,
  eventu45record: Seq[org.iptc.sportsml.v3.EventRecordComplexType] = Nil,
  teamstatscomplextypeoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.TeamStatsComplexTypeOption]] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseTeamStatsComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val points = attributes.get("@points") map { _.as[BigInt]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val score = attributes.get("@score") map { _.as[String]}
  lazy val scoreu45opposing = attributes.get("@score-opposing") map { _.as[String]}
  lazy val scoreu45average = attributes.get("@score-average") map { _.as[String]}
  lazy val scoreu45opposingu45average = attributes.get("@score-opposing-average") map { _.as[String]}
  lazy val scoreu45units = attributes.get("@score-units") map { _.as[String]}
  lazy val scoreu45behind = attributes.get("@score-behind") map { _.as[String]}
  lazy val scoreu45attempts = attributes.get("@score-attempts") map { _.as[String]}
  lazy val scoreu45attemptsu45opposing = attributes.get("@score-attempts-opposing") map { _.as[String]}
  lazy val scoreu45attemptsu45onu45goal = attributes.get("@score-attempts-on-goal") map { _.as[String]}
  lazy val scoreu45attemptsu45onu45goalu45opposing = attributes.get("@score-attempts-on-goal-opposing") map { _.as[String]}
  lazy val scoreu45percentage = attributes.get("@score-percentage") map { _.as[String]}
  lazy val scoreu45percentageu45opposing = attributes.get("@score-percentage-opposing") map { _.as[String]}
  lazy val resultu45effect = attributes.get("@result-effect") map { _.as[String]}
  lazy val eventu45outcome = attributes.get("@event-outcome") map { _.as[String]}
  lazy val eventu45standingu45points = attributes.get("@event-standing-points") map { _.as[String]}
  lazy val eventu45standingu45pointsu45against = attributes.get("@event-standing-points-against") map { _.as[String]}
  lazy val scoreu45type = attributes.get("@score-type") map { _.as[String]}
  lazy val eventsu45remaining = attributes.get("@events-remaining") map { _.as[String]}
  lazy val timeu45ofu45possession = attributes.get("@time-of-possession") map { _.as[String]}
  lazy val timeu45ofu45possessionu45percentage = attributes.get("@time-of-possession-percentage") map { _.as[String]}
  lazy val timeu45ofu45possessionu45percentageu45opposing = attributes.get("@time-of-possession-percentage-opposing") map { _.as[String]}
  lazy val timeu45ofu45possessionu45average = attributes.get("@time-of-possession-average") map { _.as[String]}
  lazy val timeu45ofu45possessionu45averageu45opposing = attributes.get("@time-of-possession-average-opposing") map { _.as[String]}
  lazy val seriesu45score = attributes.get("@series-score") map { _.as[String]}
  lazy val seriesu45scoreu45opposing = attributes.get("@series-score-opposing") map { _.as[String]}
  lazy val adjustedu45scoreu45for = attributes.get("@adjusted-score-for") map { _.as[String]}
  lazy val adjustedu45scoreu45against = attributes.get("@adjusted-score-against") map { _.as[String]}
  lazy val eventsu45played = attributes.get("@events-played") map { _.as[BigInt]}
  lazy val timeu45playedu45total = attributes.get("@time-played-total") map { _.as[String]}
}

      

trait TeamStatsComplexTypeOption

case class PlayerMetadataComplexType(name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  homeu45location: Option[org.iptc.sportsml.v3.FlexLocationPropTypable] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  baseplayermetadatacomplextypableoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.BasePlayerMetadataComplexTypableOption]] = None,
  playermetadatacomplextypeoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.PlayerMetadataComplexTypeOption]] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BasePlayerMetadataComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val key = attributes.get("@key") map { _.as[String]}
  lazy val nationality = attributes.get("@nationality") map { _.as[String]}
  lazy val dateu45ofu45birth = attributes.get("@date-of-birth") map { _.as[String]}
  lazy val dateu45ofu45death = attributes.get("@date-of-death") map { _.as[String]}
  lazy val height = attributes.get("@height") map { _.as[String]}
  lazy val weight = attributes.get("@weight") map { _.as[BigInt]}
  lazy val positionu45regular = attributes.get("@position-regular") map { _.as[String]}
  lazy val positionu45event = attributes.get("@position-event") map { _.as[String]}
  lazy val positionu45depth = attributes.get("@position-depth") map { _.as[String]}
  lazy val health = attributes.get("@health") map { _.as[String]}
  lazy val gender = attributes.get("@gender") map { _.as[GenderType]}
  lazy val teamu45idref = attributes.get("@team-idref") map { _.as[String]}
  lazy val status = attributes.get("@status") map { _.as[String]}
  lazy val lineupu45slot = attributes.get("@lineup-slot") map { _.as[String]}
  lazy val lineupu45slotu45sequence = attributes.get("@lineup-slot-sequence") map { _.as[String]}
  lazy val scratchu45reason = attributes.get("@scratch-reason") map { _.as[String]}
  lazy val uniformu45number = attributes.get("@uniform-number") map { _.as[String]}
  lazy val homeu45pageu45url = attributes.get("@home-page-url") map { _.as[java.net.URI]}
  lazy val roundu45position = attributes.get("@round-position") map { _.as[String]}
}

      

trait PlayerMetadataComplexTypeOption

case class PlayerStatsComplexType(rating: Seq[org.iptc.sportsml.v3.RatingComplexType] = Nil,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  stats: Seq[org.iptc.sportsml.v3.GenericStatComplexType] = Nil,
  outcomeu45totals: Seq[org.iptc.sportsml.v3.OutcomeTotalsComplexType] = Nil,
  outcomeu45result: Seq[org.iptc.sportsml.v3.OutcomeResultComplexType] = Nil,
  penaltyu45stats: Seq[org.iptc.sportsml.v3.PenaltyStatsComplexType] = Nil,
  award: Seq[org.iptc.sportsml.v3.AwardComplexType] = Nil,
  rank: Seq[org.iptc.sportsml.v3.RankComplexType] = Nil,
  subu45score: Seq[org.iptc.sportsml.v3.SubScoreComplexType] = Nil,
  eventu45record: Seq[org.iptc.sportsml.v3.EventRecordComplexType] = Nil,
  playerstatscomplextypeoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.PlayerStatsComplexTypeOption]] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BasePlayerStatsComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val points = attributes.get("@points") map { _.as[BigInt]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val score = attributes.get("@score") map { _.as[String]}
  lazy val scoreu45opposing = attributes.get("@score-opposing") map { _.as[String]}
  lazy val scoreu45average = attributes.get("@score-average") map { _.as[String]}
  lazy val scoreu45opposingu45average = attributes.get("@score-opposing-average") map { _.as[String]}
  lazy val scoreu45units = attributes.get("@score-units") map { _.as[String]}
  lazy val scoreu45behind = attributes.get("@score-behind") map { _.as[String]}
  lazy val scoreu45attempts = attributes.get("@score-attempts") map { _.as[String]}
  lazy val scoreu45attemptsu45opposing = attributes.get("@score-attempts-opposing") map { _.as[String]}
  lazy val scoreu45attemptsu45onu45goal = attributes.get("@score-attempts-on-goal") map { _.as[String]}
  lazy val scoreu45attemptsu45onu45goalu45opposing = attributes.get("@score-attempts-on-goal-opposing") map { _.as[String]}
  lazy val scoreu45percentage = attributes.get("@score-percentage") map { _.as[String]}
  lazy val scoreu45percentageu45opposing = attributes.get("@score-percentage-opposing") map { _.as[String]}
  lazy val resultu45effect = attributes.get("@result-effect") map { _.as[String]}
  lazy val eventu45outcome = attributes.get("@event-outcome") map { _.as[String]}
  lazy val eventu45standingu45points = attributes.get("@event-standing-points") map { _.as[String]}
  lazy val eventu45standingu45pointsu45against = attributes.get("@event-standing-points-against") map { _.as[String]}
  lazy val scoreu45type = attributes.get("@score-type") map { _.as[String]}
  lazy val eventsu45remaining = attributes.get("@events-remaining") map { _.as[String]}
  lazy val timeu45ofu45possession = attributes.get("@time-of-possession") map { _.as[String]}
  lazy val timeu45ofu45possessionu45percentage = attributes.get("@time-of-possession-percentage") map { _.as[String]}
  lazy val timeu45ofu45possessionu45percentageu45opposing = attributes.get("@time-of-possession-percentage-opposing") map { _.as[String]}
  lazy val timeu45ofu45possessionu45average = attributes.get("@time-of-possession-average") map { _.as[String]}
  lazy val timeu45ofu45possessionu45averageu45opposing = attributes.get("@time-of-possession-average-opposing") map { _.as[String]}
  lazy val seriesu45score = attributes.get("@series-score") map { _.as[String]}
  lazy val seriesu45scoreu45opposing = attributes.get("@series-score-opposing") map { _.as[String]}
  lazy val adjustedu45scoreu45for = attributes.get("@adjusted-score-for") map { _.as[String]}
  lazy val adjustedu45scoreu45against = attributes.get("@adjusted-score-against") map { _.as[String]}
  lazy val eventsu45played = attributes.get("@events-played") map { _.as[BigInt]}
  lazy val timeu45playedu45total = attributes.get("@time-played-total") map { _.as[String]}
  lazy val timeu45playedu45event = attributes.get("@time-played-event") map { _.as[String]}
  lazy val timeu45playedu45eventu45average = attributes.get("@time-played-event-average") map { _.as[String]}
  lazy val eventsu45started = attributes.get("@events-started") map { _.as[BigInt]}
  lazy val dateu45timeu45entered = attributes.get("@date-time-entered") map { _.as[javax.xml.datatype.XMLGregorianCalendar]}
  lazy val dateu45timeu45exited = attributes.get("@date-time-exited") map { _.as[javax.xml.datatype.XMLGregorianCalendar]}
  lazy val eventu45timeu45entered = attributes.get("@event-time-entered") map { _.as[String]}
  lazy val eventu45timeu45exited = attributes.get("@event-time-exited") map { _.as[String]}
}

      

trait PlayerStatsComplexTypeOption

case class OfficialMetadataComplexType(name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  homeu45location: Option[org.iptc.sportsml.v3.FlexLocationPropTypable] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseOfficialMetadataComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val key = attributes.get("@key") map { _.as[String]}
  lazy val nationality = attributes.get("@nationality") map { _.as[String]}
  lazy val dateu45ofu45birth = attributes.get("@date-of-birth") map { _.as[String]}
  lazy val dateu45ofu45death = attributes.get("@date-of-death") map { _.as[String]}
  lazy val height = attributes.get("@height") map { _.as[String]}
  lazy val weight = attributes.get("@weight") map { _.as[BigInt]}
  lazy val positionu45regular = attributes.get("@position-regular") map { _.as[String]}
  lazy val positionu45event = attributes.get("@position-event") map { _.as[String]}
  lazy val positionu45depth = attributes.get("@position-depth") map { _.as[String]}
  lazy val health = attributes.get("@health") map { _.as[String]}
  lazy val gender = attributes.get("@gender") map { _.as[GenderType]}
  lazy val uniformu45number = attributes.get("@uniform-number") map { _.as[String]}
}

      


case class OfficialStatsComplexType(rating: Seq[org.iptc.sportsml.v3.RatingComplexType] = Nil,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  stats: Seq[org.iptc.sportsml.v3.GenericStatComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseStatsComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
}

      


case class AssociateStatsComplexType(rating: Seq[org.iptc.sportsml.v3.RatingComplexType] = Nil,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  stats: Seq[org.iptc.sportsml.v3.GenericStatComplexType] = Nil,
  outcomeu45totals: Seq[org.iptc.sportsml.v3.OutcomeTotalsComplexType] = Nil,
  outcomeu45result: Seq[org.iptc.sportsml.v3.OutcomeResultComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Base2StatsComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val points = attributes.get("@points") map { _.as[BigInt]}
}

      


case class AssociateMetadataComplexType(name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  homeu45location: Option[org.iptc.sportsml.v3.FlexLocationPropTypable] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  associatemetadatacomplextypeoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.MotorRacingAssociateMetadataComplexType]] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseAssociateMetadataComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val key = attributes.get("@key") map { _.as[String]}
  lazy val nationality = attributes.get("@nationality") map { _.as[String]}
  lazy val dateu45ofu45birth = attributes.get("@date-of-birth") map { _.as[String]}
  lazy val dateu45ofu45death = attributes.get("@date-of-death") map { _.as[String]}
  lazy val height = attributes.get("@height") map { _.as[String]}
  lazy val weight = attributes.get("@weight") map { _.as[BigInt]}
  lazy val positionu45regular = attributes.get("@position-regular") map { _.as[String]}
  lazy val positionu45event = attributes.get("@position-event") map { _.as[String]}
  lazy val positionu45depth = attributes.get("@position-depth") map { _.as[String]}
  lazy val health = attributes.get("@health") map { _.as[String]}
  lazy val gender = attributes.get("@gender") map { _.as[GenderType]}
}

      

trait AssociateMetadataComplexTypeOption

case class Advisory(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
}

      


case class SportsMetadataComplexType(sportsu45contentu45codes: Option[org.iptc.sportsml.v3.SportsContentCodesComplexType] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  catalogRef: Seq[org.iptc.sportsml.v3.CatalogRef2] = Nil,
  sportsu45title: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  advisory: Option[org.iptc.sportsml.v3.Advisory] = None,
  featureu45name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseMetadataComplexTypable with Sportsu45contentOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val docu45id = attributes("@doc-id").as[String]
  lazy val publisher = attributes.get("@publisher") map { _.as[String]}
  lazy val dateu45time = attributes.get("@date-time") map { _.as[String]}
  lazy val language = attributes.get("@language") map { _.as[String]}
  lazy val slug = attributes.get("@slug") map { _.as[String]}
  lazy val documentu45class = attributes.get("@document-class") map { _.as[String]}
  lazy val fixtureu45key = attributes.get("@fixture-key") map { _.as[String]}
}

      


/** A container for content-codes. | Can hold as many codes as needed to describe all contents at this level and below.
*/
case class SportsContentCodesComplexType(sportscontentcodescomplextypesequence1: Seq[org.iptc.sportsml.v3.SportsContentCodesComplexTypeSequence1] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
}

      

case class SportsContentCodesComplexTypeSequence1(sportsu45contentu45code: org.iptc.sportsml.v3.SportsContentCodeComplexType)

/** An individual code that describes an entity one may want to filter for. Describes what sports, what teams, etc., are covered.
*/
case class SportsContentCodeComplexType(sportscontentcodecomplextypesequence1: Seq[org.iptc.sportsml.v3.SportsContentCodeComplexTypeSequence1] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val codeu45type = attributes("@code-type").as[String]
  lazy val codeu45key = attributes.get("@code-key") map { _.as[String]}
  lazy val codeu45name = attributes.get("@code-name") map { _.as[String]}
}

      

case class SportsContentCodeComplexTypeSequence1(sportsu45contentu45qualifier: org.iptc.sportsml.v3.SportsContentQualifierComplexType)
trait Gender

object Gender {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Gender]): Gender = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Gender) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object Male extends Gender { override def toString = "male" }
case object Female extends Gender { override def toString = "female" }
case object Mixed extends Gender { override def toString = "mixed" }


/** Further refinement/elaboration of a sports-content-code. | If the document covers more than one of these, additional sports-content-qualifier elements may be used.
*/
case class SportsContentQualifierComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val gender = attributes.get("@gender") map { _.as[Gender]}
  lazy val participantu45count = attributes.get("@participant-count") map { _.as[String]}
  lazy val professionalu45status = attributes.get("@professional-status") map { _.as[String]}
  lazy val specialu45group = attributes.get("@special-group") map { _.as[String]}
  lazy val minimumu45age = attributes.get("@minimum-age") map { _.as[String]}
  lazy val maximumu45age = attributes.get("@maximum-age") map { _.as[String]}
  lazy val specialu45needs = attributes.get("@special-needs") map { _.as[String]}
}

      


/** An extensible property, similar to structures in NewsML 1.
*/
case class SportsPropertyComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val formalu45name = attributes.get("@formal-name") map { _.as[String]}
  lazy val vocabulary = attributes.get("@vocabulary") map { _.as[String]}
  lazy val scheme = attributes.get("@scheme") map { _.as[String]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
  lazy val allowedu45values = attributes.get("@allowed-values") map { _.as[String]}
}

      


/** A sporting competition. | A contest that generally ends with a winner.
*/
case class SportsEventComplexType(eventu45metadata: Option[org.iptc.sportsml.v3.EventMetadataComplexType] = None,
  eventu45stats: Option[org.iptc.sportsml.v3.EventStatsComplexType] = None,
  sportseventcomplextypeoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.SportsEventComplexTypeOption]] = Nil,
  wageringu45stats: Seq[org.iptc.sportsml.v3.Wageringu45stats] = Nil,
  officials: Option[org.iptc.sportsml.v3.OfficialsComplexType] = None,
  actions: Option[org.iptc.sportsml.v3.EventActionsComplexType] = None,
  highlight: Seq[org.iptc.sportsml.v3.HighlightComplexType] = Nil,
  award: Seq[org.iptc.sportsml.v3.AwardComplexType] = Nil,
  sportsu45event: Seq[org.iptc.sportsml.v3.SportsEventComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Sportsu45contentOption with TournamentComplexTypeOption with TournamentDivisionComplexTypeOption with TournamentPartComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
}

      

trait SportsEventComplexTypeOption

/** A sponsor for an event. | Events can have more than one sponsor.
*/
case class EventSponsorComplexType(name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
}

      


/** A textual highlight. | Can hold plain text, or could hold NITF.
*/
case class HighlightComplexType(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
}

      


/** An element housing data having to do with a venue, stadium, arena, field, etc.
*/
case class SiteComplexType(siteu45metadata: org.iptc.sportsml.v3.SiteMetadataComplexType,
  siteu45stats: Seq[org.iptc.sportsml.v3.SiteStatsComnplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
}

      


/** Metadata about the site.
*/
case class SiteMetadataComplexType(name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  homeu45location: Option[org.iptc.sportsml.v3.FlexLocationPropTypable] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  sportsu45contentu45codes: Option[org.iptc.sportsml.v3.SportsContentCodesComplexType] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseEntityMetadataComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val key = attributes.get("@key") map { _.as[String]}
  lazy val nationality = attributes.get("@nationality") map { _.as[String]}
  lazy val capacity = attributes.get("@capacity") map { _.as[String]}
  lazy val siteu45style = attributes.get("@site-style") map { _.as[String]}
  lazy val surface = attributes.get("@surface") map { _.as[String]}
  lazy val shape = attributes.get("@shape") map { _.as[String]}
  lazy val incline = attributes.get("@incline") map { _.as[String]}
  lazy val length = attributes.get("@length") map { _.as[String]}
  lazy val lengthu45units = attributes.get("@length-units") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val homeu45pageu45url = attributes.get("@home-page-url") map { _.as[java.net.URI]}
  lazy val created = attributes.get("@created") map { _.as[String]}
  lazy val ceasedToExist = attributes.get("@ceasedToExist") map { _.as[String]}
}

      

trait Alignment

object Alignment {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Alignment]): Alignment = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Alignment) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object HomeValue extends Alignment { override def toString = "home" }
case object Neutral extends Alignment { override def toString = "neutral" }


/** Holder for statistics about the site.
*/
case class SiteStatsComnplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val alignment = attributes.get("@alignment") map { _.as[Alignment]}
  lazy val attendance = attributes.get("@attendance") map { _.as[String]}
  lazy val attendanceu45average = attributes.get("@attendance-average") map { _.as[String]}
  lazy val temperature = attributes.get("@temperature") map { _.as[String]}
  lazy val temperatureu45units = attributes.get("@temperature-units") map { _.as[String]}
  lazy val weatheru45code = attributes.get("@weather-code") map { _.as[String]}
  lazy val weatheru45label = attributes.get("@weather-label") map { _.as[String]}
  lazy val weatheru45wind = attributes.get("@weather-wind") map { _.as[String]}
  lazy val weatheru45prediction = attributes.get("@weather-prediction") map { _.as[String]}
  lazy val probabilityu45ofu45precipitation = attributes.get("@probability-of-precipitation") map { _.as[String]}
}

      


/** A team participating in a sporting event. | Holds metadata and
                statistical data for team.
*/
case class TeamComplexType(teamu45metadata: org.iptc.sportsml.v3.TeamMetadataComplexType,
  teamu45stats: Seq[org.iptc.sportsml.v3.TeamStatsComplexType] = Nil,
  player: Seq[org.iptc.sportsml.v3.PlayerComplexType] = Nil,
  wageringu45stats: Seq[org.iptc.sportsml.v3.Wageringu45stats] = Nil,
  associate: Seq[org.iptc.sportsml.v3.AssociateComplexType] = Nil,
  affiliation: Seq[org.iptc.sportsml.v3.AffiliationComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends SportsEventComplexTypeOption with StandingComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
}

      


/** Statistics that detail the score for a particular period or inning. Per-sport controlled vocabularies used for period- value.
*/
case class SubScoreComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val score = attributes.get("@score") map { _.as[String]}
  lazy val subu45scoreu45type = attributes.get("@sub-score-type") map { _.as[String]}
  lazy val subu45scoreu45key = attributes.get("@sub-score-key") map { _.as[String]}
  lazy val subu45scoreu45name = attributes.get("@sub-score-name") map { _.as[String]}
  lazy val rank = attributes.get("@rank") map { _.as[String]}
  lazy val totalu45score = attributes.get("@total-score") map { _.as[String]}
  lazy val scoreu45attempts = attributes.get("@score-attempts") map { _.as[String]}
}

      


/** Statistics that detail the number of each type of penalty. | Can be recorded for either a team or a player.
*/
case class PenaltyStatsComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val count = attributes.get("@count") map { _.as[BigInt]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
}

      


/** A report on the number of wins, losses, etc., the team or player had during a particular time period. | Can also be scoped with various coverage qualifications, such as just events played at home.
*/
case class OutcomeTotalsComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val wins = attributes.get("@wins") map { _.as[BigInt]}
  lazy val losses = attributes.get("@losses") map { _.as[BigInt]}
  lazy val ties = attributes.get("@ties") map { _.as[BigInt]}
  lazy val undecideds = attributes.get("@undecideds") map { _.as[BigInt]}
  lazy val winningu45percentage = attributes.get("@winning-percentage") map { _.as[BigInt]}
  lazy val pointsu45scoredu45for = attributes.get("@points-scored-for") map { _.as[BigInt]}
  lazy val pointsu45scoredu45against = attributes.get("@points-scored-against") map { _.as[BigInt]}
  lazy val pointsu45difference = attributes.get("@points-difference") map { _.as[BigInt]}
  lazy val standingu45points = attributes.get("@standing-points") map { _.as[String]}
  lazy val standingu45pointsu45against = attributes.get("@standing-points-against") map { _.as[String]}
  lazy val streaku45type = attributes.get("@streak-type") map { _.as[String]}
  lazy val streaku45duration = attributes.get("@streak-duration") map { _.as[javax.xml.datatype.Duration]}
  lazy val streaku45total = attributes.get("@streak-total") map { _.as[BigInt]}
  lazy val streaku45start = attributes.get("@streak-start") map { _.as[String]}
  lazy val streaku45end = attributes.get("@streak-end") map { _.as[String]}
  lazy val eventsu45played = attributes.get("@events-played") map { _.as[BigInt]}
  lazy val eventsu45remaining = attributes.get("@events-remaining") map { _.as[BigInt]}
  lazy val gamesu45back = attributes.get("@games-back") map { _.as[BigInt]}
  lazy val lossesu45overtime = attributes.get("@losses-overtime") map { _.as[BigInt]}
  lazy val relegationu45average = attributes.get("@relegation-average") map { _.as[BigDecimal]}
}

      


/** A report on the result, if any, from the event etc.
*/
case class OutcomeResultComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val key = attributes.get("@key") map { _.as[String]}
  lazy val comment = attributes.get("@comment") map { _.as[String]}
}

      


/** A medal, ribbon, placement, or other type of award. | Can be assigned to an event, a team, or a player.
*/
case class AwardComplexType(name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val awardu45type = attributes.get("@award-type") map { _.as[String]}
  lazy val playeru45oru45teamu45idref = attributes.get("@player-or-team-idref") map { _.as[String]}
  lazy val total = attributes.get("@total") map { _.as[BigInt]}
  lazy val place = attributes.get("@place") map { _.as[String]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
  lazy val currency = attributes.get("@currency") map { _.as[String]}
}

      


/** A world, national, state, or school record. | More than one record can be set by one participant at one sports-event.
*/
case class EventRecordComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val previousu45record = attributes.get("@previous-record") map { _.as[String]}
}

      


/** How a team is doing in comparison to other teams or players. | May be qualified, so that one ranks teams or players according to, say, how they play at home, or within their division.
*/
case class RankComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val issuer = attributes.get("@issuer") map { _.as[String]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
  lazy val valueu45previous = attributes.get("@value-previous") map { _.as[String]}
}

      


/** A judged value placed on the team or individual. | Often used in British soccer.
*/
case class RatingComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val ratingu45type = attributes.get("@rating-type") map { _.as[String]}
  lazy val ratingu45issuer = attributes.get("@rating-issuer") map { _.as[String]}
  lazy val ratingu45value = attributes.get("@rating-value") map { _.as[String]}
  lazy val ratingu45maximum = attributes.get("@rating-maximum") map { _.as[String]}
}

      


/** A competitor. | Their athletic talents help them decide who wins a sports-event.
*/
case class PlayerComplexType(playeru45metadata: org.iptc.sportsml.v3.PlayerMetadataComplexType,
  playeru45stats: Seq[org.iptc.sportsml.v3.PlayerStatsComplexType] = Nil,
  wageringu45stats: Seq[org.iptc.sportsml.v3.Wageringu45stats] = Nil,
  associate: Seq[org.iptc.sportsml.v3.AssociateComplexType] = Nil,
  affiliation: Seq[org.iptc.sportsml.v3.AffiliationComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends SportsEventComplexTypeOption with StandingComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
}

      


/** A set of officials. | May hold zero or more.
*/
case class OfficialsComplexType(official: Seq[org.iptc.sportsml.v3.OfficialComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
}

      


/** Also referred to as umpire or referree. | Ensures that the
                sports-event is played according to its rules.
*/
case class OfficialComplexType(officialu45metadata: org.iptc.sportsml.v3.OfficialMetadataComplexType,
  officialu45stats: Option[org.iptc.sportsml.v3.OfficialStatsComplexType] = None,
  affiliation: Seq[org.iptc.sportsml.v3.AffiliationComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
}

      


/** Manager or coach or jockey, etc. | An individual or a group that assists a team or player, and functions in a supporting capacity.
*/
case class AssociateComplexType(associateu45metadata: org.iptc.sportsml.v3.AssociateMetadataComplexType,
  associateu45stats: Option[org.iptc.sportsml.v3.AssociateStatsComplexType] = None,
  affiliation: Seq[org.iptc.sportsml.v3.AffiliationComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
}

      


/** A mechanism for assigning the membership of a player, team, or associate within a division or larger organizational structure. Also, to indicate an official's affiliation with a team, club or federation, for
                example.
*/
case class AffiliationComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val membershipu45idref = attributes.get("@membership-idref") map { _.as[String]}
  lazy val membershipu45type = attributes.get("@membership-type") map { _.as[String]}
  lazy val membershipu45key = attributes.get("@membership-key") map { _.as[String]}
  lazy val membershipu45name = attributes.get("@membership-name") map { _.as[String]}
}

      


/** A structured series of competitions within one sport. | Generally organized by a particular sponsoring body. Can happen all in one day, or be spread out - like the Davis Cup in tennis.
*/
case class TournamentComplexType(tournamentu45metadata: Option[org.iptc.sportsml.v3.TournamentMetadataComplexType] = None,
  standing: Seq[org.iptc.sportsml.v3.StandingComplexType] = Nil,
  tournamentcomplextypeoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.TournamentComplexTypeOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Sportsu45contentOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
}

      

trait TournamentComplexTypeOption

/** A tournament subcategory, often with its own trophy and prize. | Use
                it to divide specific overall competitions in a large multi-sport tournament such as
                Olympics. Can also divide gender competitions, for example in tennis tournaments.
                Can be nested to divide gender at a higher level (tournament/tournament-division)
                and then to divide specific sport competitions futher down the tree
                (tournament-part/tournament-division). 
*/
case class TournamentDivisionComplexType(tournamentu45divisionu45metadata: Option[org.iptc.sportsml.v3.TournamentDivisionMetadataComplexType] = None,
  standing: Seq[org.iptc.sportsml.v3.StandingComplexType] = Nil,
  tournamentdivisioncomplextypeoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.TournamentDivisionComplexTypeOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends TournamentComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
}

      

trait TournamentDivisionComplexTypeOption

/** A tournament part. Use it do group specific parts of a tournament, like a stage or a round. 
*/
case class TournamentPartComplexType(tournamentu45partu45metadata: Option[org.iptc.sportsml.v3.TournamentPartMetadataComplexType] = None,
  standing: Seq[org.iptc.sportsml.v3.StandingComplexType] = Nil,
  tournamentpartcomplextypeoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.TournamentPartComplexTypeOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends TournamentComplexTypeOption with TournamentDivisionComplexTypeOption with TournamentPartComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val partu45index = attributes.get("@part-index") map { _.as[String]}
}

      

trait TournamentPartComplexTypeOption

/** Holds either an article or a reference to an article. Format of the content is up to the provider. NITF from IPTC or HTML are common alternatives.
*/
case class ArticleComplexType(any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Sportsu45contentOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val format = attributes.get("@format") map { _.as[String]}
  lazy val articleu45ref = attributes.get("@article-ref") map { _.as[String]}
}

      


case class StandingComplexType(standingu45metadata: Option[org.iptc.sportsml.v3.StandingMetadataComplexType] = None,
  standingcomplextypeoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.StandingComplexTypeOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Sportsu45contentOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val contentu45label = attributes.get("@content-label") map { _.as[String]}
}

      

trait StandingComplexTypeOption

/** A series of team or individual records. | A series of team or individual records.
*/
case class StandingMetadataComplexType(sportsu45contentu45codes: Option[org.iptc.sportsml.v3.SportsContentCodesComplexType] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseMetadataComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
}

      


/** A series of games. | Usually grouped by date.
*/
case class ScheduleComplexType(scheduleu45metadata: org.iptc.sportsml.v3.ScheduleMetadataComplexType,
  sportsu45event: Seq[org.iptc.sportsml.v3.SportsEventComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Sportsu45contentOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val dateu45label = attributes.get("@date-label") map { _.as[String]}
  lazy val contentu45label = attributes.get("@content-label") map { _.as[String]}
}

      


/** Background information about the schedule. | Describes the time period which the schedule covers, and which teams or events may be covered.
*/
case class ScheduleMetadataComplexType(sportsu45contentu45codes: Option[org.iptc.sportsml.v3.SportsContentCodesComplexType] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseMetadataComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
}

      


/** A table that generally compares the performance of teams or players. |
                The fixture-key can identify which regulary-running statistics are being presented.
                Also appropriate for rosters (squad listings).
*/
case class StatisticComplexType(statisticu45metadata: org.iptc.sportsml.v3.StatisticMetadataComplexType,
  group: Seq[org.iptc.sportsml.v3.GroupComplexType] = Nil,
  team: Seq[org.iptc.sportsml.v3.TeamComplexType] = Nil,
  player: Seq[org.iptc.sportsml.v3.PlayerComplexType] = Nil,
  associate: Seq[org.iptc.sportsml.v3.AssociateComplexType] = Nil,
  statusu45change: Seq[org.iptc.sportsml.v3.StatusChangeComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Sportsu45contentOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val contentu45label = attributes.get("@content-label") map { _.as[String]}
}

      


/** Identifies which teams are being covered. | Also indicates the date ranges for which these stats cover.
*/
case class StatisticMetadataComplexType(sportsu45contentu45codes: Option[org.iptc.sportsml.v3.SportsContentCodesComplexType] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseMetadataComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
}

      


/** Indicates status change of an entity.
*/
case class StatusChangeComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val changeru45idref = attributes("@changer-idref").as[String]
  lazy val statusu45changeu45type = attributes("@status-change-type").as[String]
  lazy val originalu45status = attributes.get("@original-status") map { _.as[String]}
  lazy val newu45status = attributes.get("@new-status") map { _.as[String]}
  lazy val originalu45idref = attributes.get("@original-idref") map { _.as[String]}
  lazy val newu45idref = attributes.get("@new-idref") map { _.as[String]}
}

      


/** A holder for statistics about a particular bracket or division or
                conference or league. | Holds metadata and stats. Also appropriate for expressing
                general organization/league membership and structure.
*/
case class GroupComplexType(groupu45metadata: org.iptc.sportsml.v3.GroupMetadataComplexType,
  groupu45stats: Seq[org.iptc.sportsml.v3.GroupStatsComplexType] = Nil,
  group: Seq[org.iptc.sportsml.v3.GroupComplexType] = Nil,
  team: Seq[org.iptc.sportsml.v3.TeamComplexType] = Nil,
  player: Seq[org.iptc.sportsml.v3.PlayerComplexType] = Nil,
  affiliation: Seq[org.iptc.sportsml.v3.AffiliationComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
}

      


/** Metadata about the group.
*/
case class GroupMetadataComplexType(sportsu45contentu45codes: Option[org.iptc.sportsml.v3.SportsContentCodesComplexType] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  site: Seq[org.iptc.sportsml.v3.SiteComplexType] = Nil,
  award: Seq[org.iptc.sportsml.v3.AwardComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Base2MetadataComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val key = attributes.get("@key") map { _.as[String]}
  lazy val groupu45type = attributes.get("@group-type") map { _.as[String]}
  lazy val homeu45pageu45url = attributes.get("@home-page-url") map { _.as[String]}
}

      


/** Statistics that apply to the group as a whole. | Not all stats are used in every sport.
*/
case class GroupStatsComplexType(rating: Seq[org.iptc.sportsml.v3.RatingComplexType] = Nil,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  stats: Seq[org.iptc.sportsml.v3.GenericStatComplexType] = Nil,
  outcomeu45totals: Seq[org.iptc.sportsml.v3.OutcomeTotalsComplexType] = Nil,
  outcomeu45result: Seq[org.iptc.sportsml.v3.OutcomeResultComplexType] = Nil,
  penaltyu45stats: Seq[org.iptc.sportsml.v3.PenaltyStatsComplexType] = Nil,
  award: Seq[org.iptc.sportsml.v3.AwardComplexType] = Nil,
  rank: Seq[org.iptc.sportsml.v3.RankComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Base3StatsComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val points = attributes.get("@points") map { _.as[BigInt]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val score = attributes.get("@score") map { _.as[String]}
  lazy val scoreu45opposing = attributes.get("@score-opposing") map { _.as[String]}
  lazy val scoreu45average = attributes.get("@score-average") map { _.as[String]}
  lazy val scoreu45opposingu45average = attributes.get("@score-opposing-average") map { _.as[String]}
  lazy val scoreu45units = attributes.get("@score-units") map { _.as[String]}
  lazy val scoreu45behind = attributes.get("@score-behind") map { _.as[String]}
  lazy val scoreu45attempts = attributes.get("@score-attempts") map { _.as[String]}
  lazy val scoreu45attemptsu45opposing = attributes.get("@score-attempts-opposing") map { _.as[String]}
  lazy val scoreu45attemptsu45onu45goal = attributes.get("@score-attempts-on-goal") map { _.as[String]}
  lazy val scoreu45attemptsu45onu45goalu45opposing = attributes.get("@score-attempts-on-goal-opposing") map { _.as[String]}
  lazy val scoreu45percentage = attributes.get("@score-percentage") map { _.as[String]}
  lazy val scoreu45percentageu45opposing = attributes.get("@score-percentage-opposing") map { _.as[String]}
  lazy val resultu45effect = attributes.get("@result-effect") map { _.as[String]}
  lazy val eventu45outcome = attributes.get("@event-outcome") map { _.as[String]}
  lazy val eventu45standingu45points = attributes.get("@event-standing-points") map { _.as[String]}
  lazy val eventu45standingu45pointsu45against = attributes.get("@event-standing-points-against") map { _.as[String]}
  lazy val scoreu45type = attributes.get("@score-type") map { _.as[String]}
  lazy val eventsu45remaining = attributes.get("@events-remaining") map { _.as[String]}
  lazy val timeu45ofu45possession = attributes.get("@time-of-possession") map { _.as[String]}
  lazy val timeu45ofu45possessionu45percentage = attributes.get("@time-of-possession-percentage") map { _.as[String]}
  lazy val timeu45ofu45possessionu45percentageu45opposing = attributes.get("@time-of-possession-percentage-opposing") map { _.as[String]}
  lazy val timeu45ofu45possessionu45average = attributes.get("@time-of-possession-average") map { _.as[String]}
  lazy val timeu45ofu45possessionu45averageu45opposing = attributes.get("@time-of-possession-average-opposing") map { _.as[String]}
  lazy val seriesu45score = attributes.get("@series-score") map { _.as[String]}
  lazy val seriesu45scoreu45opposing = attributes.get("@series-score-opposing") map { _.as[String]}
  lazy val adjustedu45scoreu45for = attributes.get("@adjusted-score-for") map { _.as[String]}
  lazy val adjustedu45scoreu45against = attributes.get("@adjusted-score-against") map { _.as[String]}
}

      


/** A generic stat element that can be used together with or instead of
                more specific stat element and attributes. With nested stats the lower levels should
                be regarded as having the same value as their parents if that attribute is not
                specifically set.
*/
case class GenericStatComplexType(name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  stat: Seq[org.iptc.sportsml.v3.GenericStatComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val sport = attributes.get("@sport") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val statu45type = attributes.get("@stat-type") map { _.as[String]}
  lazy val valueu45type = attributes.get("@value-type") map { _.as[String]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
}

      


/** An element to house lines and odds for wagering. | Includes moneylines, spreads, etc.
*/
case class Wageringu45stats(wageringu45statsoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.Wageringu45statsOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val comment = attributes.get("@comment") map { _.as[String]}
}

      

trait Wageringu45statsOption

/** Odds in terms of money. | Negative amount indicates wagerer must lay
                that amount to win say a hundred dollars. Positive amount indicates wagerer gets
                that amount for every hundred dollars wagered.
*/
case class Wageringu45moneyline(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Wageringu45statsOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val bookmakeru45key = attributes.get("@bookmaker-key") map { _.as[String]}
  lazy val bookmakeru45name = attributes.get("@bookmaker-name") map { _.as[String]}
  lazy val rotationu45key = attributes.get("@rotation-key") map { _.as[String]}
  lazy val comment = attributes.get("@comment") map { _.as[String]}
  lazy val dateu45time = attributes.get("@date-time") map { _.as[String]}
  lazy val context = attributes.get("@context") map { _.as[Context]}
  lazy val prediction = attributes.get("@prediction") map { _.as[String]}
  lazy val predictionu45opening = attributes.get("@prediction-opening") map { _.as[String]}
  lazy val vigorish = attributes.get("@vigorish") map { _.as[String]}
  lazy val line = attributes.get("@line") map { _.as[String]}
  lazy val lineu45opening = attributes.get("@line-opening") map { _.as[String]}
}

      


/** A line used in baseball.
*/
case class Wageringu45runline(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Wageringu45statsOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val bookmakeru45key = attributes.get("@bookmaker-key") map { _.as[String]}
  lazy val bookmakeru45name = attributes.get("@bookmaker-name") map { _.as[String]}
  lazy val rotationu45key = attributes.get("@rotation-key") map { _.as[String]}
  lazy val comment = attributes.get("@comment") map { _.as[String]}
  lazy val dateu45time = attributes.get("@date-time") map { _.as[String]}
  lazy val context = attributes.get("@context") map { _.as[Context]}
  lazy val prediction = attributes.get("@prediction") map { _.as[String]}
  lazy val predictionu45opening = attributes.get("@prediction-opening") map { _.as[String]}
  lazy val vigorish = attributes.get("@vigorish") map { _.as[String]}
  lazy val line = attributes.get("@line") map { _.as[String]}
  lazy val lineu45opening = attributes.get("@line-opening") map { _.as[String]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
  lazy val valueu45opening = attributes.get("@value-opening") map { _.as[String]}
}

      


/** A wager built around the different between the scores of two teams.
*/
case class Wageringu45straightu45spread(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Wageringu45statsOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val bookmakeru45key = attributes.get("@bookmaker-key") map { _.as[String]}
  lazy val bookmakeru45name = attributes.get("@bookmaker-name") map { _.as[String]}
  lazy val rotationu45key = attributes.get("@rotation-key") map { _.as[String]}
  lazy val comment = attributes.get("@comment") map { _.as[String]}
  lazy val dateu45time = attributes.get("@date-time") map { _.as[String]}
  lazy val context = attributes.get("@context") map { _.as[Context]}
  lazy val prediction = attributes.get("@prediction") map { _.as[String]}
  lazy val predictionu45opening = attributes.get("@prediction-opening") map { _.as[String]}
  lazy val vigorish = attributes.get("@vigorish") map { _.as[String]}
  lazy val line = attributes.get("@line") map { _.as[String]}
  lazy val lineu45opening = attributes.get("@line-opening") map { _.as[String]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
  lazy val valueu45opening = attributes.get("@value-opening") map { _.as[String]}
}

      


/** Total combined point/runs/goals scored in a game.
*/
case class Wageringu45totalu45score(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Wageringu45statsOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val bookmakeru45key = attributes.get("@bookmaker-key") map { _.as[String]}
  lazy val bookmakeru45name = attributes.get("@bookmaker-name") map { _.as[String]}
  lazy val rotationu45key = attributes.get("@rotation-key") map { _.as[String]}
  lazy val comment = attributes.get("@comment") map { _.as[String]}
  lazy val dateu45time = attributes.get("@date-time") map { _.as[String]}
  lazy val context = attributes.get("@context") map { _.as[Context]}
  lazy val prediction = attributes.get("@prediction") map { _.as[String]}
  lazy val predictionu45opening = attributes.get("@prediction-opening") map { _.as[String]}
  lazy val vigorish = attributes.get("@vigorish") map { _.as[String]}
  lazy val lineu45over = attributes.get("@line-over") map { _.as[String]}
  lazy val lineu45under = attributes.get("@line-under") map { _.as[String]}
  lazy val total = attributes.get("@total") map { _.as[String]}
  lazy val lineu45overu45opening = attributes.get("@line-over-opening") map { _.as[String]}
  lazy val lineu45underu45opening = attributes.get("@line-under-opening") map { _.as[String]}
  lazy val totalu45opening = attributes.get("@total-opening") map { _.as[String]}
}

      


/** A line that gives formal odds on a team or player winning, such as 3-to-1 odds.
*/
case class Wageringu45odds(wageringu45oddssequence1: Seq[org.iptc.sportsml.v3.Wageringu45oddsSequence1] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Wageringu45statsOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val bookmakeru45key = attributes.get("@bookmaker-key") map { _.as[String]}
  lazy val bookmakeru45name = attributes.get("@bookmaker-name") map { _.as[String]}
  lazy val rotationu45key = attributes.get("@rotation-key") map { _.as[String]}
  lazy val comment = attributes.get("@comment") map { _.as[String]}
  lazy val dateu45time = attributes.get("@date-time") map { _.as[String]}
  lazy val context = attributes.get("@context") map { _.as[Context]}
  lazy val numerator = attributes.get("@numerator") map { _.as[String]}
  lazy val denominator = attributes.get("@denominator") map { _.as[String]}
  lazy val numeratoru45opening = attributes.get("@numerator-opening") map { _.as[String]}
  lazy val denominatoru45opening = attributes.get("@denominator-opening") map { _.as[String]}
  lazy val payoutu45calcluation = attributes.get("@payout-calcluation") map { _.as[String]}
  lazy val paybacku45amount = attributes.get("@payback-amount") map { _.as[String]}
}

      

case class Wageringu45oddsSequence1(wageringu45prediction: org.iptc.sportsml.v3.Wageringu45prediction)

/** A prediction as to whether a team or player is a favorite or an underdog.
*/
case class Wageringu45prediction(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val prediction = attributes.get("@prediction") map { _.as[String]}
}

      


/** Basic metadata elements and attributes. Used directly by sports, standing, schedule and statistic and extended further by base2MetadataComplexType
*/
trait BaseMetadataComplexTypable {
  def sportsu45contentu45codes: Option[org.iptc.sportsml.v3.SportsContentCodesComplexType]
  def sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType]
  def id: Option[String]
  def classValue: Option[String]
  def style: Option[String]
  def statsu45coverage: Option[String]
  def teamu45coverage: Option[org.iptc.sportsml.v3.Teamu45coverage]
  def durationu45scope: Option[String]
  def alignmentu45scope: Option[org.iptc.sportsml.v3.Alignmentu45scope]
  def position: Option[String]
  def recordu45makingu45scope: Option[String]
  def scopingu45label: Option[String]
  def periodu45value: Option[String]
  def periodu45type: Option[String]
  def startu45dateu45time: Option[String]
  def endu45dateu45time: Option[String]
  def periodu45startu45dateu45time: Option[String]
  def periodu45endu45dateu45time: Option[String]
  def temporalu45unitu45type: Option[String]
  def temporalu45unitu45value: Option[String]
  def eventu45span: Option[BigInt]
  def opponentu45value: Option[String]
  def opponentu45type: Option[String]
  def team: Option[String]
  def competition: Option[String]
  def unitu45value: Option[String]
  def unitu45type: Option[String]
  def situation: Option[String]
  def locationu45key: Option[String]
  def venueu45type: Option[String]
  def surfaceu45type: Option[String]
  def weatheru45type: Option[String]
  def scopeu45value: Option[String]
  def distance: Option[String]
  def distanceu45maximum: Option[String]
  def distanceu45minimum: Option[String]
  def measurementu45units: Option[String]
}


/** Basic metadata elements and attributes. Used directly by sports, standing, schedule and statistic and extended further by base2MetadataComplexType
*/
case class BaseMetadataComplexType(sportsu45contentu45codes: Option[org.iptc.sportsml.v3.SportsContentCodesComplexType] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseMetadataComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
}

      


/** Extends the baseMetadata with more elements and attributes. Used by baseEvent and baseTournament
*/
trait Base2MetadataComplexTypable extends BaseMetadataComplexTypable {
  def sportsu45contentu45codes: Option[org.iptc.sportsml.v3.SportsContentCodesComplexType]
  def sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType]
  def name: Seq[org.iptc.sportsml.v3.ConceptNameType]
  def site: Seq[org.iptc.sportsml.v3.SiteComplexType]
  def award: Seq[org.iptc.sportsml.v3.AwardComplexType]
  def id: Option[String]
  def classValue: Option[String]
  def style: Option[String]
  def statsu45coverage: Option[String]
  def teamu45coverage: Option[org.iptc.sportsml.v3.Teamu45coverage]
  def durationu45scope: Option[String]
  def alignmentu45scope: Option[org.iptc.sportsml.v3.Alignmentu45scope]
  def position: Option[String]
  def recordu45makingu45scope: Option[String]
  def scopingu45label: Option[String]
  def periodu45value: Option[String]
  def periodu45type: Option[String]
  def startu45dateu45time: Option[String]
  def endu45dateu45time: Option[String]
  def periodu45startu45dateu45time: Option[String]
  def periodu45endu45dateu45time: Option[String]
  def temporalu45unitu45type: Option[String]
  def temporalu45unitu45value: Option[String]
  def eventu45span: Option[BigInt]
  def opponentu45value: Option[String]
  def opponentu45type: Option[String]
  def team: Option[String]
  def competition: Option[String]
  def unitu45value: Option[String]
  def unitu45type: Option[String]
  def situation: Option[String]
  def locationu45key: Option[String]
  def venueu45type: Option[String]
  def surfaceu45type: Option[String]
  def weatheru45type: Option[String]
  def scopeu45value: Option[String]
  def distance: Option[String]
  def distanceu45maximum: Option[String]
  def distanceu45minimum: Option[String]
  def measurementu45units: Option[String]
  def key: Option[String]
}


/** Extends the baseMetadata with more elements and attributes. Used by baseEvent and baseTournament
*/
case class Base2MetadataComplexType(sportsu45contentu45codes: Option[org.iptc.sportsml.v3.SportsContentCodesComplexType] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  site: Seq[org.iptc.sportsml.v3.SiteComplexType] = Nil,
  award: Seq[org.iptc.sportsml.v3.AwardComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Base2MetadataComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val key = attributes.get("@key") map { _.as[String]}
}

      


/** The very basic stats type for persons and teams, Extended by base2stats and used directly by officalstats. 
*/
trait BaseStatsComplexTypable {
  def rating: Seq[org.iptc.sportsml.v3.RatingComplexType]
  def sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType]
  def stats: Seq[org.iptc.sportsml.v3.GenericStatComplexType]
  def id: Option[String]
  def classValue: Option[String]
  def style: Option[String]
}


/** The very basic stats type for persons and teams, Extended by base2stats and used directly by officalstats. 
*/
case class BaseStatsComplexType(rating: Seq[org.iptc.sportsml.v3.RatingComplexType] = Nil,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  stats: Seq[org.iptc.sportsml.v3.GenericStatComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseStatsComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
}

      


/** Second level stats. Extends baseStats. Extended further in base3stats and used directly in associate
*/
trait Base2StatsComplexTypable extends BaseStatsComplexTypable {
  def rating: Seq[org.iptc.sportsml.v3.RatingComplexType]
  def sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType]
  def stats: Seq[org.iptc.sportsml.v3.GenericStatComplexType]
  def outcomeu45totals: Seq[org.iptc.sportsml.v3.OutcomeTotalsComplexType]
  def outcomeu45result: Seq[org.iptc.sportsml.v3.OutcomeResultComplexType]
  def id: Option[String]
  def classValue: Option[String]
  def style: Option[String]
  def points: Option[BigInt]
}


/** Second level stats. Extends baseStats. Extended further in base3stats and used directly in associate
*/
case class Base2StatsComplexType(rating: Seq[org.iptc.sportsml.v3.RatingComplexType] = Nil,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  stats: Seq[org.iptc.sportsml.v3.GenericStatComplexType] = Nil,
  outcomeu45totals: Seq[org.iptc.sportsml.v3.OutcomeTotalsComplexType] = Nil,
  outcomeu45result: Seq[org.iptc.sportsml.v3.OutcomeResultComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Base2StatsComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val points = attributes.get("@points") map { _.as[BigInt]}
}

      


/** Extends base2stats. Further extended in genericEntitystats. Used directly by groupStats
*/
trait Base3StatsComplexTypable extends Base2StatsComplexTypable {
  def rating: Seq[org.iptc.sportsml.v3.RatingComplexType]
  def sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType]
  def stats: Seq[org.iptc.sportsml.v3.GenericStatComplexType]
  def outcomeu45totals: Seq[org.iptc.sportsml.v3.OutcomeTotalsComplexType]
  def outcomeu45result: Seq[org.iptc.sportsml.v3.OutcomeResultComplexType]
  def penaltyu45stats: Seq[org.iptc.sportsml.v3.PenaltyStatsComplexType]
  def award: Seq[org.iptc.sportsml.v3.AwardComplexType]
  def rank: Seq[org.iptc.sportsml.v3.RankComplexType]
  def id: Option[String]
  def classValue: Option[String]
  def style: Option[String]
  def points: Option[BigInt]
  def statsu45coverage: Option[String]
  def teamu45coverage: Option[org.iptc.sportsml.v3.Teamu45coverage]
  def durationu45scope: Option[String]
  def alignmentu45scope: Option[org.iptc.sportsml.v3.Alignmentu45scope]
  def position: Option[String]
  def recordu45makingu45scope: Option[String]
  def scopingu45label: Option[String]
  def periodu45value: Option[String]
  def periodu45type: Option[String]
  def startu45dateu45time: Option[String]
  def endu45dateu45time: Option[String]
  def periodu45startu45dateu45time: Option[String]
  def periodu45endu45dateu45time: Option[String]
  def temporalu45unitu45type: Option[String]
  def temporalu45unitu45value: Option[String]
  def eventu45span: Option[BigInt]
  def opponentu45value: Option[String]
  def opponentu45type: Option[String]
  def team: Option[String]
  def competition: Option[String]
  def unitu45value: Option[String]
  def unitu45type: Option[String]
  def situation: Option[String]
  def locationu45key: Option[String]
  def venueu45type: Option[String]
  def surfaceu45type: Option[String]
  def weatheru45type: Option[String]
  def scopeu45value: Option[String]
  def distance: Option[String]
  def distanceu45maximum: Option[String]
  def distanceu45minimum: Option[String]
  def measurementu45units: Option[String]
  def score: Option[String]
  def scoreu45opposing: Option[String]
  def scoreu45average: Option[String]
  def scoreu45opposingu45average: Option[String]
  def scoreu45units: Option[String]
  def scoreu45behind: Option[String]
  def scoreu45attempts: Option[String]
  def scoreu45attemptsu45opposing: Option[String]
  def scoreu45attemptsu45onu45goal: Option[String]
  def scoreu45attemptsu45onu45goalu45opposing: Option[String]
  def scoreu45percentage: Option[String]
  def scoreu45percentageu45opposing: Option[String]
  def resultu45effect: Option[String]
  def eventu45outcome: Option[String]
  def eventu45standingu45points: Option[String]
  def eventu45standingu45pointsu45against: Option[String]
  def scoreu45type: Option[String]
  def eventsu45remaining: Option[String]
  def timeu45ofu45possession: Option[String]
  def timeu45ofu45possessionu45percentage: Option[String]
  def timeu45ofu45possessionu45percentageu45opposing: Option[String]
  def timeu45ofu45possessionu45average: Option[String]
  def timeu45ofu45possessionu45averageu45opposing: Option[String]
  def seriesu45score: Option[String]
  def seriesu45scoreu45opposing: Option[String]
  def adjustedu45scoreu45for: Option[String]
  def adjustedu45scoreu45against: Option[String]
}


/** Extends base2stats. Further extended in genericEntitystats. Used directly by groupStats
*/
case class Base3StatsComplexType(rating: Seq[org.iptc.sportsml.v3.RatingComplexType] = Nil,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  stats: Seq[org.iptc.sportsml.v3.GenericStatComplexType] = Nil,
  outcomeu45totals: Seq[org.iptc.sportsml.v3.OutcomeTotalsComplexType] = Nil,
  outcomeu45result: Seq[org.iptc.sportsml.v3.OutcomeResultComplexType] = Nil,
  penaltyu45stats: Seq[org.iptc.sportsml.v3.PenaltyStatsComplexType] = Nil,
  award: Seq[org.iptc.sportsml.v3.AwardComplexType] = Nil,
  rank: Seq[org.iptc.sportsml.v3.RankComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Base3StatsComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val points = attributes.get("@points") map { _.as[BigInt]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val score = attributes.get("@score") map { _.as[String]}
  lazy val scoreu45opposing = attributes.get("@score-opposing") map { _.as[String]}
  lazy val scoreu45average = attributes.get("@score-average") map { _.as[String]}
  lazy val scoreu45opposingu45average = attributes.get("@score-opposing-average") map { _.as[String]}
  lazy val scoreu45units = attributes.get("@score-units") map { _.as[String]}
  lazy val scoreu45behind = attributes.get("@score-behind") map { _.as[String]}
  lazy val scoreu45attempts = attributes.get("@score-attempts") map { _.as[String]}
  lazy val scoreu45attemptsu45opposing = attributes.get("@score-attempts-opposing") map { _.as[String]}
  lazy val scoreu45attemptsu45onu45goal = attributes.get("@score-attempts-on-goal") map { _.as[String]}
  lazy val scoreu45attemptsu45onu45goalu45opposing = attributes.get("@score-attempts-on-goal-opposing") map { _.as[String]}
  lazy val scoreu45percentage = attributes.get("@score-percentage") map { _.as[String]}
  lazy val scoreu45percentageu45opposing = attributes.get("@score-percentage-opposing") map { _.as[String]}
  lazy val resultu45effect = attributes.get("@result-effect") map { _.as[String]}
  lazy val eventu45outcome = attributes.get("@event-outcome") map { _.as[String]}
  lazy val eventu45standingu45points = attributes.get("@event-standing-points") map { _.as[String]}
  lazy val eventu45standingu45pointsu45against = attributes.get("@event-standing-points-against") map { _.as[String]}
  lazy val scoreu45type = attributes.get("@score-type") map { _.as[String]}
  lazy val eventsu45remaining = attributes.get("@events-remaining") map { _.as[String]}
  lazy val timeu45ofu45possession = attributes.get("@time-of-possession") map { _.as[String]}
  lazy val timeu45ofu45possessionu45percentage = attributes.get("@time-of-possession-percentage") map { _.as[String]}
  lazy val timeu45ofu45possessionu45percentageu45opposing = attributes.get("@time-of-possession-percentage-opposing") map { _.as[String]}
  lazy val timeu45ofu45possessionu45average = attributes.get("@time-of-possession-average") map { _.as[String]}
  lazy val timeu45ofu45possessionu45averageu45opposing = attributes.get("@time-of-possession-average-opposing") map { _.as[String]}
  lazy val seriesu45score = attributes.get("@series-score") map { _.as[String]}
  lazy val seriesu45scoreu45opposing = attributes.get("@series-score-opposing") map { _.as[String]}
  lazy val adjustedu45scoreu45for = attributes.get("@adjusted-score-for") map { _.as[String]}
  lazy val adjustedu45scoreu45against = attributes.get("@adjusted-score-against") map { _.as[String]}
}

      


/** Statistics that apply to a team as a whole or a player. | Not all stats are used in every sport.
*/
trait BaseGenericEntityStatsComplexTypable extends Base3StatsComplexTypable {
  def rating: Seq[org.iptc.sportsml.v3.RatingComplexType]
  def sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType]
  def stats: Seq[org.iptc.sportsml.v3.GenericStatComplexType]
  def outcomeu45totals: Seq[org.iptc.sportsml.v3.OutcomeTotalsComplexType]
  def outcomeu45result: Seq[org.iptc.sportsml.v3.OutcomeResultComplexType]
  def penaltyu45stats: Seq[org.iptc.sportsml.v3.PenaltyStatsComplexType]
  def award: Seq[org.iptc.sportsml.v3.AwardComplexType]
  def rank: Seq[org.iptc.sportsml.v3.RankComplexType]
  def subu45score: Seq[org.iptc.sportsml.v3.SubScoreComplexType]
  def eventu45record: Seq[org.iptc.sportsml.v3.EventRecordComplexType]
  def id: Option[String]
  def classValue: Option[String]
  def style: Option[String]
  def points: Option[BigInt]
  def statsu45coverage: Option[String]
  def teamu45coverage: Option[org.iptc.sportsml.v3.Teamu45coverage]
  def durationu45scope: Option[String]
  def alignmentu45scope: Option[org.iptc.sportsml.v3.Alignmentu45scope]
  def position: Option[String]
  def recordu45makingu45scope: Option[String]
  def scopingu45label: Option[String]
  def periodu45value: Option[String]
  def periodu45type: Option[String]
  def startu45dateu45time: Option[String]
  def endu45dateu45time: Option[String]
  def periodu45startu45dateu45time: Option[String]
  def periodu45endu45dateu45time: Option[String]
  def temporalu45unitu45type: Option[String]
  def temporalu45unitu45value: Option[String]
  def eventu45span: Option[BigInt]
  def opponentu45value: Option[String]
  def opponentu45type: Option[String]
  def team: Option[String]
  def competition: Option[String]
  def unitu45value: Option[String]
  def unitu45type: Option[String]
  def situation: Option[String]
  def locationu45key: Option[String]
  def venueu45type: Option[String]
  def surfaceu45type: Option[String]
  def weatheru45type: Option[String]
  def scopeu45value: Option[String]
  def distance: Option[String]
  def distanceu45maximum: Option[String]
  def distanceu45minimum: Option[String]
  def measurementu45units: Option[String]
  def score: Option[String]
  def scoreu45opposing: Option[String]
  def scoreu45average: Option[String]
  def scoreu45opposingu45average: Option[String]
  def scoreu45units: Option[String]
  def scoreu45behind: Option[String]
  def scoreu45attempts: Option[String]
  def scoreu45attemptsu45opposing: Option[String]
  def scoreu45attemptsu45onu45goal: Option[String]
  def scoreu45attemptsu45onu45goalu45opposing: Option[String]
  def scoreu45percentage: Option[String]
  def scoreu45percentageu45opposing: Option[String]
  def resultu45effect: Option[String]
  def eventu45outcome: Option[String]
  def eventu45standingu45points: Option[String]
  def eventu45standingu45pointsu45against: Option[String]
  def scoreu45type: Option[String]
  def eventsu45remaining: Option[String]
  def timeu45ofu45possession: Option[String]
  def timeu45ofu45possessionu45percentage: Option[String]
  def timeu45ofu45possessionu45percentageu45opposing: Option[String]
  def timeu45ofu45possessionu45average: Option[String]
  def timeu45ofu45possessionu45averageu45opposing: Option[String]
  def seriesu45score: Option[String]
  def seriesu45scoreu45opposing: Option[String]
  def adjustedu45scoreu45for: Option[String]
  def adjustedu45scoreu45against: Option[String]
  def eventsu45played: Option[BigInt]
  def timeu45playedu45total: Option[String]
}


/** Statistics that apply to a team as a whole or a player. | Not all stats are used in every sport.
*/
case class BaseGenericEntityStatsComplexType(rating: Seq[org.iptc.sportsml.v3.RatingComplexType] = Nil,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  stats: Seq[org.iptc.sportsml.v3.GenericStatComplexType] = Nil,
  outcomeu45totals: Seq[org.iptc.sportsml.v3.OutcomeTotalsComplexType] = Nil,
  outcomeu45result: Seq[org.iptc.sportsml.v3.OutcomeResultComplexType] = Nil,
  penaltyu45stats: Seq[org.iptc.sportsml.v3.PenaltyStatsComplexType] = Nil,
  award: Seq[org.iptc.sportsml.v3.AwardComplexType] = Nil,
  rank: Seq[org.iptc.sportsml.v3.RankComplexType] = Nil,
  subu45score: Seq[org.iptc.sportsml.v3.SubScoreComplexType] = Nil,
  eventu45record: Seq[org.iptc.sportsml.v3.EventRecordComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseGenericEntityStatsComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val points = attributes.get("@points") map { _.as[BigInt]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val score = attributes.get("@score") map { _.as[String]}
  lazy val scoreu45opposing = attributes.get("@score-opposing") map { _.as[String]}
  lazy val scoreu45average = attributes.get("@score-average") map { _.as[String]}
  lazy val scoreu45opposingu45average = attributes.get("@score-opposing-average") map { _.as[String]}
  lazy val scoreu45units = attributes.get("@score-units") map { _.as[String]}
  lazy val scoreu45behind = attributes.get("@score-behind") map { _.as[String]}
  lazy val scoreu45attempts = attributes.get("@score-attempts") map { _.as[String]}
  lazy val scoreu45attemptsu45opposing = attributes.get("@score-attempts-opposing") map { _.as[String]}
  lazy val scoreu45attemptsu45onu45goal = attributes.get("@score-attempts-on-goal") map { _.as[String]}
  lazy val scoreu45attemptsu45onu45goalu45opposing = attributes.get("@score-attempts-on-goal-opposing") map { _.as[String]}
  lazy val scoreu45percentage = attributes.get("@score-percentage") map { _.as[String]}
  lazy val scoreu45percentageu45opposing = attributes.get("@score-percentage-opposing") map { _.as[String]}
  lazy val resultu45effect = attributes.get("@result-effect") map { _.as[String]}
  lazy val eventu45outcome = attributes.get("@event-outcome") map { _.as[String]}
  lazy val eventu45standingu45points = attributes.get("@event-standing-points") map { _.as[String]}
  lazy val eventu45standingu45pointsu45against = attributes.get("@event-standing-points-against") map { _.as[String]}
  lazy val scoreu45type = attributes.get("@score-type") map { _.as[String]}
  lazy val eventsu45remaining = attributes.get("@events-remaining") map { _.as[String]}
  lazy val timeu45ofu45possession = attributes.get("@time-of-possession") map { _.as[String]}
  lazy val timeu45ofu45possessionu45percentage = attributes.get("@time-of-possession-percentage") map { _.as[String]}
  lazy val timeu45ofu45possessionu45percentageu45opposing = attributes.get("@time-of-possession-percentage-opposing") map { _.as[String]}
  lazy val timeu45ofu45possessionu45average = attributes.get("@time-of-possession-average") map { _.as[String]}
  lazy val timeu45ofu45possessionu45averageu45opposing = attributes.get("@time-of-possession-average-opposing") map { _.as[String]}
  lazy val seriesu45score = attributes.get("@series-score") map { _.as[String]}
  lazy val seriesu45scoreu45opposing = attributes.get("@series-score-opposing") map { _.as[String]}
  lazy val adjustedu45scoreu45for = attributes.get("@adjusted-score-for") map { _.as[String]}
  lazy val adjustedu45scoreu45against = attributes.get("@adjusted-score-against") map { _.as[String]}
  lazy val eventsu45played = attributes.get("@events-played") map { _.as[BigInt]}
  lazy val timeu45playedu45total = attributes.get("@time-played-total") map { _.as[String]}
}

      


/** Statistics that apply to the team as a whole. | Not all stats are used in every sport.
*/
trait BaseTeamStatsComplexTypable extends BaseGenericEntityStatsComplexTypable {
  def rating: Seq[org.iptc.sportsml.v3.RatingComplexType]
  def sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType]
  def stats: Seq[org.iptc.sportsml.v3.GenericStatComplexType]
  def outcomeu45totals: Seq[org.iptc.sportsml.v3.OutcomeTotalsComplexType]
  def outcomeu45result: Seq[org.iptc.sportsml.v3.OutcomeResultComplexType]
  def penaltyu45stats: Seq[org.iptc.sportsml.v3.PenaltyStatsComplexType]
  def award: Seq[org.iptc.sportsml.v3.AwardComplexType]
  def rank: Seq[org.iptc.sportsml.v3.RankComplexType]
  def subu45score: Seq[org.iptc.sportsml.v3.SubScoreComplexType]
  def eventu45record: Seq[org.iptc.sportsml.v3.EventRecordComplexType]
  def id: Option[String]
  def classValue: Option[String]
  def style: Option[String]
  def points: Option[BigInt]
  def statsu45coverage: Option[String]
  def teamu45coverage: Option[org.iptc.sportsml.v3.Teamu45coverage]
  def durationu45scope: Option[String]
  def alignmentu45scope: Option[org.iptc.sportsml.v3.Alignmentu45scope]
  def position: Option[String]
  def recordu45makingu45scope: Option[String]
  def scopingu45label: Option[String]
  def periodu45value: Option[String]
  def periodu45type: Option[String]
  def startu45dateu45time: Option[String]
  def endu45dateu45time: Option[String]
  def periodu45startu45dateu45time: Option[String]
  def periodu45endu45dateu45time: Option[String]
  def temporalu45unitu45type: Option[String]
  def temporalu45unitu45value: Option[String]
  def eventu45span: Option[BigInt]
  def opponentu45value: Option[String]
  def opponentu45type: Option[String]
  def team: Option[String]
  def competition: Option[String]
  def unitu45value: Option[String]
  def unitu45type: Option[String]
  def situation: Option[String]
  def locationu45key: Option[String]
  def venueu45type: Option[String]
  def surfaceu45type: Option[String]
  def weatheru45type: Option[String]
  def scopeu45value: Option[String]
  def distance: Option[String]
  def distanceu45maximum: Option[String]
  def distanceu45minimum: Option[String]
  def measurementu45units: Option[String]
  def score: Option[String]
  def scoreu45opposing: Option[String]
  def scoreu45average: Option[String]
  def scoreu45opposingu45average: Option[String]
  def scoreu45units: Option[String]
  def scoreu45behind: Option[String]
  def scoreu45attempts: Option[String]
  def scoreu45attemptsu45opposing: Option[String]
  def scoreu45attemptsu45onu45goal: Option[String]
  def scoreu45attemptsu45onu45goalu45opposing: Option[String]
  def scoreu45percentage: Option[String]
  def scoreu45percentageu45opposing: Option[String]
  def resultu45effect: Option[String]
  def eventu45outcome: Option[String]
  def eventu45standingu45points: Option[String]
  def eventu45standingu45pointsu45against: Option[String]
  def scoreu45type: Option[String]
  def eventsu45remaining: Option[String]
  def timeu45ofu45possession: Option[String]
  def timeu45ofu45possessionu45percentage: Option[String]
  def timeu45ofu45possessionu45percentageu45opposing: Option[String]
  def timeu45ofu45possessionu45average: Option[String]
  def timeu45ofu45possessionu45averageu45opposing: Option[String]
  def seriesu45score: Option[String]
  def seriesu45scoreu45opposing: Option[String]
  def adjustedu45scoreu45for: Option[String]
  def adjustedu45scoreu45against: Option[String]
  def eventsu45played: Option[BigInt]
  def timeu45playedu45total: Option[String]
}


/** Statistics that apply to the team as a whole. | Not all stats are used in every sport.
*/
case class BaseTeamStatsComplexType(rating: Seq[org.iptc.sportsml.v3.RatingComplexType] = Nil,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  stats: Seq[org.iptc.sportsml.v3.GenericStatComplexType] = Nil,
  outcomeu45totals: Seq[org.iptc.sportsml.v3.OutcomeTotalsComplexType] = Nil,
  outcomeu45result: Seq[org.iptc.sportsml.v3.OutcomeResultComplexType] = Nil,
  penaltyu45stats: Seq[org.iptc.sportsml.v3.PenaltyStatsComplexType] = Nil,
  award: Seq[org.iptc.sportsml.v3.AwardComplexType] = Nil,
  rank: Seq[org.iptc.sportsml.v3.RankComplexType] = Nil,
  subu45score: Seq[org.iptc.sportsml.v3.SubScoreComplexType] = Nil,
  eventu45record: Seq[org.iptc.sportsml.v3.EventRecordComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseTeamStatsComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val points = attributes.get("@points") map { _.as[BigInt]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val score = attributes.get("@score") map { _.as[String]}
  lazy val scoreu45opposing = attributes.get("@score-opposing") map { _.as[String]}
  lazy val scoreu45average = attributes.get("@score-average") map { _.as[String]}
  lazy val scoreu45opposingu45average = attributes.get("@score-opposing-average") map { _.as[String]}
  lazy val scoreu45units = attributes.get("@score-units") map { _.as[String]}
  lazy val scoreu45behind = attributes.get("@score-behind") map { _.as[String]}
  lazy val scoreu45attempts = attributes.get("@score-attempts") map { _.as[String]}
  lazy val scoreu45attemptsu45opposing = attributes.get("@score-attempts-opposing") map { _.as[String]}
  lazy val scoreu45attemptsu45onu45goal = attributes.get("@score-attempts-on-goal") map { _.as[String]}
  lazy val scoreu45attemptsu45onu45goalu45opposing = attributes.get("@score-attempts-on-goal-opposing") map { _.as[String]}
  lazy val scoreu45percentage = attributes.get("@score-percentage") map { _.as[String]}
  lazy val scoreu45percentageu45opposing = attributes.get("@score-percentage-opposing") map { _.as[String]}
  lazy val resultu45effect = attributes.get("@result-effect") map { _.as[String]}
  lazy val eventu45outcome = attributes.get("@event-outcome") map { _.as[String]}
  lazy val eventu45standingu45points = attributes.get("@event-standing-points") map { _.as[String]}
  lazy val eventu45standingu45pointsu45against = attributes.get("@event-standing-points-against") map { _.as[String]}
  lazy val scoreu45type = attributes.get("@score-type") map { _.as[String]}
  lazy val eventsu45remaining = attributes.get("@events-remaining") map { _.as[String]}
  lazy val timeu45ofu45possession = attributes.get("@time-of-possession") map { _.as[String]}
  lazy val timeu45ofu45possessionu45percentage = attributes.get("@time-of-possession-percentage") map { _.as[String]}
  lazy val timeu45ofu45possessionu45percentageu45opposing = attributes.get("@time-of-possession-percentage-opposing") map { _.as[String]}
  lazy val timeu45ofu45possessionu45average = attributes.get("@time-of-possession-average") map { _.as[String]}
  lazy val timeu45ofu45possessionu45averageu45opposing = attributes.get("@time-of-possession-average-opposing") map { _.as[String]}
  lazy val seriesu45score = attributes.get("@series-score") map { _.as[String]}
  lazy val seriesu45scoreu45opposing = attributes.get("@series-score-opposing") map { _.as[String]}
  lazy val adjustedu45scoreu45for = attributes.get("@adjusted-score-for") map { _.as[String]}
  lazy val adjustedu45scoreu45against = attributes.get("@adjusted-score-against") map { _.as[String]}
  lazy val eventsu45played = attributes.get("@events-played") map { _.as[BigInt]}
  lazy val timeu45playedu45total = attributes.get("@time-played-total") map { _.as[String]}
}

      

trait AlignmentType

object AlignmentType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.AlignmentType]): AlignmentType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: AlignmentType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object HomeValue2 extends AlignmentType { override def toString = "home" }
case object AwayValue extends AlignmentType { override def toString = "away" }
case object NoneType extends AlignmentType { override def toString = "none" }


/** Info about the team. Properties of a team that are not based on their competitive performance. | An included sports-content-code element can hold what division it is in, etc.
*/
trait BaseTeamMetadataComplexTypable extends BaseEntityMetadataComplexTypable {
  def name: Seq[org.iptc.sportsml.v3.ConceptNameType]
  def homeu45location: Option[org.iptc.sportsml.v3.FlexLocationPropTypable]
  def sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType]
  def site: Seq[org.iptc.sportsml.v3.SiteComplexType]
  def sportsu45contentu45codes: Seq[org.iptc.sportsml.v3.SportsContentCodesComplexType]
  def id: Option[String]
  def classValue: Option[String]
  def style: Option[String]
  def key: Option[String]
  def nationality: Option[String]
  def alignment: Option[org.iptc.sportsml.v3.AlignmentType]
  def established: Option[String]
  def dissolved: Option[String]
  def teamu45idref: Option[String]
  def homeu45pageu45url: Option[java.net.URI]
  def roundu45position: Option[String]
}


/** Info about the team. Properties of a team that are not based on their competitive performance. | An included sports-content-code element can hold what division it is in, etc.
*/
case class BaseTeamMetadataComplexType(name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  homeu45location: Option[org.iptc.sportsml.v3.FlexLocationPropTypable] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  site: Seq[org.iptc.sportsml.v3.SiteComplexType] = Nil,
  sportsu45contentu45codes: Seq[org.iptc.sportsml.v3.SportsContentCodesComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseTeamMetadataComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val key = attributes.get("@key") map { _.as[String]}
  lazy val nationality = attributes.get("@nationality") map { _.as[String]}
  lazy val alignment = attributes.get("@alignment") map { _.as[AlignmentType]}
  lazy val established = attributes.get("@established") map { _.as[String]}
  lazy val dissolved = attributes.get("@dissolved") map { _.as[String]}
  lazy val teamu45idref = attributes.get("@team-idref") map { _.as[String]}
  lazy val homeu45pageu45url = attributes.get("@home-page-url") map { _.as[java.net.URI]}
  lazy val roundu45position = attributes.get("@round-position") map { _.as[String]}
}

      


/** Statistics that capture how a player has performed. | Generally does change over the course of a sports-event.
*/
trait BasePlayerStatsComplexTypable extends BaseGenericEntityStatsComplexTypable {
  def rating: Seq[org.iptc.sportsml.v3.RatingComplexType]
  def sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType]
  def stats: Seq[org.iptc.sportsml.v3.GenericStatComplexType]
  def outcomeu45totals: Seq[org.iptc.sportsml.v3.OutcomeTotalsComplexType]
  def outcomeu45result: Seq[org.iptc.sportsml.v3.OutcomeResultComplexType]
  def penaltyu45stats: Seq[org.iptc.sportsml.v3.PenaltyStatsComplexType]
  def award: Seq[org.iptc.sportsml.v3.AwardComplexType]
  def rank: Seq[org.iptc.sportsml.v3.RankComplexType]
  def subu45score: Seq[org.iptc.sportsml.v3.SubScoreComplexType]
  def eventu45record: Seq[org.iptc.sportsml.v3.EventRecordComplexType]
  def id: Option[String]
  def classValue: Option[String]
  def style: Option[String]
  def points: Option[BigInt]
  def statsu45coverage: Option[String]
  def teamu45coverage: Option[org.iptc.sportsml.v3.Teamu45coverage]
  def durationu45scope: Option[String]
  def alignmentu45scope: Option[org.iptc.sportsml.v3.Alignmentu45scope]
  def position: Option[String]
  def recordu45makingu45scope: Option[String]
  def scopingu45label: Option[String]
  def periodu45value: Option[String]
  def periodu45type: Option[String]
  def startu45dateu45time: Option[String]
  def endu45dateu45time: Option[String]
  def periodu45startu45dateu45time: Option[String]
  def periodu45endu45dateu45time: Option[String]
  def temporalu45unitu45type: Option[String]
  def temporalu45unitu45value: Option[String]
  def eventu45span: Option[BigInt]
  def opponentu45value: Option[String]
  def opponentu45type: Option[String]
  def team: Option[String]
  def competition: Option[String]
  def unitu45value: Option[String]
  def unitu45type: Option[String]
  def situation: Option[String]
  def locationu45key: Option[String]
  def venueu45type: Option[String]
  def surfaceu45type: Option[String]
  def weatheru45type: Option[String]
  def scopeu45value: Option[String]
  def distance: Option[String]
  def distanceu45maximum: Option[String]
  def distanceu45minimum: Option[String]
  def measurementu45units: Option[String]
  def score: Option[String]
  def scoreu45opposing: Option[String]
  def scoreu45average: Option[String]
  def scoreu45opposingu45average: Option[String]
  def scoreu45units: Option[String]
  def scoreu45behind: Option[String]
  def scoreu45attempts: Option[String]
  def scoreu45attemptsu45opposing: Option[String]
  def scoreu45attemptsu45onu45goal: Option[String]
  def scoreu45attemptsu45onu45goalu45opposing: Option[String]
  def scoreu45percentage: Option[String]
  def scoreu45percentageu45opposing: Option[String]
  def resultu45effect: Option[String]
  def eventu45outcome: Option[String]
  def eventu45standingu45points: Option[String]
  def eventu45standingu45pointsu45against: Option[String]
  def scoreu45type: Option[String]
  def eventsu45remaining: Option[String]
  def timeu45ofu45possession: Option[String]
  def timeu45ofu45possessionu45percentage: Option[String]
  def timeu45ofu45possessionu45percentageu45opposing: Option[String]
  def timeu45ofu45possessionu45average: Option[String]
  def timeu45ofu45possessionu45averageu45opposing: Option[String]
  def seriesu45score: Option[String]
  def seriesu45scoreu45opposing: Option[String]
  def adjustedu45scoreu45for: Option[String]
  def adjustedu45scoreu45against: Option[String]
  def eventsu45played: Option[BigInt]
  def timeu45playedu45total: Option[String]
  def timeu45playedu45event: Option[String]
  def timeu45playedu45eventu45average: Option[String]
  def eventsu45started: Option[BigInt]
  def dateu45timeu45entered: Option[javax.xml.datatype.XMLGregorianCalendar]
  def dateu45timeu45exited: Option[javax.xml.datatype.XMLGregorianCalendar]
  def eventu45timeu45entered: Option[String]
  def eventu45timeu45exited: Option[String]
}


/** Statistics that capture how a player has performed. | Generally does change over the course of a sports-event.
*/
case class BasePlayerStatsComplexType(rating: Seq[org.iptc.sportsml.v3.RatingComplexType] = Nil,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  stats: Seq[org.iptc.sportsml.v3.GenericStatComplexType] = Nil,
  outcomeu45totals: Seq[org.iptc.sportsml.v3.OutcomeTotalsComplexType] = Nil,
  outcomeu45result: Seq[org.iptc.sportsml.v3.OutcomeResultComplexType] = Nil,
  penaltyu45stats: Seq[org.iptc.sportsml.v3.PenaltyStatsComplexType] = Nil,
  award: Seq[org.iptc.sportsml.v3.AwardComplexType] = Nil,
  rank: Seq[org.iptc.sportsml.v3.RankComplexType] = Nil,
  subu45score: Seq[org.iptc.sportsml.v3.SubScoreComplexType] = Nil,
  eventu45record: Seq[org.iptc.sportsml.v3.EventRecordComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BasePlayerStatsComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val points = attributes.get("@points") map { _.as[BigInt]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val score = attributes.get("@score") map { _.as[String]}
  lazy val scoreu45opposing = attributes.get("@score-opposing") map { _.as[String]}
  lazy val scoreu45average = attributes.get("@score-average") map { _.as[String]}
  lazy val scoreu45opposingu45average = attributes.get("@score-opposing-average") map { _.as[String]}
  lazy val scoreu45units = attributes.get("@score-units") map { _.as[String]}
  lazy val scoreu45behind = attributes.get("@score-behind") map { _.as[String]}
  lazy val scoreu45attempts = attributes.get("@score-attempts") map { _.as[String]}
  lazy val scoreu45attemptsu45opposing = attributes.get("@score-attempts-opposing") map { _.as[String]}
  lazy val scoreu45attemptsu45onu45goal = attributes.get("@score-attempts-on-goal") map { _.as[String]}
  lazy val scoreu45attemptsu45onu45goalu45opposing = attributes.get("@score-attempts-on-goal-opposing") map { _.as[String]}
  lazy val scoreu45percentage = attributes.get("@score-percentage") map { _.as[String]}
  lazy val scoreu45percentageu45opposing = attributes.get("@score-percentage-opposing") map { _.as[String]}
  lazy val resultu45effect = attributes.get("@result-effect") map { _.as[String]}
  lazy val eventu45outcome = attributes.get("@event-outcome") map { _.as[String]}
  lazy val eventu45standingu45points = attributes.get("@event-standing-points") map { _.as[String]}
  lazy val eventu45standingu45pointsu45against = attributes.get("@event-standing-points-against") map { _.as[String]}
  lazy val scoreu45type = attributes.get("@score-type") map { _.as[String]}
  lazy val eventsu45remaining = attributes.get("@events-remaining") map { _.as[String]}
  lazy val timeu45ofu45possession = attributes.get("@time-of-possession") map { _.as[String]}
  lazy val timeu45ofu45possessionu45percentage = attributes.get("@time-of-possession-percentage") map { _.as[String]}
  lazy val timeu45ofu45possessionu45percentageu45opposing = attributes.get("@time-of-possession-percentage-opposing") map { _.as[String]}
  lazy val timeu45ofu45possessionu45average = attributes.get("@time-of-possession-average") map { _.as[String]}
  lazy val timeu45ofu45possessionu45averageu45opposing = attributes.get("@time-of-possession-average-opposing") map { _.as[String]}
  lazy val seriesu45score = attributes.get("@series-score") map { _.as[String]}
  lazy val seriesu45scoreu45opposing = attributes.get("@series-score-opposing") map { _.as[String]}
  lazy val adjustedu45scoreu45for = attributes.get("@adjusted-score-for") map { _.as[String]}
  lazy val adjustedu45scoreu45against = attributes.get("@adjusted-score-against") map { _.as[String]}
  lazy val eventsu45played = attributes.get("@events-played") map { _.as[BigInt]}
  lazy val timeu45playedu45total = attributes.get("@time-played-total") map { _.as[String]}
  lazy val timeu45playedu45event = attributes.get("@time-played-event") map { _.as[String]}
  lazy val timeu45playedu45eventu45average = attributes.get("@time-played-event-average") map { _.as[String]}
  lazy val eventsu45started = attributes.get("@events-started") map { _.as[BigInt]}
  lazy val dateu45timeu45entered = attributes.get("@date-time-entered") map { _.as[javax.xml.datatype.XMLGregorianCalendar]}
  lazy val dateu45timeu45exited = attributes.get("@date-time-exited") map { _.as[javax.xml.datatype.XMLGregorianCalendar]}
  lazy val eventu45timeu45entered = attributes.get("@event-time-entered") map { _.as[String]}
  lazy val eventu45timeu45exited = attributes.get("@event-time-exited") map { _.as[String]}
}

      


case class BaseActionComplexType(action: Seq[org.iptc.sportsml.v3.BaseActionComplexType] = Nil,
  participant: Seq[org.iptc.sportsml.v3.BaseParticipantComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val minutesu45elapsed = attributes.get("@minutes-elapsed") map { _.as[String]}
  lazy val periodu45minuteu45elapsed = attributes.get("@period-minute-elapsed") map { _.as[String]}
  lazy val periodu45timeu45elapsed = attributes.get("@period-time-elapsed") map { _.as[String]}
  lazy val periodu45timeu45remaining = attributes.get("@period-time-remaining") map { _.as[String]}
  lazy val teamu45idref = attributes.get("@team-idref") map { _.as[String]}
  lazy val opposingu45teamu45idref = attributes.get("@opposing-team-idref") map { _.as[String]}
  lazy val created = attributes.get("@created") map { _.as[javax.xml.datatype.XMLGregorianCalendar]}
  lazy val lastu45modified = attributes.get("@last-modified") map { _.as[javax.xml.datatype.XMLGregorianCalendar]}
  lazy val dateu45time = attributes.get("@date-time") map { _.as[javax.xml.datatype.XMLGregorianCalendar]}
  lazy val result = attributes.get("@result") map { _.as[String]}
  lazy val sequenceu45number = attributes.get("@sequence-number") map { _.as[BigInt]}
  lazy val comment = attributes.get("@comment") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val timeu45elapsed = attributes.get("@time-elapsed") map { _.as[String]}
  lazy val timeu45remaining = attributes.get("@time-remaining") map { _.as[String]}
  lazy val playeru45count = attributes.get("@player-count") map { _.as[BigInt]}
  lazy val playeru45countu45opposing = attributes.get("@player-count-opposing") map { _.as[BigInt]}
  lazy val startu45location = attributes.get("@start-location") map { _.as[String]}
  lazy val endu45location = attributes.get("@end-location") map { _.as[String]}
  lazy val zone = attributes.get("@zone") map { _.as[String]}
  lazy val poweru45playu45timeu45remaining = attributes.get("@power-play-time-remaining") map { _.as[String]}
  lazy val poweru45playu45advantage = attributes.get("@power-play-advantage") map { _.as[BigInt]}
  lazy val calleru45type = attributes.get("@caller-type") map { _.as[String]}
  lazy val strength = attributes.get("@strength") map { _.as[String]}
  lazy val points = attributes.get("@points") map { _.as[BigInt]}
  lazy val turnoveru45type = attributes.get("@turnover-type") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45length = attributes.get("@period-length") map { _.as[String]}
  lazy val scoreu45team = attributes.get("@score-team") map { _.as[String]}
  lazy val scoreu45teamu45opposing = attributes.get("@score-team-opposing") map { _.as[String]}
  lazy val timeoutsu45left = attributes.get("@timeouts-left") map { _.as[BigInt]}
  lazy val timeoutu45duration = attributes.get("@timeout-duration") map { _.as[String]}
  lazy val timeoutu45type = attributes.get("@timeout-type") map { _.as[String]}
  lazy val scoreu45type = attributes.get("@score-type") map { _.as[String]}
  lazy val saveu45type = attributes.get("@save-type") map { _.as[String]}
  lazy val saveu45method = attributes.get("@save-method") map { _.as[String]}
  lazy val passu45type = attributes.get("@pass-type") map { _.as[String]}
  lazy val passu45description = attributes.get("@pass-description") map { _.as[String]}
  lazy val passu45method = attributes.get("@pass-method") map { _.as[String]}
  lazy val shotu45type = attributes.get("@shot-type") map { _.as[String]}
  lazy val shotu45distance = attributes.get("@shot-distance") map { _.as[Double]}
  lazy val shotu45distanceu45units = attributes.get("@shot-distance-units") map { _.as[String]}
  lazy val penaltyu45type = attributes.get("@penalty-type") map { _.as[String]}
  lazy val penaltyu45level = attributes.get("@penalty-level") map { _.as[String]}
  lazy val penaltyu45result = attributes.get("@penalty-result") map { _.as[String]}
  lazy val penaltyu45side = attributes.get("@penalty-side") map { _.as[String]}
  lazy val penaltyu45length = attributes.get("@penalty-length") map { _.as[String]}
  lazy val penaltyu45name = attributes.get("@penalty-name") map { _.as[String]}
  lazy val penaltyu45count = attributes.get("@penalty-count") map { _.as[BigInt]}
  lazy val penaltyu45status = attributes.get("@penalty-status") map { _.as[Penaltyu45status]}
  lazy val recipientu45type = attributes.get("@recipient-type") map { _.as[String]}
  lazy val scoreu45attemptu45type = attributes.get("@score-attempt-type") map { _.as[String]}
  lazy val scoreu45attemptu45result = attributes.get("@score-attempt-result") map { _.as[String]}
  lazy val scoreu45attemptu45side = attributes.get("@score-attempt-side") map { _.as[BodySideList]}
  lazy val scoreu45attemptu45method = attributes.get("@score-attempt-method") map { _.as[String]}
  lazy val scoreu45attemptu45situation = attributes.get("@score-attempt-situation") map { _.as[String]}
  lazy val goalu45zone = attributes.get("@goal-zone") map { _.as[String]}
  lazy val angle = attributes.get("@angle") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val bodyu45part = attributes.get("@body-part") map { _.as[String]}
  lazy val fieldu45location = attributes.get("@field-location") map { _.as[String]}
  lazy val goalu45location = attributes.get("@goal-location") map { _.as[String]}
  lazy val timeu45addition = attributes.get("@time-addition") map { _.as[String]}
  lazy val shootoutu45shotu45order = attributes.get("@shootout-shot-order") map { _.as[BigInt]}
  lazy val faceoffu45winner = attributes.get("@faceoff-winner") map { _.as[String]}
  lazy val substitutionu45reason = attributes.get("@substitution-reason") map { _.as[String]}
  lazy val touchdownu45type = attributes.get("@touchdown-type") map { _.as[String]}
  lazy val clocku45state = attributes.get("@clock-state") map { _.as[Clocku45stateType]}
  lazy val distanceu45foru451stu45down = attributes.get("@distance-for-1st-down") map { _.as[BigInt]}
  lazy val fieldu45side = attributes.get("@field-side") map { _.as[Fieldu45sideType]}
  lazy val fieldu45line = attributes.get("@field-line") map { _.as[BigInt]}
  lazy val driveu45plays = attributes.get("@drive-plays") map { _.as[BigInt]}
  lazy val driveu45yards = attributes.get("@drive-yards") map { _.as[BigInt]}
  lazy val driveu45duration = attributes.get("@drive-duration") map { _.as[javax.xml.datatype.Duration]}
  lazy val driveu45result = attributes.get("@drive-result") map { _.as[String]}
  lazy val down = attributes.get("@down") map { _.as[BigInt]}
  lazy val yardsu45gained = attributes.get("@yards-gained") map { _.as[BigInt]}
  lazy val penaltyu45yards = attributes.get("@penalty-yards") map { _.as[String]}
  lazy val penaltyu45acceptance = attributes.get("@penalty-acceptance") map { _.as[String]}
  lazy val penaltyu45challenge = attributes.get("@penalty-challenge") map { _.as[String]}
  lazy val penaltyu45review = attributes.get("@penalty-review") map { _.as[String]}
  lazy val penaltyu45reviewu45ruling = attributes.get("@penalty-review-ruling") map { _.as[String]}
  lazy val kicku45type = attributes.get("@kick-type") map { _.as[String]}
  lazy val atu45batu45number = attributes.get("@at-bat-number") map { _.as[BigInt]}
  lazy val balls = attributes.get("@balls") map { _.as[BigInt]}
  lazy val batteru45advance = attributes.get("@batter-advance") map { _.as[BigInt]}
  lazy val batteru45side = attributes.get("@batter-side") map { _.as[BodySideList]}
  lazy val earnedu45runsu45scored = attributes.get("@earned-runs-scored") map { _.as[BigInt]}
  lazy val erroru45type = attributes.get("@error-type") map { _.as[String]}
  lazy val hitu45byu45pitchu45type = attributes.get("@hit-by-pitch-type") map { _.as[Hitu45byu45pitchu45type]}
  lazy val hitu45location = attributes.get("@hit-location") map { _.as[String]}
  lazy val hitu45type = attributes.get("@hit-type") map { _.as[String]}
  lazy val inningu45exiting = attributes.get("@inning-exiting") map { _.as[String]}
  lazy val inningu45half = attributes.get("@inning-half") map { _.as[Inningu45half]}
  lazy val inningu45value = attributes.get("@inning-value") map { _.as[BigInt]}
  lazy val interferenceu45type = attributes.get("@interference-type") map { _.as[String]}
  lazy val leadu45entering = attributes.get("@lead-entering") map { _.as[String]}
  lazy val leadu45exiting = attributes.get("@lead-exiting") map { _.as[String]}
  lazy val outu45type = attributes.get("@out-type") map { _.as[String]}
  lazy val outs = attributes.get("@outs") map { _.as[BigInt]}
  lazy val outsu45recorded = attributes.get("@outs-recorded") map { _.as[BigInt]}
  lazy val pitcheru45side = attributes.get("@pitcher-side") map { _.as[BodySideList]}
  lazy val playu45scorekeepersu45notation = attributes.get("@play-scorekeepers-notation") map { _.as[String]}
  lazy val rbi = attributes.get("@rbi") map { _.as[BigInt]}
  lazy val runneru45onu45first = attributes.get("@runner-on-first") map { _.as[Boolean]}
  lazy val runneru45onu45firstu45advance = attributes.get("@runner-on-first-advance") map { _.as[String]}
  lazy val runneru45onu45firstu45idref = attributes.get("@runner-on-first-idref") map { _.as[String]}
  lazy val runneru45onu45second = attributes.get("@runner-on-second") map { _.as[Boolean]}
  lazy val runneru45onu45secondu45advance = attributes.get("@runner-on-second-advance") map { _.as[String]}
  lazy val runneru45onu45secondu45idref = attributes.get("@runner-on-second-idref") map { _.as[String]}
  lazy val runneru45onu45third = attributes.get("@runner-on-third") map { _.as[Boolean]}
  lazy val runneru45onu45thirdu45advance = attributes.get("@runner-on-third-advance") map { _.as[String]}
  lazy val runneru45onu45thirdu45idref = attributes.get("@runner-on-third-idref") map { _.as[String]}
  lazy val runnersu45onu45base = attributes.get("@runners-on-base") map { _.as[Boolean]}
  lazy val runsu45scored = attributes.get("@runs-scored") map { _.as[BigInt]}
  lazy val runsu45thisu45inningu45half = attributes.get("@runs-this-inning-half") map { _.as[BigInt]}
  lazy val sacrificeu45type = attributes.get("@sacrifice-type") map { _.as[String]}
  lazy val strikeoutu45type = attributes.get("@strikeout-type") map { _.as[Strikeoutu45type]}
  lazy val strikes = attributes.get("@strikes") map { _.as[BigInt]}
  lazy val trajectoryu45coordinates = attributes.get("@trajectory-coordinates") map { _.as[String]}
  lazy val velocity = attributes.get("@velocity") map { _.as[String]}
  lazy val walku45type = attributes.get("@walk-type") map { _.as[Walku45type]}
  lazy val ballu45location = attributes.get("@ball-location") map { _.as[String]}
  lazy val ballu45locationu45horizontal = attributes.get("@ball-location-horizontal") map { _.as[String]}
  lazy val ballu45locationu45vertical = attributes.get("@ball-location-vertical") map { _.as[String]}
  lazy val pitchu45type = attributes.get("@pitch-type") map { _.as[String]}
  lazy val pitchu45velocity = attributes.get("@pitch-velocity") map { _.as[BigDecimal]}
  lazy val pitchu45units = attributes.get("@pitch-units") map { _.as[Pitchu45units]}
  lazy val strikeu45type = attributes.get("@strike-type") map { _.as[Strikeu45type]}
  lazy val umpireu45call = attributes.get("@umpire-call") map { _.as[Umpireu45call]}
  lazy val endu45number = attributes.get("@end-number") map { _.as[BigInt]}
  lazy val stoneu45number = attributes.get("@stone-number") map { _.as[BigInt]}
  lazy val timeu45used = attributes.get("@time-used") map { _.as[String]}
  lazy val turn = attributes.get("@turn") map { _.as[Turn]}
  lazy val stoneu45speed = attributes.get("@stone-speed") map { _.as[String]}
  lazy val round = attributes.get("@round") map { _.as[BigInt]}
  lazy val hole = attributes.get("@hole") map { _.as[BigInt]}
  lazy val strokes = attributes.get("@strokes") map { _.as[BigInt]}
  lazy val score = attributes.get("@score") map { _.as[BigInt]}
  lazy val scoreu45againstu45par = attributes.get("@score-against-par") map { _.as[BigInt]}
  lazy val club = attributes.get("@club") map { _.as[String]}
  lazy val startu45distance = attributes.get("@start-distance") map { _.as[BigInt]}
  lazy val endu45distance = attributes.get("@end-distance") map { _.as[BigInt]}
  lazy val landing = attributes.get("@landing") map { _.as[String]}
  lazy val lap = attributes.get("@lap") map { _.as[BigInt]}
  lazy val lapsu45remaining = attributes.get("@laps-remaining") map { _.as[BigInt]}
  lazy val flagu45state = attributes.get("@flag-state") map { _.as[String]}
  lazy val flagu45original = attributes.get("@flag-original") map { _.as[String]}
  lazy val flagu45new = attributes.get("@flag-new") map { _.as[String]}
  lazy val passeru45type = attributes.get("@passer-type") map { _.as[String]}
  lazy val passeru45key = attributes.get("@passer-key") map { _.as[String]}
  lazy val positionu45original = attributes.get("@position-original") map { _.as[String]}
  lazy val positionu45new = attributes.get("@position-new") map { _.as[String]}
  lazy val cautionu45value = attributes.get("@caution-value") map { _.as[String]}
  lazy val set = attributes.get("@set") map { _.as[BigInt]}
  lazy val game = attributes.get("@game") map { _.as[BigInt]}
  lazy val winu45type = attributes.get("@win-type") map { _.as[Winu45type]}
  lazy val serveru45score = attributes.get("@server-score") map { _.as[String]}
  lazy val receiveru45score = attributes.get("@receiver-score") map { _.as[String]}
  lazy val serveu45number = attributes.get("@serve-number") map { _.as[String]}
}

      

trait Penaltyu45status

object Penaltyu45status {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Penaltyu45status]): Penaltyu45status = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Penaltyu45status) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object Start extends Penaltyu45status { override def toString = "start" }
case object End extends Penaltyu45status { override def toString = "end" }

trait Scoreu45credit

object Scoreu45credit {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Scoreu45credit]): Scoreu45credit = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Scoreu45credit) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object Number1Value extends Scoreu45credit { override def toString = "1" }
case object Number0 extends Scoreu45credit { override def toString = "0" }


/** Base structure for a participant.
*/
case class BaseParticipantComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val idref = attributes("@idref").as[String]
  lazy val teamu45idref = attributes.get("@team-idref") map { _.as[String]}
  lazy val role = attributes.get("@role") map { _.as[String]}
  lazy val stoneu45color = attributes.get("@stone-color") map { _.as[String]}
  lazy val stoneu45id = attributes.get("@stone-id") map { _.as[String]}
  lazy val stoneu45number = attributes.get("@stone-number") map { _.as[BigInt]}
  lazy val fieldu45location = attributes.get("@field-location") map { _.as[String]}
  lazy val goalsu45cumulative = attributes.get("@goals-cumulative") map { _.as[String]}
  lazy val assistsu45cumulative = attributes.get("@assists-cumulative") map { _.as[String]}
  lazy val lineupu45slot = attributes.get("@lineup-slot") map { _.as[BigInt]}
  lazy val yardsu45gained = attributes.get("@yards-gained") map { _.as[BigInt]}
  lazy val scoreu45credit = attributes.get("@score-credit") map { _.as[Scoreu45credit]}
}

      

trait Timeu45certainty

object Timeu45certainty {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Timeu45certainty]): Timeu45certainty = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Timeu45certainty) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object Certain extends Timeu45certainty { override def toString = "certain" }
case object Tou45beu45announced extends Timeu45certainty { override def toString = "to-be-announced" }


/** Background information about an event. | Where, when, and what an event is.
*/
trait BaseEventMetadataComplexTypable extends Base2MetadataComplexTypable {
  def sportsu45contentu45codes: Option[org.iptc.sportsml.v3.SportsContentCodesComplexType]
  def sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType]
  def name: Seq[org.iptc.sportsml.v3.ConceptNameType]
  def site: Seq[org.iptc.sportsml.v3.SiteComplexType]
  def award: Seq[org.iptc.sportsml.v3.AwardComplexType]
  def eventu45sponsor: Seq[org.iptc.sportsml.v3.EventSponsorComplexType]
  def eventu45recurringu45name: Seq[org.iptc.sportsml.v3.ConceptNameType]
  def id: Option[String]
  def classValue: Option[String]
  def style: Option[String]
  def statsu45coverage: Option[String]
  def teamu45coverage: Option[org.iptc.sportsml.v3.Teamu45coverage]
  def durationu45scope: Option[String]
  def alignmentu45scope: Option[org.iptc.sportsml.v3.Alignmentu45scope]
  def position: Option[String]
  def recordu45makingu45scope: Option[String]
  def scopingu45label: Option[String]
  def periodu45value: Option[String]
  def periodu45type: Option[String]
  def startu45dateu45time: Option[String]
  def endu45dateu45time: Option[String]
  def periodu45startu45dateu45time: Option[String]
  def periodu45endu45dateu45time: Option[String]
  def temporalu45unitu45type: Option[String]
  def temporalu45unitu45value: Option[String]
  def eventu45span: Option[BigInt]
  def opponentu45value: Option[String]
  def opponentu45type: Option[String]
  def team: Option[String]
  def competition: Option[String]
  def unitu45value: Option[String]
  def unitu45type: Option[String]
  def situation: Option[String]
  def locationu45key: Option[String]
  def venueu45type: Option[String]
  def surfaceu45type: Option[String]
  def weatheru45type: Option[String]
  def scopeu45value: Option[String]
  def distance: Option[String]
  def distanceu45maximum: Option[String]
  def distanceu45minimum: Option[String]
  def measurementu45units: Option[String]
  def key: Option[String]
  def minutesu45elapsed: Option[String]
  def periodu45minuteu45elapsed: Option[String]
  def periodu45timeu45elapsed: Option[String]
  def periodu45timeu45remaining: Option[String]
  def eventu45recurringu45key: Option[String]
  def eventu45style: Option[String]
  def eventu45number: Option[BigInt]
  def eventu45status: Option[String]
  def eventu45type: Option[String]
  def eventu45statusu45reason: Option[String]
  def eventu45statusu45note: Option[String]
  def eventu45ofu45day: Option[String]
  def eventsu45dayu45total: Option[String]
  def startu45weekday: Option[String]
  def endu45weekday: Option[String]
  def heatu45number: Option[String]
  def duration: Option[javax.xml.datatype.Duration]
  def timeu45certainty: Option[org.iptc.sportsml.v3.Timeu45certainty]
  def seasonu45key: Option[String]
  def seasonu45type: Option[String]
  def seriesu45index: Option[String]
  def eventu45outcomeu45type: Option[String]
}


/** Background information about an event. | Where, when, and what an event is.
*/
case class BaseEventMetadataComplexType(sportsu45contentu45codes: Option[org.iptc.sportsml.v3.SportsContentCodesComplexType] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  site: Seq[org.iptc.sportsml.v3.SiteComplexType] = Nil,
  award: Seq[org.iptc.sportsml.v3.AwardComplexType] = Nil,
  eventu45sponsor: Seq[org.iptc.sportsml.v3.EventSponsorComplexType] = Nil,
  eventu45recurringu45name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseEventMetadataComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val key = attributes.get("@key") map { _.as[String]}
  lazy val minutesu45elapsed = attributes.get("@minutes-elapsed") map { _.as[String]}
  lazy val periodu45minuteu45elapsed = attributes.get("@period-minute-elapsed") map { _.as[String]}
  lazy val periodu45timeu45elapsed = attributes.get("@period-time-elapsed") map { _.as[String]}
  lazy val periodu45timeu45remaining = attributes.get("@period-time-remaining") map { _.as[String]}
  lazy val eventu45recurringu45key = attributes.get("@event-recurring-key") map { _.as[String]}
  lazy val eventu45style = attributes.get("@event-style") map { _.as[String]}
  lazy val eventu45number = attributes.get("@event-number") map { _.as[BigInt]}
  lazy val eventu45status = attributes.get("@event-status") map { _.as[String]}
  lazy val eventu45type = attributes.get("@event-type") map { _.as[String]}
  lazy val eventu45statusu45reason = attributes.get("@event-status-reason") map { _.as[String]}
  lazy val eventu45statusu45note = attributes.get("@event-status-note") map { _.as[String]}
  lazy val eventu45ofu45day = attributes.get("@event-of-day") map { _.as[String]}
  lazy val eventsu45dayu45total = attributes.get("@events-day-total") map { _.as[String]}
  lazy val startu45weekday = attributes.get("@start-weekday") map { _.as[String]}
  lazy val endu45weekday = attributes.get("@end-weekday") map { _.as[String]}
  lazy val heatu45number = attributes.get("@heat-number") map { _.as[String]}
  lazy val duration = attributes.get("@duration") map { _.as[javax.xml.datatype.Duration]}
  lazy val timeu45certainty = attributes.get("@time-certainty") map { _.as[Timeu45certainty]}
  lazy val seasonu45key = attributes.get("@season-key") map { _.as[String]}
  lazy val seasonu45type = attributes.get("@season-type") map { _.as[String]}
  lazy val seriesu45index = attributes.get("@series-index") map { _.as[String]}
  lazy val eventu45outcomeu45type = attributes.get("@event-outcome-type") map { _.as[String]}
}

      


/** Base metadata for different entities. Extended by baseTeamMetadata and basePersonMetadata and siteMetadata 
*/
trait BaseEntityMetadataComplexTypable {
  def name: Seq[org.iptc.sportsml.v3.ConceptNameType]
  def homeu45location: Option[org.iptc.sportsml.v3.FlexLocationPropTypable]
  def sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType]
  def id: Option[String]
  def classValue: Option[String]
  def style: Option[String]
  def key: Option[String]
  def nationality: Option[String]
}


/** Base metadata for different entities. Extended by baseTeamMetadata and basePersonMetadata and siteMetadata 
*/
case class BaseEntityMetadataComplexType(name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  homeu45location: Option[org.iptc.sportsml.v3.FlexLocationPropTypable] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseEntityMetadataComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val key = attributes.get("@key") map { _.as[String]}
  lazy val nationality = attributes.get("@nationality") map { _.as[String]}
}

      

trait GenderType

object GenderType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.GenderType]): GenderType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: GenderType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object MaleValue extends GenderType { override def toString = "male" }
case object FemaleValue extends GenderType { override def toString = "female" }


/** Metadata that describes a person. | Generally does not change over the course of a sports-events. Extends the baseEntityMetadata type
*/
trait BasePersonMetadataComplexTypable extends BaseEntityMetadataComplexTypable {
  def name: Seq[org.iptc.sportsml.v3.ConceptNameType]
  def homeu45location: Option[org.iptc.sportsml.v3.FlexLocationPropTypable]
  def sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType]
  def id: Option[String]
  def classValue: Option[String]
  def style: Option[String]
  def key: Option[String]
  def nationality: Option[String]
  def dateu45ofu45birth: Option[String]
  def dateu45ofu45death: Option[String]
  def height: Option[String]
  def weight: Option[BigInt]
  def positionu45regular: Option[String]
  def positionu45event: Option[String]
  def positionu45depth: Option[String]
  def health: Option[String]
  def gender: Option[org.iptc.sportsml.v3.GenderType]
}


/** Metadata that describes a person. | Generally does not change over the course of a sports-events. Extends the baseEntityMetadata type
*/
case class BasePersonMetadataComplexType(name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  homeu45location: Option[org.iptc.sportsml.v3.FlexLocationPropTypable] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BasePersonMetadataComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val key = attributes.get("@key") map { _.as[String]}
  lazy val nationality = attributes.get("@nationality") map { _.as[String]}
  lazy val dateu45ofu45birth = attributes.get("@date-of-birth") map { _.as[String]}
  lazy val dateu45ofu45death = attributes.get("@date-of-death") map { _.as[String]}
  lazy val height = attributes.get("@height") map { _.as[String]}
  lazy val weight = attributes.get("@weight") map { _.as[BigInt]}
  lazy val positionu45regular = attributes.get("@position-regular") map { _.as[String]}
  lazy val positionu45event = attributes.get("@position-event") map { _.as[String]}
  lazy val positionu45depth = attributes.get("@position-depth") map { _.as[String]}
  lazy val health = attributes.get("@health") map { _.as[String]}
  lazy val gender = attributes.get("@gender") map { _.as[GenderType]}
}

      


/** Metadata that describes a person. | Generally does not change over the course of a sports-events.
*/
trait BasePlayerMetadataComplexTypable extends BasePersonMetadataComplexTypable {
  def name: Seq[org.iptc.sportsml.v3.ConceptNameType]
  def homeu45location: Option[org.iptc.sportsml.v3.FlexLocationPropTypable]
  def sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType]
  def baseplayermetadatacomplextypableoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.BasePlayerMetadataComplexTypableOption]]
  def id: Option[String]
  def classValue: Option[String]
  def style: Option[String]
  def key: Option[String]
  def nationality: Option[String]
  def dateu45ofu45birth: Option[String]
  def dateu45ofu45death: Option[String]
  def height: Option[String]
  def weight: Option[BigInt]
  def positionu45regular: Option[String]
  def positionu45event: Option[String]
  def positionu45depth: Option[String]
  def health: Option[String]
  def gender: Option[org.iptc.sportsml.v3.GenderType]
  def teamu45idref: Option[String]
  def status: Option[String]
  def lineupu45slot: Option[String]
  def lineupu45slotu45sequence: Option[String]
  def scratchu45reason: Option[String]
  def uniformu45number: Option[String]
  def homeu45pageu45url: Option[java.net.URI]
  def roundu45position: Option[String]
}


/** Metadata that describes a person. | Generally does not change over the course of a sports-events.
*/
case class BasePlayerMetadataComplexType(name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  homeu45location: Option[org.iptc.sportsml.v3.FlexLocationPropTypable] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  baseplayermetadatacomplextypableoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.BasePlayerMetadataComplexTypableOption]] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BasePlayerMetadataComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val key = attributes.get("@key") map { _.as[String]}
  lazy val nationality = attributes.get("@nationality") map { _.as[String]}
  lazy val dateu45ofu45birth = attributes.get("@date-of-birth") map { _.as[String]}
  lazy val dateu45ofu45death = attributes.get("@date-of-death") map { _.as[String]}
  lazy val height = attributes.get("@height") map { _.as[String]}
  lazy val weight = attributes.get("@weight") map { _.as[BigInt]}
  lazy val positionu45regular = attributes.get("@position-regular") map { _.as[String]}
  lazy val positionu45event = attributes.get("@position-event") map { _.as[String]}
  lazy val positionu45depth = attributes.get("@position-depth") map { _.as[String]}
  lazy val health = attributes.get("@health") map { _.as[String]}
  lazy val gender = attributes.get("@gender") map { _.as[GenderType]}
  lazy val teamu45idref = attributes.get("@team-idref") map { _.as[String]}
  lazy val status = attributes.get("@status") map { _.as[String]}
  lazy val lineupu45slot = attributes.get("@lineup-slot") map { _.as[String]}
  lazy val lineupu45slotu45sequence = attributes.get("@lineup-slot-sequence") map { _.as[String]}
  lazy val scratchu45reason = attributes.get("@scratch-reason") map { _.as[String]}
  lazy val uniformu45number = attributes.get("@uniform-number") map { _.as[String]}
  lazy val homeu45pageu45url = attributes.get("@home-page-url") map { _.as[java.net.URI]}
  lazy val roundu45position = attributes.get("@round-position") map { _.as[String]}
}

      

trait BasePlayerMetadataComplexTypableOption

/** A description of where a player is playing, or has previously played. | Can be used to state where the player went to college. Can also list previous teams of the player.
*/
case class BaseCareerPhaseMetadataComplexType(name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  homeu45location: Option[org.iptc.sportsml.v3.FlexLocationPropTypable] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  baseplayermetadatacomplextypableoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.BasePlayerMetadataComplexTypableOption]] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BasePlayerMetadataComplexTypable with BasePlayerMetadataComplexTypableOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val key = attributes.get("@key") map { _.as[String]}
  lazy val nationality = attributes.get("@nationality") map { _.as[String]}
  lazy val dateu45ofu45birth = attributes.get("@date-of-birth") map { _.as[String]}
  lazy val dateu45ofu45death = attributes.get("@date-of-death") map { _.as[String]}
  lazy val height = attributes.get("@height") map { _.as[String]}
  lazy val weight = attributes.get("@weight") map { _.as[BigInt]}
  lazy val positionu45regular = attributes.get("@position-regular") map { _.as[String]}
  lazy val positionu45event = attributes.get("@position-event") map { _.as[String]}
  lazy val positionu45depth = attributes.get("@position-depth") map { _.as[String]}
  lazy val health = attributes.get("@health") map { _.as[String]}
  lazy val gender = attributes.get("@gender") map { _.as[GenderType]}
  lazy val teamu45idref = attributes.get("@team-idref") map { _.as[String]}
  lazy val status = attributes.get("@status") map { _.as[String]}
  lazy val lineupu45slot = attributes.get("@lineup-slot") map { _.as[String]}
  lazy val lineupu45slotu45sequence = attributes.get("@lineup-slot-sequence") map { _.as[String]}
  lazy val scratchu45reason = attributes.get("@scratch-reason") map { _.as[String]}
  lazy val uniformu45number = attributes.get("@uniform-number") map { _.as[String]}
  lazy val homeu45pageu45url = attributes.get("@home-page-url") map { _.as[java.net.URI]}
  lazy val roundu45position = attributes.get("@round-position") map { _.as[String]}
  lazy val phaseu45type = attributes.get("@phase-type") map { _.as[String]}
  lazy val startu45date = attributes.get("@start-date") map { _.as[String]}
  lazy val endu45date = attributes.get("@end-date") map { _.as[String]}
  lazy val duration = attributes.get("@duration") map { _.as[String]}
  lazy val subphaseu45type = attributes.get("@subphase-type") map { _.as[String]}
  lazy val phaseu45status = attributes.get("@phase-status") map { _.as[String]}
  lazy val phaseu45caliber = attributes.get("@phase-caliber") map { _.as[String]}
  lazy val phaseu45caliberu45key = attributes.get("@phase-caliber-key") map { _.as[String]}
  lazy val entryu45reason = attributes.get("@entry-reason") map { _.as[String]}
  lazy val selectionu45level = attributes.get("@selection-level") map { _.as[BigInt]}
  lazy val selectionu45sublevel = attributes.get("@selection-sublevel") map { _.as[BigInt]}
  lazy val selectionu45overall = attributes.get("@selection-overall") map { _.as[BigInt]}
  lazy val exitu45reason = attributes.get("@exit-reason") map { _.as[String]}
}

      


/** A description of where a player is playing, or has previously played. | Can be used to state where the player went to college. Can also list previous teams of the player.
*/
case class BaseInjuryPhaseMetadataComplexType(name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  homeu45location: Option[org.iptc.sportsml.v3.FlexLocationPropTypable] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  baseplayermetadatacomplextypableoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.BasePlayerMetadataComplexTypableOption]] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BasePlayerMetadataComplexTypable with BasePlayerMetadataComplexTypableOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val key = attributes.get("@key") map { _.as[String]}
  lazy val nationality = attributes.get("@nationality") map { _.as[String]}
  lazy val dateu45ofu45birth = attributes.get("@date-of-birth") map { _.as[String]}
  lazy val dateu45ofu45death = attributes.get("@date-of-death") map { _.as[String]}
  lazy val height = attributes.get("@height") map { _.as[String]}
  lazy val weight = attributes.get("@weight") map { _.as[BigInt]}
  lazy val positionu45regular = attributes.get("@position-regular") map { _.as[String]}
  lazy val positionu45event = attributes.get("@position-event") map { _.as[String]}
  lazy val positionu45depth = attributes.get("@position-depth") map { _.as[String]}
  lazy val health = attributes.get("@health") map { _.as[String]}
  lazy val gender = attributes.get("@gender") map { _.as[GenderType]}
  lazy val teamu45idref = attributes.get("@team-idref") map { _.as[String]}
  lazy val status = attributes.get("@status") map { _.as[String]}
  lazy val lineupu45slot = attributes.get("@lineup-slot") map { _.as[String]}
  lazy val lineupu45slotu45sequence = attributes.get("@lineup-slot-sequence") map { _.as[String]}
  lazy val scratchu45reason = attributes.get("@scratch-reason") map { _.as[String]}
  lazy val uniformu45number = attributes.get("@uniform-number") map { _.as[String]}
  lazy val homeu45pageu45url = attributes.get("@home-page-url") map { _.as[java.net.URI]}
  lazy val roundu45position = attributes.get("@round-position") map { _.as[String]}
  lazy val phaseu45type = attributes.get("@phase-type") map { _.as[String]}
  lazy val startu45date = attributes.get("@start-date") map { _.as[String]}
  lazy val endu45date = attributes.get("@end-date") map { _.as[String]}
  lazy val phaseu45status = attributes.get("@phase-status") map { _.as[String]}
  lazy val injuryu45type = attributes.get("@injury-type") map { _.as[String]}
  lazy val injuryu45side = attributes.get("@injury-side") map { _.as[BodySideList]}
  lazy val upcomingu45eventu45date = attributes.get("@upcoming-event-date") map { _.as[String]}
  lazy val upcomingu45eventu45key = attributes.get("@upcoming-event-key") map { _.as[String]}
  lazy val upcomingu45eventu45status = attributes.get("@upcoming-event-status") map { _.as[String]}
  lazy val comment = attributes.get("@comment") map { _.as[String]}
}

      


/** Metadata about the official. | Generally does not change over the course of a sports-events.
*/
trait BaseOfficialMetadataComplexTypable extends BasePersonMetadataComplexTypable {
  def name: Seq[org.iptc.sportsml.v3.ConceptNameType]
  def homeu45location: Option[org.iptc.sportsml.v3.FlexLocationPropTypable]
  def sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType]
  def id: Option[String]
  def classValue: Option[String]
  def style: Option[String]
  def key: Option[String]
  def nationality: Option[String]
  def dateu45ofu45birth: Option[String]
  def dateu45ofu45death: Option[String]
  def height: Option[String]
  def weight: Option[BigInt]
  def positionu45regular: Option[String]
  def positionu45event: Option[String]
  def positionu45depth: Option[String]
  def health: Option[String]
  def gender: Option[org.iptc.sportsml.v3.GenderType]
  def uniformu45number: Option[String]
}


/** Metadata about the official. | Generally does not change over the course of a sports-events.
*/
case class BaseOfficialMetadataComplexType(name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  homeu45location: Option[org.iptc.sportsml.v3.FlexLocationPropTypable] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseOfficialMetadataComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val key = attributes.get("@key") map { _.as[String]}
  lazy val nationality = attributes.get("@nationality") map { _.as[String]}
  lazy val dateu45ofu45birth = attributes.get("@date-of-birth") map { _.as[String]}
  lazy val dateu45ofu45death = attributes.get("@date-of-death") map { _.as[String]}
  lazy val height = attributes.get("@height") map { _.as[String]}
  lazy val weight = attributes.get("@weight") map { _.as[BigInt]}
  lazy val positionu45regular = attributes.get("@position-regular") map { _.as[String]}
  lazy val positionu45event = attributes.get("@position-event") map { _.as[String]}
  lazy val positionu45depth = attributes.get("@position-depth") map { _.as[String]}
  lazy val health = attributes.get("@health") map { _.as[String]}
  lazy val gender = attributes.get("@gender") map { _.as[GenderType]}
  lazy val uniformu45number = attributes.get("@uniform-number") map { _.as[String]}
}

      


/** Metadata that describes an associate | Generally does not change over the course of a sports-events.
*/
trait BaseAssociateMetadataComplexTypable extends BasePersonMetadataComplexTypable {
  def name: Seq[org.iptc.sportsml.v3.ConceptNameType]
  def homeu45location: Option[org.iptc.sportsml.v3.FlexLocationPropTypable]
  def sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType]
  def id: Option[String]
  def classValue: Option[String]
  def style: Option[String]
  def key: Option[String]
  def nationality: Option[String]
  def dateu45ofu45birth: Option[String]
  def dateu45ofu45death: Option[String]
  def height: Option[String]
  def weight: Option[BigInt]
  def positionu45regular: Option[String]
  def positionu45event: Option[String]
  def positionu45depth: Option[String]
  def health: Option[String]
  def gender: Option[org.iptc.sportsml.v3.GenderType]
}


/** Metadata that describes an associate | Generally does not change over the course of a sports-events.
*/
case class BaseAssociateMetadataComplexType(name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  homeu45location: Option[org.iptc.sportsml.v3.FlexLocationPropTypable] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseAssociateMetadataComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val key = attributes.get("@key") map { _.as[String]}
  lazy val nationality = attributes.get("@nationality") map { _.as[String]}
  lazy val dateu45ofu45birth = attributes.get("@date-of-birth") map { _.as[String]}
  lazy val dateu45ofu45death = attributes.get("@date-of-death") map { _.as[String]}
  lazy val height = attributes.get("@height") map { _.as[String]}
  lazy val weight = attributes.get("@weight") map { _.as[BigInt]}
  lazy val positionu45regular = attributes.get("@position-regular") map { _.as[String]}
  lazy val positionu45event = attributes.get("@position-event") map { _.as[String]}
  lazy val positionu45depth = attributes.get("@position-depth") map { _.as[String]}
  lazy val health = attributes.get("@health") map { _.as[String]}
  lazy val gender = attributes.get("@gender") map { _.as[GenderType]}
}

      


/** Background data about a tournament or tournament part. | Where and when the this tournament took place.
*/
trait BaseTournamentMetadataComplexTypable extends Base2MetadataComplexTypable {
  def sportsu45contentu45codes: Option[org.iptc.sportsml.v3.SportsContentCodesComplexType]
  def sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType]
  def name: Seq[org.iptc.sportsml.v3.ConceptNameType]
  def site: Seq[org.iptc.sportsml.v3.SiteComplexType]
  def award: Seq[org.iptc.sportsml.v3.AwardComplexType]
  def id: Option[String]
  def classValue: Option[String]
  def style: Option[String]
  def statsu45coverage: Option[String]
  def teamu45coverage: Option[org.iptc.sportsml.v3.Teamu45coverage]
  def durationu45scope: Option[String]
  def alignmentu45scope: Option[org.iptc.sportsml.v3.Alignmentu45scope]
  def position: Option[String]
  def recordu45makingu45scope: Option[String]
  def scopingu45label: Option[String]
  def periodu45value: Option[String]
  def periodu45type: Option[String]
  def startu45dateu45time: Option[String]
  def endu45dateu45time: Option[String]
  def periodu45startu45dateu45time: Option[String]
  def periodu45endu45dateu45time: Option[String]
  def temporalu45unitu45type: Option[String]
  def temporalu45unitu45value: Option[String]
  def eventu45span: Option[BigInt]
  def opponentu45value: Option[String]
  def opponentu45type: Option[String]
  def team: Option[String]
  def competition: Option[String]
  def unitu45value: Option[String]
  def unitu45type: Option[String]
  def situation: Option[String]
  def locationu45key: Option[String]
  def venueu45type: Option[String]
  def surfaceu45type: Option[String]
  def weatheru45type: Option[String]
  def scopeu45value: Option[String]
  def distance: Option[String]
  def distanceu45maximum: Option[String]
  def distanceu45minimum: Option[String]
  def measurementu45units: Option[String]
  def key: Option[String]
  def status: Option[String]
  def minimumu45subparts: Option[BigInt]
  def maximumu45subparts: Option[BigInt]
  def number: Option[BigInt]
}


/** Background data about a tournament or tournament part. | Where and when the this tournament took place.
*/
case class BaseTournamentMetadataComplexType(sportsu45contentu45codes: Option[org.iptc.sportsml.v3.SportsContentCodesComplexType] = None,
  sportsu45property: Seq[org.iptc.sportsml.v3.SportsPropertyComplexType] = Nil,
  name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  site: Seq[org.iptc.sportsml.v3.SiteComplexType] = Nil,
  award: Seq[org.iptc.sportsml.v3.AwardComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseTournamentMetadataComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val key = attributes.get("@key") map { _.as[String]}
  lazy val status = attributes.get("@status") map { _.as[String]}
  lazy val minimumu45subparts = attributes.get("@minimum-subparts") map { _.as[BigInt]}
  lazy val maximumu45subparts = attributes.get("@maximum-subparts") map { _.as[BigInt]}
  lazy val number = attributes.get("@number") map { _.as[BigInt]}
}

      


/** Record time added by referee. | Holds values for the time added by the referee and how much extra time was actually played.
*/
trait BaseTimeAdjustmentComplexTypable {
  def id: Option[String]
  def classValue: Option[String]
  def style: Option[String]
  def periodu45extrau45timeu45added: Option[String]
  def periodu45extrau45timeu45elapsed: Option[String]
}


/** Record time added by referee. | Holds values for the time added by the referee and how much extra time was actually played.
*/
case class BaseTimeAdjustmentComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseTimeAdjustmentComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val periodu45extrau45timeu45added = attributes.get("@period-extra-time-added") map { _.as[String]}
  lazy val periodu45extrau45timeu45elapsed = attributes.get("@period-extra-time-elapsed") map { _.as[String]}
}

      

trait Teamu45coverage

object Teamu45coverage {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Teamu45coverage]): Teamu45coverage = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Teamu45coverage) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object Singleu45team extends Teamu45coverage { override def toString = "single-team" }
case object Multiu45team extends Teamu45coverage { override def toString = "multi-team" }

trait Alignmentu45scope

object Alignmentu45scope {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Alignmentu45scope]): Alignmentu45scope = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Alignmentu45scope) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object Eventsu45all extends Alignmentu45scope { override def toString = "events-all" }
case object Eventsu45home extends Alignmentu45scope { override def toString = "events-home" }
case object Eventsu45away extends Alignmentu45scope { override def toString = "events-away" }

trait Clocku45stateType

object Clocku45stateType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Clocku45stateType]): Clocku45stateType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Clocku45stateType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object StoppedValue extends Clocku45stateType { override def toString = "stopped" }
case object RunningValue extends Clocku45stateType { override def toString = "running" }

trait Fieldu45sideType

object Fieldu45sideType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Fieldu45sideType]): Fieldu45sideType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Fieldu45sideType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object HomeValue3 extends Fieldu45sideType { override def toString = "home" }
case object AwayValue2 extends Fieldu45sideType { override def toString = "away" }

trait Hitu45byu45pitchu45type

object Hitu45byu45pitchu45type {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Hitu45byu45pitchu45type]): Hitu45byu45pitchu45type = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Hitu45byu45pitchu45type) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object Intentional extends Hitu45byu45pitchu45type { override def toString = "intentional" }
case object Unintentional extends Hitu45byu45pitchu45type { override def toString = "unintentional" }

trait Inningu45half

object Inningu45half {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Inningu45half]): Inningu45half = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Inningu45half) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object Top extends Inningu45half { override def toString = "top" }
case object Bottom extends Inningu45half { override def toString = "bottom" }

trait Strikeoutu45type

object Strikeoutu45type {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Strikeoutu45type]): Strikeoutu45type = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Strikeoutu45type) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object Called extends Strikeoutu45type { override def toString = "called" }
case object Swinging extends Strikeoutu45type { override def toString = "swinging" }

trait Walku45type

object Walku45type {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Walku45type]): Walku45type = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Walku45type) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object IntentionalValue extends Walku45type { override def toString = "intentional" }
case object UnintentionalValue extends Walku45type { override def toString = "unintentional" }

trait Pitchu45units

object Pitchu45units {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Pitchu45units]): Pitchu45units = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Pitchu45units) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object Kph extends Pitchu45units { override def toString = "kph" }
case object Mph extends Pitchu45units { override def toString = "mph" }

trait Strikeu45type

object Strikeu45type {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Strikeu45type]): Strikeu45type = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Strikeu45type) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object CalledValue extends Strikeu45type { override def toString = "called" }
case object SwingingValue extends Strikeu45type { override def toString = "swinging" }
case object Foul extends Strikeu45type { override def toString = "foul" }

trait Umpireu45call

object Umpireu45call {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Umpireu45call]): Umpireu45call = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Umpireu45call) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object Ball extends Umpireu45call { override def toString = "ball" }
case object Strike extends Umpireu45call { override def toString = "strike" }
case object Inu45play extends Umpireu45call { override def toString = "in-play" }

trait Turn

object Turn {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Turn]): Turn = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Turn) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object Inturn extends Turn { override def toString = "inturn" }
case object Outturn extends Turn { override def toString = "outturn" }

trait Winu45type

object Winu45type {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Winu45type]): Winu45type = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Winu45type) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object Forced extends Winu45type { override def toString = "forced" }
case object Unforced extends Winu45type { override def toString = "unforced" }

trait BodySideList

object BodySideList {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.BodySideList]): BodySideList = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: BodySideList) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object RightType extends BodySideList { override def toString = "right" }
case object LeftType extends BodySideList { override def toString = "left" }
case object Both extends BodySideList { override def toString = "both" }

trait Context

object Context {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Context]): Context = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Context) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object Opening extends Context { override def toString = "opening" }
case object Closing extends Context { override def toString = "closing" }
case object Current extends Context { override def toString = "current" }


case class BaseEventStateAttributeGroup(minutesu45elapsed: Option[String] = None,
  periodu45minuteu45elapsed: Option[String] = None,
  periodu45timeu45elapsed: Option[String] = None,
  periodu45timeu45remaining: Option[String] = None)


case class Wagering2Attributes(bookmakeru45key: Option[String] = None,
  bookmakeru45name: Option[String] = None,
  rotationu45key: Option[String] = None,
  comment: Option[String] = None,
  dateu45time: Option[String] = None,
  context: Option[org.iptc.sportsml.v3.Context] = None,
  prediction: Option[String] = None,
  predictionu45opening: Option[String] = None,
  vigorish: Option[String] = None)


/** List of attributes used in generic stats
*/
case class GenericStatAttributes(sport: Option[String] = None,
  classValue: Option[String] = None,
  statu45type: Option[String] = None,
  valueu45type: Option[String] = None,
  valueAttribute: Option[String] = None)


/** Attributes that are used in all tournament constructions.
*/
case class TournamentAttributes(status: Option[String] = None,
  minimumu45subparts: Option[BigInt] = None,
  maximumu45subparts: Option[BigInt] = None,
  number: Option[BigInt] = None)


case class SoccerActionAttributes(cautionu45value: Option[String] = None)


case class GolfActionAttributes(round: Option[BigInt] = None,
  hole: Option[BigInt] = None,
  strokes: Option[BigInt] = None,
  score: Option[BigInt] = None,
  scoreu45againstu45par: Option[BigInt] = None,
  club: Option[String] = None,
  startu45distance: Option[BigInt] = None,
  endu45distance: Option[BigInt] = None,
  landing: Option[String] = None)


case class BaseballActionAttributes(atu45batu45number: Option[BigInt] = None,
  balls: Option[BigInt] = None,
  batteru45advance: Option[BigInt] = None,
  batteru45side: Option[org.iptc.sportsml.v3.BodySideList] = None,
  earnedu45runsu45scored: Option[BigInt] = None,
  erroru45type: Option[String] = None,
  hitu45byu45pitchu45type: Option[org.iptc.sportsml.v3.Hitu45byu45pitchu45type] = None,
  hitu45location: Option[String] = None,
  hitu45type: Option[String] = None,
  inningu45exiting: Option[String] = None,
  inningu45half: Option[org.iptc.sportsml.v3.Inningu45half] = None,
  inningu45value: Option[BigInt] = None,
  interferenceu45type: Option[String] = None,
  leadu45entering: Option[String] = None,
  leadu45exiting: Option[String] = None,
  outu45type: Option[String] = None,
  outs: Option[BigInt] = None,
  outsu45recorded: Option[BigInt] = None,
  pitcheru45side: Option[org.iptc.sportsml.v3.BodySideList] = None,
  playu45scorekeepersu45notation: Option[String] = None,
  rbi: Option[BigInt] = None,
  runneru45onu45first: Option[Boolean] = None,
  runneru45onu45firstu45advance: Option[String] = None,
  runneru45onu45firstu45idref: Option[String] = None,
  runneru45onu45second: Option[Boolean] = None,
  runneru45onu45secondu45advance: Option[String] = None,
  runneru45onu45secondu45idref: Option[String] = None,
  runneru45onu45third: Option[Boolean] = None,
  runneru45onu45thirdu45advance: Option[String] = None,
  runneru45onu45thirdu45idref: Option[String] = None,
  runnersu45onu45base: Option[Boolean] = None,
  runsu45scored: Option[BigInt] = None,
  runsu45thisu45inningu45half: Option[BigInt] = None,
  sacrificeu45type: Option[String] = None,
  strikeoutu45type: Option[org.iptc.sportsml.v3.Strikeoutu45type] = None,
  strikes: Option[BigInt] = None,
  trajectoryu45coordinates: Option[String] = None,
  velocity: Option[String] = None,
  walku45type: Option[org.iptc.sportsml.v3.Walku45type] = None,
  ballu45location: Option[String] = None,
  ballu45locationu45horizontal: Option[String] = None,
  ballu45locationu45vertical: Option[String] = None,
  pitchu45type: Option[String] = None,
  pitchu45velocity: Option[BigDecimal] = None,
  pitchu45units: Option[org.iptc.sportsml.v3.Pitchu45units] = None,
  strikeu45type: Option[org.iptc.sportsml.v3.Strikeu45type] = None,
  umpireu45call: Option[org.iptc.sportsml.v3.Umpireu45call] = None)


case class StatAttributes(score: Option[String] = None,
  scoreu45opposing: Option[String] = None,
  scoreu45average: Option[String] = None,
  scoreu45opposingu45average: Option[String] = None,
  scoreu45units: Option[String] = None,
  scoreu45behind: Option[String] = None,
  scoreu45attempts: Option[String] = None,
  scoreu45attemptsu45opposing: Option[String] = None,
  scoreu45attemptsu45onu45goal: Option[String] = None,
  scoreu45attemptsu45onu45goalu45opposing: Option[String] = None,
  scoreu45percentage: Option[String] = None,
  scoreu45percentageu45opposing: Option[String] = None,
  resultu45effect: Option[String] = None,
  eventu45outcome: Option[String] = None,
  eventu45standingu45points: Option[String] = None,
  eventu45standingu45pointsu45against: Option[String] = None,
  scoreu45type: Option[String] = None,
  eventsu45remaining: Option[String] = None,
  timeu45ofu45possession: Option[String] = None,
  timeu45ofu45possessionu45percentage: Option[String] = None,
  timeu45ofu45possessionu45percentageu45opposing: Option[String] = None,
  timeu45ofu45possessionu45average: Option[String] = None,
  timeu45ofu45possessionu45averageu45opposing: Option[String] = None,
  seriesu45score: Option[String] = None,
  seriesu45scoreu45opposing: Option[String] = None,
  adjustedu45scoreu45for: Option[String] = None,
  adjustedu45scoreu45against: Option[String] = None)


case class CurlingEquipmentAttributes(stoneu45color: Option[String] = None,
  stoneu45id: Option[String] = None,
  stoneu45number: Option[BigInt] = None)


case class ParticipantAttributes(idref: String,
  teamu45idref: Option[String] = None,
  role: Option[String] = None,
  stoneu45color: Option[String] = None,
  stoneu45id: Option[String] = None,
  stoneu45number: Option[BigInt] = None)


case class ActionAttributes(id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  minutesu45elapsed: Option[String] = None,
  periodu45minuteu45elapsed: Option[String] = None,
  periodu45timeu45elapsed: Option[String] = None,
  periodu45timeu45remaining: Option[String] = None,
  teamu45idref: Option[String] = None,
  opposingu45teamu45idref: Option[String] = None,
  created: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  lastu45modified: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  dateu45time: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  result: Option[String] = None,
  sequenceu45number: Option[BigInt] = None,
  comment: Option[String] = None,
  typeValue: Option[String] = None,
  timeu45elapsed: Option[String] = None,
  timeu45remaining: Option[String] = None,
  playeru45count: Option[BigInt] = None,
  playeru45countu45opposing: Option[BigInt] = None,
  startu45location: Option[String] = None,
  endu45location: Option[String] = None,
  zone: Option[String] = None,
  poweru45playu45timeu45remaining: Option[String] = None,
  poweru45playu45advantage: Option[BigInt] = None,
  calleru45type: Option[String] = None,
  strength: Option[String] = None,
  points: Option[BigInt] = None,
  turnoveru45type: Option[String] = None,
  periodu45value: Option[String] = None,
  periodu45length: Option[String] = None,
  scoreu45team: Option[String] = None,
  scoreu45teamu45opposing: Option[String] = None,
  timeoutsu45left: Option[BigInt] = None,
  timeoutu45duration: Option[String] = None,
  timeoutu45type: Option[String] = None,
  scoreu45type: Option[String] = None,
  saveu45type: Option[String] = None,
  saveu45method: Option[String] = None,
  passu45type: Option[String] = None,
  passu45description: Option[String] = None,
  passu45method: Option[String] = None,
  shotu45type: Option[String] = None,
  shotu45distance: Option[Double] = None,
  shotu45distanceu45units: Option[String] = None,
  penaltyu45type: Option[String] = None,
  penaltyu45level: Option[String] = None,
  penaltyu45result: Option[String] = None,
  penaltyu45side: Option[String] = None,
  penaltyu45length: Option[String] = None,
  penaltyu45name: Option[String] = None,
  penaltyu45count: Option[BigInt] = None,
  penaltyu45status: Option[org.iptc.sportsml.v3.Penaltyu45status] = None,
  recipientu45type: Option[String] = None,
  scoreu45attemptu45type: Option[String] = None,
  scoreu45attemptu45result: Option[String] = None,
  scoreu45attemptu45side: Option[org.iptc.sportsml.v3.BodySideList] = None,
  scoreu45attemptu45method: Option[String] = None,
  scoreu45attemptu45situation: Option[String] = None,
  goalu45zone: Option[String] = None,
  angle: Option[String] = None,
  distance: Option[String] = None,
  bodyu45part: Option[String] = None,
  fieldu45location: Option[String] = None,
  goalu45location: Option[String] = None,
  timeu45addition: Option[String] = None,
  shootoutu45shotu45order: Option[BigInt] = None,
  faceoffu45winner: Option[String] = None,
  substitutionu45reason: Option[String] = None,
  touchdownu45type: Option[String] = None,
  clocku45state: Option[org.iptc.sportsml.v3.Clocku45stateType] = None,
  distanceu45foru451stu45down: Option[BigInt] = None,
  fieldu45side: Option[org.iptc.sportsml.v3.Fieldu45sideType] = None,
  fieldu45line: Option[BigInt] = None,
  driveu45plays: Option[BigInt] = None,
  driveu45yards: Option[BigInt] = None,
  driveu45duration: Option[javax.xml.datatype.Duration] = None,
  driveu45result: Option[String] = None,
  down: Option[BigInt] = None,
  yardsu45gained: Option[BigInt] = None,
  penaltyu45yards: Option[String] = None,
  penaltyu45acceptance: Option[String] = None,
  penaltyu45challenge: Option[String] = None,
  penaltyu45review: Option[String] = None,
  penaltyu45reviewu45ruling: Option[String] = None,
  kicku45type: Option[String] = None,
  atu45batu45number: Option[BigInt] = None,
  balls: Option[BigInt] = None,
  batteru45advance: Option[BigInt] = None,
  batteru45side: Option[org.iptc.sportsml.v3.BodySideList] = None,
  earnedu45runsu45scored: Option[BigInt] = None,
  erroru45type: Option[String] = None,
  hitu45byu45pitchu45type: Option[org.iptc.sportsml.v3.Hitu45byu45pitchu45type] = None,
  hitu45location: Option[String] = None,
  hitu45type: Option[String] = None,
  inningu45exiting: Option[String] = None,
  inningu45half: Option[org.iptc.sportsml.v3.Inningu45half] = None,
  inningu45value: Option[BigInt] = None,
  interferenceu45type: Option[String] = None,
  leadu45entering: Option[String] = None,
  leadu45exiting: Option[String] = None,
  outu45type: Option[String] = None,
  outs: Option[BigInt] = None,
  outsu45recorded: Option[BigInt] = None,
  pitcheru45side: Option[org.iptc.sportsml.v3.BodySideList] = None,
  playu45scorekeepersu45notation: Option[String] = None,
  rbi: Option[BigInt] = None,
  runneru45onu45first: Option[Boolean] = None,
  runneru45onu45firstu45advance: Option[String] = None,
  runneru45onu45firstu45idref: Option[String] = None,
  runneru45onu45second: Option[Boolean] = None,
  runneru45onu45secondu45advance: Option[String] = None,
  runneru45onu45secondu45idref: Option[String] = None,
  runneru45onu45third: Option[Boolean] = None,
  runneru45onu45thirdu45advance: Option[String] = None,
  runneru45onu45thirdu45idref: Option[String] = None,
  runnersu45onu45base: Option[Boolean] = None,
  runsu45scored: Option[BigInt] = None,
  runsu45thisu45inningu45half: Option[BigInt] = None,
  sacrificeu45type: Option[String] = None,
  strikeoutu45type: Option[org.iptc.sportsml.v3.Strikeoutu45type] = None,
  strikes: Option[BigInt] = None,
  trajectoryu45coordinates: Option[String] = None,
  velocity: Option[String] = None,
  walku45type: Option[org.iptc.sportsml.v3.Walku45type] = None,
  ballu45location: Option[String] = None,
  ballu45locationu45horizontal: Option[String] = None,
  ballu45locationu45vertical: Option[String] = None,
  pitchu45type: Option[String] = None,
  pitchu45velocity: Option[BigDecimal] = None,
  pitchu45units: Option[org.iptc.sportsml.v3.Pitchu45units] = None,
  strikeu45type: Option[org.iptc.sportsml.v3.Strikeu45type] = None,
  umpireu45call: Option[org.iptc.sportsml.v3.Umpireu45call] = None,
  endu45number: Option[BigInt] = None,
  stoneu45number: Option[BigInt] = None,
  timeu45used: Option[String] = None,
  turn: Option[org.iptc.sportsml.v3.Turn] = None,
  stoneu45speed: Option[String] = None,
  round: Option[BigInt] = None,
  hole: Option[BigInt] = None,
  strokes: Option[BigInt] = None,
  score: Option[BigInt] = None,
  scoreu45againstu45par: Option[BigInt] = None,
  club: Option[String] = None,
  startu45distance: Option[BigInt] = None,
  endu45distance: Option[BigInt] = None,
  landing: Option[String] = None,
  lap: Option[BigInt] = None,
  lapsu45remaining: Option[BigInt] = None,
  flagu45state: Option[String] = None,
  flagu45original: Option[String] = None,
  flagu45new: Option[String] = None,
  passeru45type: Option[String] = None,
  passeru45key: Option[String] = None,
  positionu45original: Option[String] = None,
  positionu45new: Option[String] = None,
  cautionu45value: Option[String] = None,
  set: Option[BigInt] = None,
  game: Option[BigInt] = None,
  winu45type: Option[org.iptc.sportsml.v3.Winu45type] = None,
  serveru45score: Option[String] = None,
  receiveru45score: Option[String] = None,
  serveu45number: Option[String] = None)


case class CommonParticipantAttributes(idref: String,
  teamu45idref: Option[String] = None,
  role: Option[String] = None)


case class CoverageAttributes(statsu45coverage: Option[String] = None,
  teamu45coverage: Option[org.iptc.sportsml.v3.Teamu45coverage] = None,
  durationu45scope: Option[String] = None,
  alignmentu45scope: Option[org.iptc.sportsml.v3.Alignmentu45scope] = None,
  position: Option[String] = None,
  recordu45makingu45scope: Option[String] = None,
  scopingu45label: Option[String] = None,
  periodu45value: Option[String] = None,
  periodu45type: Option[String] = None,
  startu45dateu45time: Option[String] = None,
  endu45dateu45time: Option[String] = None,
  periodu45startu45dateu45time: Option[String] = None,
  periodu45endu45dateu45time: Option[String] = None,
  temporalu45unitu45type: Option[String] = None,
  temporalu45unitu45value: Option[String] = None,
  eventu45span: Option[BigInt] = None,
  opponentu45value: Option[String] = None,
  opponentu45type: Option[String] = None,
  team: Option[String] = None,
  competition: Option[String] = None,
  unitu45value: Option[String] = None,
  unitu45type: Option[String] = None,
  situation: Option[String] = None,
  locationu45key: Option[String] = None,
  venueu45type: Option[String] = None,
  surfaceu45type: Option[String] = None,
  weatheru45type: Option[String] = None,
  scopeu45value: Option[String] = None,
  distance: Option[String] = None,
  distanceu45maximum: Option[String] = None,
  distanceu45minimum: Option[String] = None,
  measurementu45units: Option[String] = None)


case class AmericanFootballActionAttributes(touchdownu45type: Option[String] = None,
  clocku45state: Option[org.iptc.sportsml.v3.Clocku45stateType] = None,
  distanceu45foru451stu45down: Option[BigInt] = None,
  fieldu45side: Option[org.iptc.sportsml.v3.Fieldu45sideType] = None,
  fieldu45line: Option[BigInt] = None,
  driveu45plays: Option[BigInt] = None,
  driveu45yards: Option[BigInt] = None,
  driveu45duration: Option[javax.xml.datatype.Duration] = None,
  driveu45result: Option[String] = None,
  down: Option[BigInt] = None,
  yardsu45gained: Option[BigInt] = None,
  penaltyu45yards: Option[String] = None,
  penaltyu45acceptance: Option[String] = None,
  penaltyu45challenge: Option[String] = None,
  penaltyu45review: Option[String] = None,
  penaltyu45reviewu45ruling: Option[String] = None,
  kicku45type: Option[String] = None)


case class CurlingActionAttributes(endu45number: Option[BigInt] = None,
  stoneu45number: Option[BigInt] = None,
  timeu45used: Option[String] = None,
  turn: Option[org.iptc.sportsml.v3.Turn] = None,
  stoneu45speed: Option[String] = None)


case class MotorRacingActionAttributes(lap: Option[BigInt] = None,
  lapsu45remaining: Option[BigInt] = None,
  flagu45state: Option[String] = None,
  flagu45original: Option[String] = None,
  flagu45new: Option[String] = None,
  passeru45type: Option[String] = None,
  passeru45key: Option[String] = None,
  positionu45original: Option[String] = None,
  positionu45new: Option[String] = None)


case class TennisActionAttributes(set: Option[BigInt] = None,
  game: Option[BigInt] = None,
  winu45type: Option[org.iptc.sportsml.v3.Winu45type] = None,
  serveru45score: Option[String] = None,
  receiveru45score: Option[String] = None,
  serveu45number: Option[String] = None)


case class CommonAttributes(id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None)


/** Basic wagering attributes, used in all wagering elements
*/
case class WageringAttributes(bookmakeru45key: Option[String] = None,
  bookmakeru45name: Option[String] = None,
  rotationu45key: Option[String] = None,
  comment: Option[String] = None,
  dateu45time: Option[String] = None,
  context: Option[org.iptc.sportsml.v3.Context] = None)


case class Wagering3Attributes(bookmakeru45key: Option[String] = None,
  bookmakeru45name: Option[String] = None,
  rotationu45key: Option[String] = None,
  comment: Option[String] = None,
  dateu45time: Option[String] = None,
  context: Option[org.iptc.sportsml.v3.Context] = None,
  prediction: Option[String] = None,
  predictionu45opening: Option[String] = None,
  vigorish: Option[String] = None,
  line: Option[String] = None,
  lineu45opening: Option[String] = None)

