// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package org.iptc.sportsml.v3


/** Metadata about the event itself. | Includes what state the game is in.
*/
case class MotorRacingEventMetadataComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EventMetadataComplexTypeOption {
  lazy val lap = attributes.get("@lap") map { _.as[String]}
  lazy val lapsu45remaining = attributes.get("@laps-remaining") map { _.as[String]}
  lazy val timeu45elapsed = attributes.get("@time-elapsed") map { _.as[String]}
  lazy val flagu45state = attributes.get("@flag-state") map { _.as[String]}
}

      


/** Metadata about the team. | Specific to the sport of motor racing.
*/
case class MotorRacingTeamMetadataComplexType(metadatau45motoru45racingu45vehicle: Option[org.iptc.sportsml.v3.MotorRacingMetadataVehicleComplexType] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends TeamMetadataComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
}

      


/** Metadata about the driver. | Specific to the sport of motor racing.
*/
case class MotorRacingPlayerMetadataComplexType(metadatau45motoru45racingu45vehicle: Option[org.iptc.sportsml.v3.MotorRacingMetadataVehicleComplexType] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends PlayerMetadataComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
}

      


/** Metadata about the associate. | Specific to the sport of motor racing.
*/
case class MotorRacingAssociateMetadataComplexType(metadatau45motoru45racingu45vehicle: Option[org.iptc.sportsml.v3.MotorRacingMetadataVehicleComplexType] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends AssociateMetadataComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
}

      


/** Details on the car, motorcycle, etc., being driven. | Includes manufacturing information.
*/
case class MotorRacingMetadataVehicleComplexType(makeu45name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val number = attributes.get("@number") map { _.as[String]}
  lazy val makeu45key = attributes.get("@make-key") map { _.as[String]}
  lazy val sponsor = attributes.get("@sponsor") map { _.as[String]}
  lazy val chassis = attributes.get("@chassis") map { _.as[String]}
  lazy val engine = attributes.get("@engine") map { _.as[String]}
  lazy val tire = attributes.get("@tire") map { _.as[String]}
}

      


/** Specific statistics for motor racing. | Includes stats about the qualifying round, as well as for the race itself.
*/
case class MotorRacingTeamStatsComplexType(statsu45motoru45racingu45qualifying: Seq[org.iptc.sportsml.v3.MotorRacingStatsQualifyingComplexType] = Nil,
  statsu45motoru45racingu45race: Seq[org.iptc.sportsml.v3.MotorRacingStatsRaceComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseMotorRacingPlayerStatsComplexTypable with TeamStatsComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
}

      


/** Specific statistics for motor racing. | Includes stats about the qualifying round, as well as for the race itself.
*/
case class MotorRacingPlayerStatsComplexType(statsu45motoru45racingu45qualifying: Seq[org.iptc.sportsml.v3.MotorRacingStatsQualifyingComplexType] = Nil,
  statsu45motoru45racingu45race: Seq[org.iptc.sportsml.v3.MotorRacingStatsRaceComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseMotorRacingPlayerStatsComplexTypable with PlayerStatsComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
}

      


/** Specific statistics for motor racing. | Includes stats about the qualifying round, as well as for the race itself.
*/
trait BaseMotorRacingPlayerStatsComplexTypable {
  def statsu45motoru45racingu45qualifying: Seq[org.iptc.sportsml.v3.MotorRacingStatsQualifyingComplexType]
  def statsu45motoru45racingu45race: Seq[org.iptc.sportsml.v3.MotorRacingStatsRaceComplexType]
  def id: Option[String]
  def classValue: Option[String]
  def style: Option[String]
  def statsu45coverage: Option[String]
  def teamu45coverage: Option[org.iptc.sportsml.v3.Teamu45coverage]
  def durationu45scope: Option[String]
  def alignmentu45scope: Option[org.iptc.sportsml.v3.Alignmentu45scope]
  def position: Option[String]
  def recordu45makingu45scope: Option[String]
  def scopingu45label: Option[String]
  def periodu45value: Option[String]
  def periodu45type: Option[String]
  def startu45dateu45time: Option[String]
  def endu45dateu45time: Option[String]
  def periodu45startu45dateu45time: Option[String]
  def periodu45endu45dateu45time: Option[String]
  def temporalu45unitu45type: Option[String]
  def temporalu45unitu45value: Option[String]
  def eventu45span: Option[BigInt]
  def opponentu45value: Option[String]
  def opponentu45type: Option[String]
  def team: Option[String]
  def competition: Option[String]
  def unitu45value: Option[String]
  def unitu45type: Option[String]
  def situation: Option[String]
  def locationu45key: Option[String]
  def venueu45type: Option[String]
  def surfaceu45type: Option[String]
  def weatheru45type: Option[String]
  def scopeu45value: Option[String]
  def distance: Option[String]
  def distanceu45maximum: Option[String]
  def distanceu45minimum: Option[String]
  def measurementu45units: Option[String]
}


/** Specific statistics for motor racing. | Includes stats about the qualifying round, as well as for the race itself.
*/
case class BaseMotorRacingPlayerStatsComplexType(statsu45motoru45racingu45qualifying: Seq[org.iptc.sportsml.v3.MotorRacingStatsQualifyingComplexType] = Nil,
  statsu45motoru45racingu45race: Seq[org.iptc.sportsml.v3.MotorRacingStatsRaceComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseMotorRacingPlayerStatsComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
}

      


/** Statistics about the event itself. | Includes the total number of lead changes, and the average speed.
*/
case class MotorRacingEventStatsComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EventStatsComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val speedu45averageu45race = attributes.get("@speed-average-race") map { _.as[String]}
  lazy val speedu45units = attributes.get("@speed-units") map { _.as[String]}
  lazy val leadu45changes = attributes.get("@lead-changes") map { _.as[String]}
  lazy val leadu45changesu45drivers = attributes.get("@lead-changes-drivers") map { _.as[String]}
  lazy val marginu45ofu45victory = attributes.get("@margin-of-victory") map { _.as[String]}
  lazy val cautionu45flags = attributes.get("@caution-flags") map { _.as[String]}
  lazy val cautionu45flagsu45laps = attributes.get("@caution-flags-laps") map { _.as[String]}
  lazy val lapsu45total = attributes.get("@laps-total") map { _.as[String]}
  lazy val distanceu45lap = attributes.get("@distance-lap") map { _.as[String]}
  lazy val distanceu45total = attributes.get("@distance-total") map { _.as[String]}
  lazy val distanceu45units = attributes.get("@distance-units") map { _.as[String]}
}

      


/** Statistics for the qualifying round of a race. | Includes pole position and qualifying times.
*/
case class MotorRacingStatsQualifyingComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val grid = attributes.get("@grid") map { _.as[String]}
  lazy val poleu45position = attributes.get("@pole-position") map { _.as[String]}
  lazy val poleu45wins = attributes.get("@pole-wins") map { _.as[String]}
  lazy val qualifyingu45speed = attributes.get("@qualifying-speed") map { _.as[String]}
  lazy val qualifyingu45speedu45units = attributes.get("@qualifying-speed-units") map { _.as[String]}
  lazy val qualifyingu45time = attributes.get("@qualifying-time") map { _.as[String]}
  lazy val qualifyingu45position = attributes.get("@qualifying-position") map { _.as[String]}
}

      


/** Statistics for the race itself. | Includes time information and can include cumulative stats for the driver or team.
*/
case class MotorRacingStatsRaceComplexType(statsu45motoru45racingu45lap: Seq[org.iptc.sportsml.v3.MotorRacingStatsLapComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val timeu45behindu45leader = attributes.get("@time-behind-leader") map { _.as[String]}
  lazy val lapsu45behindu45leader = attributes.get("@laps-behind-leader") map { _.as[String]}
  lazy val timeu45aheadu45follower = attributes.get("@time-ahead-follower") map { _.as[String]}
  lazy val lapsu45aheadu45follower = attributes.get("@laps-ahead-follower") map { _.as[String]}
  lazy val time = attributes.get("@time") map { _.as[String]}
  lazy val points = attributes.get("@points") map { _.as[String]}
  lazy val pointsu45rookie = attributes.get("@points-rookie") map { _.as[String]}
  lazy val bonus = attributes.get("@bonus") map { _.as[String]}
  lazy val lapsu45completed = attributes.get("@laps-completed") map { _.as[String]}
  lazy val lapsu45leadingu45total = attributes.get("@laps-leading-total") map { _.as[String]}
  lazy val distanceu45leading = attributes.get("@distance-leading") map { _.as[String]}
  lazy val distanceu45completed = attributes.get("@distance-completed") map { _.as[String]}
  lazy val distanceu45units = attributes.get("@distance-units") map { _.as[String]}
  lazy val speedu45average = attributes.get("@speed-average") map { _.as[String]}
  lazy val speedu45units = attributes.get("@speed-units") map { _.as[String]}
  lazy val status = attributes.get("@status") map { _.as[String]}
  lazy val finishesu45topu455 = attributes.get("@finishes-top-5") map { _.as[String]}
  lazy val finishesu45topu4510 = attributes.get("@finishes-top-10") map { _.as[String]}
  lazy val starts = attributes.get("@starts") map { _.as[String]}
  lazy val finishes = attributes.get("@finishes") map { _.as[String]}
  lazy val nonu45finishes = attributes.get("@non-finishes") map { _.as[String]}
  lazy val wins = attributes.get("@wins") map { _.as[String]}
  lazy val racesu45leading = attributes.get("@races-leading") map { _.as[String]}
  lazy val money = attributes.get("@money") map { _.as[String]}
  lazy val moneyu45units = attributes.get("@money-units") map { _.as[String]}
  lazy val leadsu45total = attributes.get("@leads-total") map { _.as[String]}
  lazy val comment = attributes.get("@comment") map { _.as[String]}
}

      


/** Statistics for a particular lap. | Can be used for all laps in a race, or just say for the fastest lap.
*/
case class MotorRacingStatsLapComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val speedu45range = attributes.get("@speed-range") map { _.as[String]}
  lazy val lapu45number = attributes.get("@lap-number") map { _.as[String]}
  lazy val startu45timeu45elapsed = attributes.get("@start-time-elapsed") map { _.as[String]}
  lazy val speedu45averageu45lap = attributes.get("@speed-average-lap") map { _.as[String]}
  lazy val speedu45units = attributes.get("@speed-units") map { _.as[String]}
  lazy val duration = attributes.get("@duration") map { _.as[String]}
  lazy val splitu45location = attributes.get("@split-location") map { _.as[String]}
}

      


case class EventStateMotorRacing(lap: Option[String] = None,
  lapsu45remaining: Option[String] = None,
  timeu45elapsed: Option[String] = None,
  flagu45state: Option[String] = None)

