// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package org.iptc.sportsml.v3


/** NewsML-G2 2.22 XML Schema, document version 1Date of creation/approval of this XML Schema version: 2015-10-26Any changes applied to this version of the XML Schema can be found at http://dev.iptc.org/G2-Approved-ChangesDate of creation of this XML Schema document version: 2015-12-01Schema design created for the IPTC in 2008 by Jay Cousins, RivCom Ltd (jay.cousins@rivcom.com),  Ulf Wingstedt, CNet Svenska AB (ulf.wingstedt@cnet.se)Schema maintained for the IPTC by Michael Steidl (IPTC), prior to 2009 by Laurent Le Meur (AFP) 
*/


case class ConceptItem(any: Option[scalaxb.DataRecord[Any]] = None,
  anyitemtypeoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.AnyItemTypeOption]] = Nil,
  hopHistory: Option[org.iptc.sportsml.v3.HopHistory] = None,
  rightsInfo: Seq[org.iptc.sportsml.v3.RightsInfoType] = Nil,
  itemMeta: org.iptc.sportsml.v3.ItemMetadataType,
  contentMeta: Option[org.iptc.sportsml.v3.ContentMetadataAcDType] = None,
  assert: Seq[org.iptc.sportsml.v3.AssertType] = Nil,
  inlineRef: Seq[org.iptc.sportsml.v3.InlineRef] = Nil,
  derivedFrom: Seq[org.iptc.sportsml.v3.DerivedFrom] = Nil,
  concept: Option[org.iptc.sportsml.v3.Concept] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends AnyItemType {
  lazy val standard = attributes("@standard").as[String]
  lazy val standardversion = attributes("@standardversion").as[String]
  lazy val conformance = attributes("@conformance").as[String]
  lazy val guid = attributes("@guid").as[String]
  lazy val version = attributes("@version").as[BigInt]
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      


case class KnowledgeItem(any: Option[scalaxb.DataRecord[Any]] = None,
  anyitemtypeoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.AnyItemTypeOption]] = Nil,
  hopHistory: Option[org.iptc.sportsml.v3.HopHistory] = None,
  rightsInfo: Seq[org.iptc.sportsml.v3.RightsInfoType] = Nil,
  itemMeta: org.iptc.sportsml.v3.ItemMetadataType,
  contentMeta: Option[org.iptc.sportsml.v3.ContentMetadataAcDType] = None,
  partMeta: Seq[org.iptc.sportsml.v3.PartMetaPropType] = Nil,
  assert: Seq[org.iptc.sportsml.v3.AssertType] = Nil,
  inlineRef: Seq[org.iptc.sportsml.v3.InlineRef] = Nil,
  derivedFrom: Seq[org.iptc.sportsml.v3.DerivedFrom] = Nil,
  conceptSet: Option[org.iptc.sportsml.v3.ConceptSet] = None,
  schemeMeta: Option[org.iptc.sportsml.v3.SchemeMeta] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends AnyItemType {
  lazy val standard = attributes("@standard").as[String]
  lazy val standardversion = attributes("@standardversion").as[String]
  lazy val conformance = attributes("@conformance").as[String]
  lazy val guid = attributes("@guid").as[String]
  lazy val version = attributes("@version").as[BigInt]
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      


case class ConceptSet(concept: Seq[org.iptc.sportsml.v3.Concept] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


case class SchemeMeta(schememetaoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.SchemeMetaOption]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val uri = attributes("@uri").as[java.net.URI]
  lazy val preferredalias = attributes.get("@preferredalias") map { _.as[String]}
  lazy val authority = attributes.get("@authority") map { _.as[java.net.URI]}
  lazy val concepttype = attributes.get("@concepttype") map { _.as[Seq[String]]}
}

      

trait SchemeMetaOption

case class NewsItem(any: Option[scalaxb.DataRecord[Any]] = None,
  anyitemtypeoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.AnyItemTypeOption]] = Nil,
  hopHistory: Option[org.iptc.sportsml.v3.HopHistory] = None,
  rightsInfo: Seq[org.iptc.sportsml.v3.RightsInfoType] = Nil,
  itemMeta: org.iptc.sportsml.v3.ItemMetadataType,
  contentMeta: Option[org.iptc.sportsml.v3.ContentMetadataAfDType] = None,
  partMeta: Seq[org.iptc.sportsml.v3.PartMetaPropType] = Nil,
  assert: Seq[org.iptc.sportsml.v3.AssertType] = Nil,
  inlineRef: Seq[org.iptc.sportsml.v3.InlineRef] = Nil,
  derivedFrom: Seq[org.iptc.sportsml.v3.DerivedFrom] = Nil,
  contentSet: Option[org.iptc.sportsml.v3.ContentSet] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends AnyItemType {
  lazy val standard = attributes("@standard").as[String]
  lazy val standardversion = attributes("@standardversion").as[String]
  lazy val conformance = attributes("@conformance").as[String]
  lazy val guid = attributes("@guid").as[String]
  lazy val version = attributes("@version").as[BigInt]
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      


case class InlineXML(any: Option[scalaxb.DataRecord[Any]] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends ContentSetOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val rendition = attributes.get("@rendition") map { _.as[String]}
  lazy val renditionuri = attributes.get("@renditionuri") map { _.as[java.net.URI]}
  lazy val generator = attributes.get("@generator") map { _.as[String]}
  lazy val generated = attributes.get("@generated") map { _.as[String]}
  lazy val hascontent = attributes.get("@hascontent") map { _.as[Boolean]}
  lazy val contenttype = attributes.get("@contenttype") map { _.as[String]}
  lazy val format = attributes.get("@format") map { _.as[String]}
  lazy val formaturi = attributes.get("@formaturi") map { _.as[java.net.URI]}
  lazy val wordcount = attributes.get("@wordcount") map { _.as[BigInt]}
  lazy val linecount = attributes.get("@linecount") map { _.as[BigInt]}
  lazy val pagecount = attributes.get("@pagecount") map { _.as[BigInt]}
  lazy val width = attributes.get("@width") map { _.as[BigInt]}
  lazy val widthunit = attributes.get("@widthunit") map { _.as[String]}
  lazy val widthunituri = attributes.get("@widthunituri") map { _.as[java.net.URI]}
  lazy val height = attributes.get("@height") map { _.as[BigInt]}
  lazy val heightunit = attributes.get("@heightunit") map { _.as[String]}
  lazy val heightunituri = attributes.get("@heightunituri") map { _.as[java.net.URI]}
  lazy val orientation = attributes.get("@orientation") map { _.as[BigInt]}
  lazy val layoutorientation = attributes.get("@layoutorientation") map { _.as[String]}
  lazy val layoutorientationuri = attributes.get("@layoutorientationuri") map { _.as[java.net.URI]}
  lazy val colourspace = attributes.get("@colourspace") map { _.as[String]}
  lazy val colourspaceuri = attributes.get("@colourspaceuri") map { _.as[java.net.URI]}
  lazy val colourindicator = attributes.get("@colourindicator") map { _.as[String]}
  lazy val colourindicatoruri = attributes.get("@colourindicatoruri") map { _.as[java.net.URI]}
  lazy val colourdepth = attributes.get("@colourdepth") map { _.as[BigInt]}
  lazy val resolution = attributes.get("@resolution") map { _.as[BigInt]}
  lazy val duration = attributes.get("@duration") map { _.as[String]}
  lazy val durationunit = attributes.get("@durationunit") map { _.as[String]}
  lazy val durationunituri = attributes.get("@durationunituri") map { _.as[java.net.URI]}
  lazy val audiocodec = attributes.get("@audiocodec") map { _.as[String]}
  lazy val audiocodecuri = attributes.get("@audiocodecuri") map { _.as[java.net.URI]}
  lazy val audiobitrate = attributes.get("@audiobitrate") map { _.as[BigInt]}
  lazy val audiovbr = attributes.get("@audiovbr") map { _.as[Boolean]}
  lazy val audiosamplesize = attributes.get("@audiosamplesize") map { _.as[BigInt]}
  lazy val audiosamplerate = attributes.get("@audiosamplerate") map { _.as[BigInt]}
  lazy val audiochannels = attributes.get("@audiochannels") map { _.as[String]}
  lazy val audiochannelsuri = attributes.get("@audiochannelsuri") map { _.as[java.net.URI]}
  lazy val videocodec = attributes.get("@videocodec") map { _.as[String]}
  lazy val videocodecuri = attributes.get("@videocodecuri") map { _.as[java.net.URI]}
  lazy val videoavgbitrate = attributes.get("@videoavgbitrate") map { _.as[BigInt]}
  lazy val videovbr = attributes.get("@videovbr") map { _.as[Boolean]}
  lazy val videoframerate = attributes.get("@videoframerate") map { _.as[BigDecimal]}
  lazy val videoscan = attributes.get("@videoscan") map { _.as[Videoscan]}
  lazy val videoaspectratio = attributes.get("@videoaspectratio") map { _.as[String]}
  lazy val videosampling = attributes.get("@videosampling") map { _.as[String]}
  lazy val videoscaling = attributes.get("@videoscaling") map { _.as[String]}
  lazy val videoscalinguri = attributes.get("@videoscalinguri") map { _.as[java.net.URI]}
  lazy val videodefinition = attributes.get("@videodefinition") map { _.as[String]}
  lazy val videodefinitionuri = attributes.get("@videodefinitionuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      


case class InlineData(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends ContentSetOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val rendition = attributes.get("@rendition") map { _.as[String]}
  lazy val renditionuri = attributes.get("@renditionuri") map { _.as[java.net.URI]}
  lazy val generator = attributes.get("@generator") map { _.as[String]}
  lazy val generated = attributes.get("@generated") map { _.as[String]}
  lazy val hascontent = attributes.get("@hascontent") map { _.as[Boolean]}
  lazy val contenttype = attributes.get("@contenttype") map { _.as[String]}
  lazy val format = attributes.get("@format") map { _.as[String]}
  lazy val formaturi = attributes.get("@formaturi") map { _.as[java.net.URI]}
  lazy val encoding = attributes.get("@encoding") map { _.as[String]}
  lazy val encodinguri = attributes.get("@encodinguri") map { _.as[java.net.URI]}
  lazy val wordcount = attributes.get("@wordcount") map { _.as[BigInt]}
  lazy val linecount = attributes.get("@linecount") map { _.as[BigInt]}
  lazy val pagecount = attributes.get("@pagecount") map { _.as[BigInt]}
  lazy val width = attributes.get("@width") map { _.as[BigInt]}
  lazy val widthunit = attributes.get("@widthunit") map { _.as[String]}
  lazy val widthunituri = attributes.get("@widthunituri") map { _.as[java.net.URI]}
  lazy val height = attributes.get("@height") map { _.as[BigInt]}
  lazy val heightunit = attributes.get("@heightunit") map { _.as[String]}
  lazy val heightunituri = attributes.get("@heightunituri") map { _.as[java.net.URI]}
  lazy val orientation = attributes.get("@orientation") map { _.as[BigInt]}
  lazy val layoutorientation = attributes.get("@layoutorientation") map { _.as[String]}
  lazy val layoutorientationuri = attributes.get("@layoutorientationuri") map { _.as[java.net.URI]}
  lazy val colourspace = attributes.get("@colourspace") map { _.as[String]}
  lazy val colourspaceuri = attributes.get("@colourspaceuri") map { _.as[java.net.URI]}
  lazy val colourindicator = attributes.get("@colourindicator") map { _.as[String]}
  lazy val colourindicatoruri = attributes.get("@colourindicatoruri") map { _.as[java.net.URI]}
  lazy val colourdepth = attributes.get("@colourdepth") map { _.as[BigInt]}
  lazy val resolution = attributes.get("@resolution") map { _.as[BigInt]}
  lazy val duration = attributes.get("@duration") map { _.as[String]}
  lazy val durationunit = attributes.get("@durationunit") map { _.as[String]}
  lazy val durationunituri = attributes.get("@durationunituri") map { _.as[java.net.URI]}
  lazy val audiocodec = attributes.get("@audiocodec") map { _.as[String]}
  lazy val audiocodecuri = attributes.get("@audiocodecuri") map { _.as[java.net.URI]}
  lazy val audiobitrate = attributes.get("@audiobitrate") map { _.as[BigInt]}
  lazy val audiovbr = attributes.get("@audiovbr") map { _.as[Boolean]}
  lazy val audiosamplesize = attributes.get("@audiosamplesize") map { _.as[BigInt]}
  lazy val audiosamplerate = attributes.get("@audiosamplerate") map { _.as[BigInt]}
  lazy val audiochannels = attributes.get("@audiochannels") map { _.as[String]}
  lazy val audiochannelsuri = attributes.get("@audiochannelsuri") map { _.as[java.net.URI]}
  lazy val videocodec = attributes.get("@videocodec") map { _.as[String]}
  lazy val videocodecuri = attributes.get("@videocodecuri") map { _.as[java.net.URI]}
  lazy val videoavgbitrate = attributes.get("@videoavgbitrate") map { _.as[BigInt]}
  lazy val videovbr = attributes.get("@videovbr") map { _.as[Boolean]}
  lazy val videoframerate = attributes.get("@videoframerate") map { _.as[BigDecimal]}
  lazy val videoscan = attributes.get("@videoscan") map { _.as[Videoscan]}
  lazy val videoaspectratio = attributes.get("@videoaspectratio") map { _.as[String]}
  lazy val videosampling = attributes.get("@videosampling") map { _.as[String]}
  lazy val videoscaling = attributes.get("@videoscaling") map { _.as[String]}
  lazy val videoscalinguri = attributes.get("@videoscalinguri") map { _.as[java.net.URI]}
  lazy val videodefinition = attributes.get("@videodefinition") map { _.as[String]}
  lazy val videodefinitionuri = attributes.get("@videodefinitionuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      


case class ContentSet(contentsetoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ContentSetOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val original = attributes.get("@original") map { _.as[String]}
}

      

trait ContentSetOption

case class Channel(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val chnlid = attributes.get("@chnlid") map { _.as[BigInt]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val role = attributes.get("@role") map { _.as[String]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[java.net.URI]}
  lazy val language = attributes.get("@language") map { _.as[String]}
  lazy val wordcount = attributes.get("@wordcount") map { _.as[BigInt]}
  lazy val linecount = attributes.get("@linecount") map { _.as[BigInt]}
  lazy val pagecount = attributes.get("@pagecount") map { _.as[BigInt]}
  lazy val width = attributes.get("@width") map { _.as[BigInt]}
  lazy val widthunit = attributes.get("@widthunit") map { _.as[String]}
  lazy val widthunituri = attributes.get("@widthunituri") map { _.as[java.net.URI]}
  lazy val height = attributes.get("@height") map { _.as[BigInt]}
  lazy val heightunit = attributes.get("@heightunit") map { _.as[String]}
  lazy val heightunituri = attributes.get("@heightunituri") map { _.as[java.net.URI]}
  lazy val orientation = attributes.get("@orientation") map { _.as[BigInt]}
  lazy val layoutorientation = attributes.get("@layoutorientation") map { _.as[String]}
  lazy val layoutorientationuri = attributes.get("@layoutorientationuri") map { _.as[java.net.URI]}
  lazy val colourspace = attributes.get("@colourspace") map { _.as[String]}
  lazy val colourspaceuri = attributes.get("@colourspaceuri") map { _.as[java.net.URI]}
  lazy val colourindicator = attributes.get("@colourindicator") map { _.as[String]}
  lazy val colourindicatoruri = attributes.get("@colourindicatoruri") map { _.as[java.net.URI]}
  lazy val colourdepth = attributes.get("@colourdepth") map { _.as[BigInt]}
  lazy val resolution = attributes.get("@resolution") map { _.as[BigInt]}
  lazy val duration = attributes.get("@duration") map { _.as[String]}
  lazy val durationunit = attributes.get("@durationunit") map { _.as[String]}
  lazy val durationunituri = attributes.get("@durationunituri") map { _.as[java.net.URI]}
  lazy val audiocodec = attributes.get("@audiocodec") map { _.as[String]}
  lazy val audiocodecuri = attributes.get("@audiocodecuri") map { _.as[java.net.URI]}
  lazy val audiobitrate = attributes.get("@audiobitrate") map { _.as[BigInt]}
  lazy val audiovbr = attributes.get("@audiovbr") map { _.as[Boolean]}
  lazy val audiosamplesize = attributes.get("@audiosamplesize") map { _.as[BigInt]}
  lazy val audiosamplerate = attributes.get("@audiosamplerate") map { _.as[BigInt]}
  lazy val audiochannels = attributes.get("@audiochannels") map { _.as[String]}
  lazy val audiochannelsuri = attributes.get("@audiochannelsuri") map { _.as[java.net.URI]}
  lazy val videocodec = attributes.get("@videocodec") map { _.as[String]}
  lazy val videocodecuri = attributes.get("@videocodecuri") map { _.as[java.net.URI]}
  lazy val videoavgbitrate = attributes.get("@videoavgbitrate") map { _.as[BigInt]}
  lazy val videovbr = attributes.get("@videovbr") map { _.as[Boolean]}
  lazy val videoframerate = attributes.get("@videoframerate") map { _.as[BigDecimal]}
  lazy val videoscan = attributes.get("@videoscan") map { _.as[Videoscan]}
  lazy val videoaspectratio = attributes.get("@videoaspectratio") map { _.as[String]}
  lazy val videosampling = attributes.get("@videosampling") map { _.as[String]}
  lazy val videoscaling = attributes.get("@videoscaling") map { _.as[String]}
  lazy val videoscalinguri = attributes.get("@videoscalinguri") map { _.as[java.net.URI]}
  lazy val videodefinition = attributes.get("@videodefinition") map { _.as[String]}
  lazy val videodefinitionuri = attributes.get("@videodefinitionuri") map { _.as[java.net.URI]}
  lazy val g2flag = attributes("@g2flag").as[String]
}

      


/**  A type representing the structure of the remoteContent property
*/
case class RemoteContentPropType(channel: Seq[org.iptc.sportsml.v3.Channel] = Nil,
  altId: Seq[org.iptc.sportsml.v3.AltId] = Nil,
  altLoc: Seq[org.iptc.sportsml.v3.AltLoc] = Nil,
  hash: Seq[org.iptc.sportsml.v3.Hash] = Nil,
  signal: Seq[org.iptc.sportsml.v3.Signal] = Nil,
  remoteContentExtProperty: Seq[org.iptc.sportsml.v3.Flex2ExtPropType] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends ContentSetOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val rendition = attributes.get("@rendition") map { _.as[String]}
  lazy val renditionuri = attributes.get("@renditionuri") map { _.as[java.net.URI]}
  lazy val generator = attributes.get("@generator") map { _.as[String]}
  lazy val generated = attributes.get("@generated") map { _.as[String]}
  lazy val hascontent = attributes.get("@hascontent") map { _.as[Boolean]}
  lazy val href = attributes.get("@href") map { _.as[java.net.URI]}
  lazy val residref = attributes.get("@residref") map { _.as[String]}
  lazy val version = attributes.get("@version") map { _.as[BigInt]}
  lazy val persistidref = attributes.get("@persistidref") map { _.as[String]}
  lazy val contenttype = attributes.get("@contenttype") map { _.as[String]}
  lazy val contenttypevariant = attributes.get("@contenttypevariant") map { _.as[String]}
  lazy val format = attributes.get("@format") map { _.as[String]}
  lazy val formaturi = attributes.get("@formaturi") map { _.as[java.net.URI]}
  lazy val size = attributes.get("@size") map { _.as[BigInt]}
  lazy val title = attributes.get("@title") map { _.as[String]}
  lazy val validfrom = attributes.get("@validfrom") map { _.as[String]}
  lazy val validto = attributes.get("@validto") map { _.as[String]}
  lazy val wordcount = attributes.get("@wordcount") map { _.as[BigInt]}
  lazy val linecount = attributes.get("@linecount") map { _.as[BigInt]}
  lazy val pagecount = attributes.get("@pagecount") map { _.as[BigInt]}
  lazy val width = attributes.get("@width") map { _.as[BigInt]}
  lazy val widthunit = attributes.get("@widthunit") map { _.as[String]}
  lazy val widthunituri = attributes.get("@widthunituri") map { _.as[java.net.URI]}
  lazy val height = attributes.get("@height") map { _.as[BigInt]}
  lazy val heightunit = attributes.get("@heightunit") map { _.as[String]}
  lazy val heightunituri = attributes.get("@heightunituri") map { _.as[java.net.URI]}
  lazy val orientation = attributes.get("@orientation") map { _.as[BigInt]}
  lazy val layoutorientation = attributes.get("@layoutorientation") map { _.as[String]}
  lazy val layoutorientationuri = attributes.get("@layoutorientationuri") map { _.as[java.net.URI]}
  lazy val colourspace = attributes.get("@colourspace") map { _.as[String]}
  lazy val colourspaceuri = attributes.get("@colourspaceuri") map { _.as[java.net.URI]}
  lazy val colourindicator = attributes.get("@colourindicator") map { _.as[String]}
  lazy val colourindicatoruri = attributes.get("@colourindicatoruri") map { _.as[java.net.URI]}
  lazy val colourdepth = attributes.get("@colourdepth") map { _.as[BigInt]}
  lazy val resolution = attributes.get("@resolution") map { _.as[BigInt]}
  lazy val duration = attributes.get("@duration") map { _.as[String]}
  lazy val durationunit = attributes.get("@durationunit") map { _.as[String]}
  lazy val durationunituri = attributes.get("@durationunituri") map { _.as[java.net.URI]}
  lazy val audiocodec = attributes.get("@audiocodec") map { _.as[String]}
  lazy val audiocodecuri = attributes.get("@audiocodecuri") map { _.as[java.net.URI]}
  lazy val audiobitrate = attributes.get("@audiobitrate") map { _.as[BigInt]}
  lazy val audiovbr = attributes.get("@audiovbr") map { _.as[Boolean]}
  lazy val audiosamplesize = attributes.get("@audiosamplesize") map { _.as[BigInt]}
  lazy val audiosamplerate = attributes.get("@audiosamplerate") map { _.as[BigInt]}
  lazy val audiochannels = attributes.get("@audiochannels") map { _.as[String]}
  lazy val audiochannelsuri = attributes.get("@audiochannelsuri") map { _.as[java.net.URI]}
  lazy val videocodec = attributes.get("@videocodec") map { _.as[String]}
  lazy val videocodecuri = attributes.get("@videocodecuri") map { _.as[java.net.URI]}
  lazy val videoavgbitrate = attributes.get("@videoavgbitrate") map { _.as[BigInt]}
  lazy val videovbr = attributes.get("@videovbr") map { _.as[Boolean]}
  lazy val videoframerate = attributes.get("@videoframerate") map { _.as[BigDecimal]}
  lazy val videoscan = attributes.get("@videoscan") map { _.as[Videoscan]}
  lazy val videoaspectratio = attributes.get("@videoaspectratio") map { _.as[String]}
  lazy val videosampling = attributes.get("@videosampling") map { _.as[String]}
  lazy val videoscaling = attributes.get("@videoscaling") map { _.as[String]}
  lazy val videoscalinguri = attributes.get("@videoscalinguri") map { _.as[java.net.URI]}
  lazy val videodefinition = attributes.get("@videodefinition") map { _.as[String]}
  lazy val videodefinitionuri = attributes.get("@videodefinitionuri") map { _.as[java.net.URI]}
  lazy val language = attributes.get("@language") map { _.as[String]}
}

      


case class PackageItem(any: Option[scalaxb.DataRecord[Any]] = None,
  anyitemtypeoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.AnyItemTypeOption]] = Nil,
  hopHistory: Option[org.iptc.sportsml.v3.HopHistory] = None,
  rightsInfo: Seq[org.iptc.sportsml.v3.RightsInfoType] = Nil,
  itemMeta: org.iptc.sportsml.v3.ItemMetadataType,
  contentMeta: Option[org.iptc.sportsml.v3.ContentMetadataAfDType] = None,
  partMeta: Seq[org.iptc.sportsml.v3.PartMetaPropType] = Nil,
  assert: Seq[org.iptc.sportsml.v3.AssertType] = Nil,
  inlineRef: Seq[org.iptc.sportsml.v3.InlineRef] = Nil,
  derivedFrom: Seq[org.iptc.sportsml.v3.DerivedFrom] = Nil,
  groupSet: Option[org.iptc.sportsml.v3.GroupSet] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends AnyItemType {
  lazy val standard = attributes("@standard").as[String]
  lazy val standardversion = attributes("@standardversion").as[String]
  lazy val conformance = attributes("@conformance").as[String]
  lazy val guid = attributes("@guid").as[String]
  lazy val version = attributes("@version").as[BigInt]
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      


case class GroupRef(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends GroupOption {
  lazy val idref = attributes("@idref").as[String]
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


case class ConceptRef(flexproptypableoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.FlexPropTypableOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends FlexPropTypable with GroupOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      


case class Group(groupoption: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val role = attributes.get("@role") map { _.as[String]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[java.net.URI]}
  lazy val mode = attributes.get("@mode") map { _.as[String]}
  lazy val modeuri = attributes.get("@modeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      

trait GroupOption

case class GroupSet(group: Seq[org.iptc.sportsml.v3.Group] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val root = attributes("@root").as[String]
}

      


case class PlanningItem(any: Option[scalaxb.DataRecord[Any]] = None,
  anyitemtypeoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.AnyItemTypeOption]] = Nil,
  hopHistory: Option[org.iptc.sportsml.v3.HopHistory] = None,
  rightsInfo: Seq[org.iptc.sportsml.v3.RightsInfoType] = Nil,
  itemMeta: org.iptc.sportsml.v3.ItemMetadataType,
  contentMeta: Option[org.iptc.sportsml.v3.ContentMetadataAcDType] = None,
  assert: Seq[org.iptc.sportsml.v3.AssertType] = Nil,
  inlineRef: Seq[org.iptc.sportsml.v3.InlineRef] = Nil,
  derivedFrom: Seq[org.iptc.sportsml.v3.DerivedFrom] = Nil,
  newsCoverageSet: Option[org.iptc.sportsml.v3.NewsCoverageSet] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends AnyItemType {
  lazy val standard = attributes("@standard").as[String]
  lazy val standardversion = attributes("@standardversion").as[String]
  lazy val conformance = attributes("@conformance").as[String]
  lazy val guid = attributes("@guid").as[String]
  lazy val version = attributes("@version").as[BigInt]
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      


case class NewsCoverageSet(newsCoverage: Seq[org.iptc.sportsml.v3.NewsCoverage2] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


case class CatalogItem(any: Option[scalaxb.DataRecord[Any]] = None,
  anyitemtypeoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.AnyItemTypeOption]] = Nil,
  hopHistory: Option[org.iptc.sportsml.v3.HopHistory] = None,
  rightsInfo: Seq[org.iptc.sportsml.v3.RightsInfoType] = Nil,
  itemMeta: org.iptc.sportsml.v3.ItemMetadataType,
  contentMeta: Option[org.iptc.sportsml.v3.ContentMetadataCatType] = None,
  catalogContainer: org.iptc.sportsml.v3.CatalogContainer,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends AnyItemType {
  lazy val standard = attributes("@standard").as[String]
  lazy val standardversion = attributes("@standardversion").as[String]
  lazy val conformance = attributes("@conformance").as[String]
  lazy val guid = attributes("@guid").as[String]
  lazy val version = attributes("@version").as[BigInt]
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      


case class CatalogContainer(catalog: org.iptc.sportsml.v3.Catalog)
      


case class CatalogRef(title: Seq[org.iptc.sportsml.v3.Label1Typable] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends HeaderOption {
  lazy val href = attributes("@href").as[java.net.URI]
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


case class Sender(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends StringTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val role = attributes.get("@role") map { _.as[String]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[java.net.URI]}
}

      


case class Priority(value: BigInt,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


case class Origin(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends StringTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val role = attributes.get("@role") map { _.as[String]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[java.net.URI]}
}

      


case class Timestamp(value: javax.xml.datatype.XMLGregorianCalendar,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends DateTimePropTypable with HeaderOption2 {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val role = attributes.get("@role") map { _.as[String]}
}

      


case class Destination(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends StringTypable with HeaderOption2 {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val role = attributes.get("@role") map { _.as[String]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[java.net.URI]}
}

      


case class Channel2(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends StringTypable with HeaderOption2 {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val role = attributes.get("@role") map { _.as[String]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[java.net.URI]}
  lazy val g2flag = attributes("@g2flag").as[String]
}

      


case class Header(sent: org.iptc.sportsml.v3.DateTimePropTypable,
  headeroption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.HeaderOption]] = Nil,
  sender: Option[org.iptc.sportsml.v3.Sender] = None,
  transmitId: Option[org.iptc.sportsml.v3.StringTypable] = None,
  priority: Option[org.iptc.sportsml.v3.Priority] = None,
  origin: Option[org.iptc.sportsml.v3.Origin] = None,
  headeroption2: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.HeaderOption2]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      

trait HeaderOption
trait HeaderOption2

case class ItemSet(any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


case class NewsMessage(header: org.iptc.sportsml.v3.Header,
  itemSet: org.iptc.sportsml.v3.ItemSet,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map())
      


/** The type of a string value. Type defined in this XML Schema only
*/
trait StringTypable {
  def value: String
  def id: Option[String]
  def creator: Option[String]
  def creatoruri: Option[java.net.URI]
  def modified: Option[String]
  def custom: Option[Boolean]
  def how: Option[String]
  def howuri: Option[java.net.URI]
  def why: Option[String]
  def whyuri: Option[java.net.URI]
  def pubconstraint: Option[Seq[String]]
  def pubconstrainturi: Option[Seq[java.net.URI]]
  def attributes: Map[String, scalaxb.DataRecord[Any]]
}


/** The type of a string value. Type defined in this XML Schema only
*/
case class StringType(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends StringTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


/** An abstract class. All G2 items are inherited from this class.
*/
trait AnyItemType {
  def any: Option[scalaxb.DataRecord[Any]]
  def anyitemtypeoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.AnyItemTypeOption]]
  def hopHistory: Option[org.iptc.sportsml.v3.HopHistory]
  def rightsInfo: Seq[org.iptc.sportsml.v3.RightsInfoType]
  def itemMeta: org.iptc.sportsml.v3.ItemMetadataType
  def standard: String
  def standardversion: String
  def conformance: String
  def guid: String
  def version: BigInt
  def xmllang: Option[String]
  def dir: Option[org.iptc.sportsml.v3.Dir]
  def attributes: Map[String, scalaxb.DataRecord[Any]]
}

trait AnyItemTypeOption

case class SameAs(value: java.net.URI,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends SchemeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val g2flag = attributes("@g2flag").as[String]
}

      


case class Scheme(schemeoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.SchemeOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val alias = attributes("@alias").as[String]
  lazy val uri = attributes("@uri").as[java.net.URI]
  lazy val authority = attributes.get("@authority") map { _.as[java.net.URI]}
}

      

trait SchemeOption

case class Catalog(title: Seq[org.iptc.sportsml.v3.Label1Typable] = Nil,
  scheme: Seq[org.iptc.sportsml.v3.Scheme] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends HeaderOption with AnyItemTypeOption {
  lazy val additionalInfo = attributes.get("@additionalInfo") map { _.as[java.net.URI]}
  lazy val url = attributes.get("@url") map { _.as[java.net.URI]}
  lazy val authority = attributes.get("@authority") map { _.as[java.net.URI]}
  lazy val guid = attributes.get("@guid") map { _.as[java.net.URI]}
  lazy val version = attributes.get("@version") map { _.as[BigInt]}
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


case class SameAsScheme(value: java.net.URI,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends SchemeMetaOption with SchemeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


case class CatalogRef2(title: Seq[org.iptc.sportsml.v3.Label1Typable] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends AnyItemTypeOption {
  lazy val href = attributes("@href").as[java.net.URI]
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


/** The type for a set of properties representing the rights associated with the Item (Type defined in this XML Schema only)
*/
case class RightsInfoType(accountable: Option[org.iptc.sportsml.v3.FlexPersonPropType] = None,
  copyrightHolder: Option[org.iptc.sportsml.v3.FlexPartyPropTypable] = None,
  rightsinfotypeoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.RightsInfoTypeOption]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val idrefs = attributes.get("@idrefs") map { _.as[Seq[String]]}
  lazy val scope = attributes.get("@scope") map { _.as[Seq[String]]}
  lazy val scopeuri = attributes.get("@scopeuri") map { _.as[Seq[java.net.URI]]}
  lazy val aspect = attributes.get("@aspect") map { _.as[Seq[String]]}
  lazy val aspecturi = attributes.get("@aspecturi") map { _.as[Seq[java.net.URI]]}
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val validfrom = attributes.get("@validfrom") map { _.as[String]}
  lazy val validto = attributes.get("@validto") map { _.as[String]}
}

      

trait RightsInfoTypeOption

/** An expression of rights in natural language or as a reference to remote information
*/
case class RightsBlockType(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BlockTypable with RightsInfoTypeOption with ObjectDetailsOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val media = attributes.get("@media") map { _.as[Seq[String]]}
  lazy val role = attributes.get("@role") map { _.as[Seq[String]]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[java.net.URI]}
  lazy val href = attributes.get("@href") map { _.as[java.net.URI]}
}

      


/** The type for a set of properties directly associated with the item (Type defined in this XML Schema only)
*/
case class ItemMetadataType(itemManagementGroupSequence1: org.iptc.sportsml.v3.ItemManagementGroupSequence,
  link: Seq[org.iptc.sportsml.v3.Link1Type] = Nil,
  itemMetaExtProperty: Seq[org.iptc.sportsml.v3.Flex2ExtPropType] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      


case class FileName(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


case class Generator(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends VersionedStringTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val versioninfo = attributes.get("@versioninfo") map { _.as[String]}
  lazy val role = attributes.get("@role") map { _.as[String]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[java.net.URI]}
}

      


case class Signal(qualproptypableoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.QualPropTypableOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends QualPropTypable with GroupOption with HeaderOption2 {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val severity = attributes.get("@severity") map { _.as[String]}
  lazy val severityuri = attributes.get("@severityuri") map { _.as[java.net.URI]}
}

      


case class AltRep(value: java.net.URI,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val validfrom = attributes.get("@validfrom") map { _.as[String]}
  lazy val validto = attributes.get("@validto") map { _.as[String]}
  lazy val representation = attributes.get("@representation") map { _.as[String]}
  lazy val representationuri = attributes.get("@representationuri") map { _.as[java.net.URI]}
  lazy val contenttype = attributes.get("@contenttype") map { _.as[String]}
  lazy val format = attributes.get("@format") map { _.as[String]}
  lazy val formaturi = attributes.get("@formaturi") map { _.as[java.net.URI]}
  lazy val size = attributes.get("@size") map { _.as[BigInt]}
}

      


case class Hash(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val hashtype = attributes.get("@hashtype") map { _.as[String]}
  lazy val hashtypeuri = attributes.get("@hashtypeuri") map { _.as[java.net.URI]}
  lazy val scope = attributes.get("@scope") map { _.as[String]}
  lazy val scopeuri = attributes.get("@scopeuri") map { _.as[java.net.URI]}
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


case class OrigRep(value: java.net.URI,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val accesstype = attributes.get("@accesstype") map { _.as[String]}
  lazy val accesstypeuri = attributes.get("@accesstypeuri") map { _.as[java.net.URI]}
  lazy val reposrole = attributes.get("@reposrole") map { _.as[String]}
  lazy val reposroleuri = attributes.get("@reposroleuri") map { _.as[java.net.URI]}
}

      


case class IncomingFeedId(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends QCodePropTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val role = attributes.get("@role") map { _.as[String]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[java.net.URI]}
}

      


/** The PCL-type of a link from the current Item to a target Item or Web resource
*/
case class Link1Type(any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends GroupOption with RightsInfoTypeOption with ConceptDefinitionGroupOption1 with ConceptOption {
  lazy val rel = attributes.get("@rel") map { _.as[String]}
  lazy val reluri = attributes.get("@reluri") map { _.as[java.net.URI]}
  lazy val rank = attributes.get("@rank") map { _.as[BigInt]}
  lazy val href = attributes.get("@href") map { _.as[java.net.URI]}
  lazy val residref = attributes.get("@residref") map { _.as[String]}
  lazy val version = attributes.get("@version") map { _.as[BigInt]}
  lazy val persistidref = attributes.get("@persistidref") map { _.as[String]}
  lazy val contenttype = attributes.get("@contenttype") map { _.as[String]}
  lazy val contenttypevariant = attributes.get("@contenttypevariant") map { _.as[String]}
  lazy val format = attributes.get("@format") map { _.as[String]}
  lazy val formaturi = attributes.get("@formaturi") map { _.as[java.net.URI]}
  lazy val size = attributes.get("@size") map { _.as[BigInt]}
  lazy val title = attributes.get("@title") map { _.as[String]}
  lazy val validfrom = attributes.get("@validfrom") map { _.as[String]}
  lazy val validto = attributes.get("@validto") map { _.as[String]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val guidref = attributes.get("@guidref") map { _.as[String]}
  lazy val hreftype = attributes.get("@hreftype") map { _.as[String]}
}

      


/** The type for a  basic set of metadata properties about the content
*/
case class ContentMetadataType(icon: Seq[org.iptc.sportsml.v3.Icon] = Nil,
  administrativeMetadataGroupSequence2: org.iptc.sportsml.v3.AdministrativeMetadataGroupSequence,
  contentMetaExtProperty: Seq[org.iptc.sportsml.v3.Flex2ExtPropType] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      


/** The type for a  set of metadata properties including Administrative and core Descriptive properties about the content
*/
case class ContentMetadataAcDType(icon: Seq[org.iptc.sportsml.v3.Icon] = Nil,
  administrativeMetadataGroupSequence2: org.iptc.sportsml.v3.AdministrativeMetadataGroupSequence,
  descriptiveMetadataCoreGroupOption13: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.DescriptiveMetadataCoreGroupOption1]] = Nil,
  contentMetaExtProperty: Seq[org.iptc.sportsml.v3.Flex2ExtPropType] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      


/** The type for a  set of metadata properties including Administrative and core Descriptive properties about the content
*/
case class ContentMetadataAfDType(icon: Seq[org.iptc.sportsml.v3.Icon] = Nil,
  administrativeMetadataGroupSequence2: org.iptc.sportsml.v3.AdministrativeMetadataGroupSequence,
  descriptiveMetadataGroupOption13: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.DescriptiveMetadataGroupOption1]] = Nil,
  contentMetaExtProperty: Seq[org.iptc.sportsml.v3.Flex2ExtPropType] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      


/**  The type for a set of metadata properties of a catalog item
*/
case class ContentMetadataCatType(contentCreated: Option[org.iptc.sportsml.v3.TruncatedDateTimePropType] = None,
  contentModified: Option[org.iptc.sportsml.v3.TruncatedDateTimePropType] = None,
  contentmetadatacattypeoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ContentMetadataCatTypeOption]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      

trait ContentMetadataCatTypeOption

case class Urgency(value: BigInt,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


case class Icon(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val href = attributes.get("@href") map { _.as[java.net.URI]}
  lazy val residref = attributes.get("@residref") map { _.as[String]}
  lazy val version = attributes.get("@version") map { _.as[BigInt]}
  lazy val persistidref = attributes.get("@persistidref") map { _.as[String]}
  lazy val contenttype = attributes.get("@contenttype") map { _.as[String]}
  lazy val contenttypevariant = attributes.get("@contenttypevariant") map { _.as[String]}
  lazy val format = attributes.get("@format") map { _.as[String]}
  lazy val formaturi = attributes.get("@formaturi") map { _.as[java.net.URI]}
  lazy val size = attributes.get("@size") map { _.as[BigInt]}
  lazy val title = attributes.get("@title") map { _.as[String]}
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val rendition = attributes.get("@rendition") map { _.as[String]}
  lazy val renditionuri = attributes.get("@renditionuri") map { _.as[java.net.URI]}
  lazy val width = attributes.get("@width") map { _.as[BigInt]}
  lazy val widthunit = attributes.get("@widthunit") map { _.as[String]}
  lazy val widthunituri = attributes.get("@widthunituri") map { _.as[java.net.URI]}
  lazy val height = attributes.get("@height") map { _.as[BigInt]}
  lazy val heightunit = attributes.get("@heightunit") map { _.as[String]}
  lazy val heightunituri = attributes.get("@heightunituri") map { _.as[java.net.URI]}
  lazy val orientation = attributes.get("@orientation") map { _.as[BigInt]}
  lazy val layoutorientation = attributes.get("@layoutorientation") map { _.as[String]}
  lazy val layoutorientationuri = attributes.get("@layoutorientationuri") map { _.as[java.net.URI]}
  lazy val colourspace = attributes.get("@colourspace") map { _.as[String]}
  lazy val colourspaceuri = attributes.get("@colourspaceuri") map { _.as[java.net.URI]}
  lazy val colourindicator = attributes.get("@colourindicator") map { _.as[String]}
  lazy val colourindicatoruri = attributes.get("@colourindicatoruri") map { _.as[java.net.URI]}
  lazy val videocodec = attributes.get("@videocodec") map { _.as[String]}
  lazy val videocodecuri = attributes.get("@videocodecuri") map { _.as[java.net.URI]}
  lazy val colourdepth = attributes.get("@colourdepth") map { _.as[BigInt]}
}

      


case class AltId(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends IntlStringType2able with ContentMetadataCatTypeOption with AdministrativeMetadataGroupOption1 {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val environment = attributes.get("@environment") map { _.as[Seq[String]]}
  lazy val environmenturi = attributes.get("@environmenturi") map { _.as[Seq[java.net.URI]]}
  lazy val idformat = attributes.get("@idformat") map { _.as[String]}
  lazy val idformaturi = attributes.get("@idformaturi") map { _.as[java.net.URI]}
}

      


case class Rating(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends AdministrativeMetadataGroupOption1 {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val valueAttribute = attributes("@value").as[BigDecimal]
  lazy val valcalctype = attributes.get("@valcalctype") map { _.as[String]}
  lazy val valcalctypeuri = attributes.get("@valcalctypeuri") map { _.as[java.net.URI]}
  lazy val scalemin = attributes("@scalemin").as[BigDecimal]
  lazy val scalemax = attributes("@scalemax").as[BigDecimal]
  lazy val scaleunit = attributes.get("@scaleunit") map { _.as[String]}
  lazy val scaleunituri = attributes.get("@scaleunituri") map { _.as[java.net.URI]}
  lazy val raters = attributes.get("@raters") map { _.as[BigInt]}
  lazy val ratertype = attributes.get("@ratertype") map { _.as[String]}
  lazy val ratertypeuri = attributes.get("@ratertypeuri") map { _.as[java.net.URI]}
  lazy val ratingtype = attributes.get("@ratingtype") map { _.as[String]}
  lazy val ratingtypeuri = attributes.get("@ratingtypeuri") map { _.as[java.net.URI]}
}

      


case class UserInteraction(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends AdministrativeMetadataGroupOption1 {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val interactions = attributes("@interactions").as[BigInt]
  lazy val interactiontype = attributes.get("@interactiontype") map { _.as[String]}
  lazy val interactiontypeuri = attributes.get("@interactiontypeuri") map { _.as[java.net.URI]}
}

      


case class Language(name: Seq[org.iptc.sportsml.v3.IntlStringTypable] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends DescriptiveMetadataGroupOption1 with DescriptiveMetadataCoreGroupOption1 with EventDetailsOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val tag = attributes("@tag").as[String]
  lazy val role = attributes.get("@role") map { _.as[Seq[String]]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[Seq[java.net.URI]]}
  lazy val rank = attributes.get("@rank") map { _.as[BigInt]}
}

      


case class Genre(conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]] = Nil,
  conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  bag: Option[org.iptc.sportsml.v3.Bag] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Flex1ConceptPropTypable with DescriptiveMetadataGroupOption1 {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val confidence = attributes.get("@confidence") map { _.as[BigInt]}
  lazy val relevance = attributes.get("@relevance") map { _.as[BigInt]}
  lazy val derivedfrom = attributes.get("@derivedfrom") map { _.as[Seq[String]]}
  lazy val rank = attributes.get("@rank") map { _.as[BigInt]}
}

      


case class Keyword(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends IntlStringTypable with DescriptiveMetadataGroupOption1 with DescriptiveMetadataCoreGroupOption1 with EventDetailsOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val role = attributes.get("@role") map { _.as[Seq[String]]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[Seq[java.net.URI]]}
  lazy val rank = attributes.get("@rank") map { _.as[BigInt]}
  lazy val confidence = attributes.get("@confidence") map { _.as[BigInt]}
  lazy val relevance = attributes.get("@relevance") map { _.as[BigInt]}
}

      


case class Subject(conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]] = Nil,
  conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  bag: Option[org.iptc.sportsml.v3.Bag] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Flex1ConceptPropTypable with DescriptiveMetadataGroupOption1 with DescriptiveMetadataCoreGroupOption1 {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val confidence = attributes.get("@confidence") map { _.as[BigInt]}
  lazy val relevance = attributes.get("@relevance") map { _.as[BigInt]}
  lazy val derivedfrom = attributes.get("@derivedfrom") map { _.as[Seq[String]]}
  lazy val rank = attributes.get("@rank") map { _.as[BigInt]}
}

      


case class Slugline(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends IntlStringTypable with DescriptiveMetadataGroupOption1 with DescriptiveMetadataCoreGroupOption1 {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val separator = attributes.get("@separator") map { _.as[String]}
  lazy val role = attributes.get("@role") map { _.as[String]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[java.net.URI]}
  lazy val rank = attributes.get("@rank") map { _.as[BigInt]}
}

      


case class Headline(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Label1Typable with DescriptiveMetadataGroupOption1 with DescriptiveMetadataCoreGroupOption1 {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val role = attributes.get("@role") map { _.as[Seq[String]]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[Seq[java.net.URI]]}
  lazy val media = attributes.get("@media") map { _.as[Seq[String]]}
  lazy val rank = attributes.get("@rank") map { _.as[BigInt]}
}

      


case class Dateline(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Label1Typable with DescriptiveMetadataGroupOption1 {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val role = attributes.get("@role") map { _.as[Seq[String]]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[Seq[java.net.URI]]}
  lazy val media = attributes.get("@media") map { _.as[Seq[String]]}
  lazy val rank = attributes.get("@rank") map { _.as[BigInt]}
}

      


case class By(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Label1Typable with DescriptiveMetadataGroupOption1 {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val role = attributes.get("@role") map { _.as[Seq[String]]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[Seq[java.net.URI]]}
  lazy val media = attributes.get("@media") map { _.as[Seq[String]]}
  lazy val rank = attributes.get("@rank") map { _.as[BigInt]}
}

      


case class Creditline(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends IntlStringTypable with DescriptiveMetadataGroupOption1 {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val rank = attributes.get("@rank") map { _.as[BigInt]}
}

      


case class Description(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BlockTypable with DescriptiveMetadataGroupOption1 with DescriptiveMetadataCoreGroupOption1 {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val media = attributes.get("@media") map { _.as[Seq[String]]}
  lazy val role = attributes.get("@role") map { _.as[Seq[String]]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[java.net.URI]}
  lazy val rank = attributes.get("@rank") map { _.as[BigInt]}
}

      


case class TimeDelim(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val start = attributes("@start").as[String]
  lazy val end = attributes("@end").as[String]
  lazy val timeunit = attributes.get("@timeunit") map { _.as[String]}
  lazy val timeunituri = attributes.get("@timeunituri") map { _.as[java.net.URI]}
  lazy val renditionref = attributes.get("@renditionref") map { _.as[String]}
  lazy val renditionrefuri = attributes.get("@renditionrefuri") map { _.as[java.net.URI]}
}

      


case class RegionDelim(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val x = attributes.get("@x") map { _.as[BigInt]}
  lazy val y = attributes.get("@y") map { _.as[BigInt]}
  lazy val width = attributes.get("@width") map { _.as[BigInt]}
  lazy val height = attributes.get("@height") map { _.as[BigInt]}
}

      


/**  A type representing the structure of a partMeta property
*/
case class PartMetaPropType(icon: Seq[org.iptc.sportsml.v3.Icon] = Nil,
  timeDelim: Seq[org.iptc.sportsml.v3.TimeDelim] = Nil,
  regionDelim: Option[org.iptc.sportsml.v3.RegionDelim] = None,
  role: Option[org.iptc.sportsml.v3.QualPropTypable] = None,
  administrativeMetadataGroupSequence5: org.iptc.sportsml.v3.AdministrativeMetadataGroupSequence,
  descriptiveMetadataGroupOption16: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.DescriptiveMetadataGroupOption1]] = Nil,
  partMetaExtProperty: Seq[org.iptc.sportsml.v3.Flex2ExtPropType] = Nil,
  signal: Seq[org.iptc.sportsml.v3.Signal] = Nil,
  edNote: Seq[org.iptc.sportsml.v3.BlockTypable] = Nil,
  link: Seq[org.iptc.sportsml.v3.Link1Type] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val partid = attributes.get("@partid") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val seq = attributes.get("@seq") map { _.as[BigInt]}
  lazy val contentrefs = attributes.get("@contentrefs") map { _.as[Seq[String]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      


/** The type of an assertion about a concept (Type defined in this XML Schema only)
*/
case class AssertType(any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      


case class InlineRef(conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]] = Nil,
  conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Flex1PropTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val idrefs = attributes("@idrefs").as[Seq[String]]
  lazy val confidence = attributes.get("@confidence") map { _.as[BigInt]}
  lazy val relevance = attributes.get("@relevance") map { _.as[BigInt]}
  lazy val derivedfrom = attributes.get("@derivedfrom") map { _.as[Seq[String]]}
}

      


case class DerivedFrom(conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]] = Nil,
  conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Flex1PropTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val idrefs = attributes.get("@idrefs") map { _.as[Seq[String]]}
}

      


case class Bit(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends QCodePropTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val significance = attributes.get("@significance") map { _.as[BigInt]}
  lazy val confidence = attributes.get("@confidence") map { _.as[BigInt]}
  lazy val relevance = attributes.get("@relevance") map { _.as[BigInt]}
  lazy val derivedfrom = attributes.get("@derivedfrom") map { _.as[Seq[String]]}
}

      


case class Bag(bit: Seq[org.iptc.sportsml.v3.Bit] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      


case class AltLoc(value: java.net.URI,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val role = attributes.get("@role") map { _.as[String]}
  lazy val roleruri = attributes.get("@roleruri") map { _.as[java.net.URI]}
}

      


case class HierarchyInfo(value: Seq[String],
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends ConceptDefinitionGroupOption1 with ConceptOption with QualPropTypableOption with FlexPropTypableOption with FlexProp2TypableOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


case class Concept(conceptId: org.iptc.sportsml.v3.ConceptIdType,
  typeValue: Option[org.iptc.sportsml.v3.QualPropTypable] = None,
  name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  conceptoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptOption]] = Nil,
  conceptRelationshipsGroupOption15: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  entityDetailsGroupOption6: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.EntityDetailsGroupOption]] = None,
  conceptExtProperty: Seq[org.iptc.sportsml.v3.Flex2ExtPropType] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      

trait ConceptOption

case class Definition(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BlockTypable with SchemeMetaOption with SchemeOption with ConceptDefinitionGroupOption1 with ConceptOption with EventOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val media = attributes.get("@media") map { _.as[Seq[String]]}
  lazy val role = attributes.get("@role") map { _.as[Seq[String]]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[java.net.URI]}
  lazy val validfrom = attributes.get("@validfrom") map { _.as[String]}
  lazy val validto = attributes.get("@validto") map { _.as[String]}
}

      


case class Note(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BlockTypable with SchemeMetaOption with SchemeOption with ConceptDefinitionGroupOption1 with ConceptOption with EventOption with ContactInfoTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val media = attributes.get("@media") map { _.as[Seq[String]]}
  lazy val role = attributes.get("@role") map { _.as[Seq[String]]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[java.net.URI]}
  lazy val validfrom = attributes.get("@validfrom") map { _.as[String]}
  lazy val validto = attributes.get("@validto") map { _.as[String]}
}

      


case class Facet(flexproptypableoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.FlexPropTypableOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends FlexPropTypable with ConceptDefinitionGroupOption1 with ConceptOption with RelatedConceptTypableOption with EventOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val rel = attributes.get("@rel") map { _.as[String]}
  lazy val reluri = attributes.get("@reluri") map { _.as[java.net.URI]}
  lazy val validfrom = attributes.get("@validfrom") map { _.as[String]}
  lazy val validto = attributes.get("@validto") map { _.as[String]}
  lazy val g2flag = attributes("@g2flag").as[String]
}

      


/** The type for a preferred unambiguous identifier for the concept.
*/
case class ConceptIdType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val created = attributes.get("@created") map { _.as[String]}
  lazy val retired = attributes.get("@retired") map { _.as[String]}
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


/** The type of a natural language name for the concept (Type defined in this XML Schema only)
*/
case class ConceptNameType(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends IntlStringTypable with SchemeMetaOption with SchemeOption with ConceptDefinitionGroupOption1 with QualPropTypableOption with FlexPropTypableOption with FlexProp2TypableOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val role = attributes.get("@role") map { _.as[Seq[String]]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[Seq[java.net.URI]]}
  lazy val part = attributes.get("@part") map { _.as[String]}
  lazy val parturi = attributes.get("@parturi") map { _.as[java.net.URI]}
  lazy val validfrom = attributes.get("@validfrom") map { _.as[String]}
  lazy val validto = attributes.get("@validto") map { _.as[String]}
}

      


/** The type for an identifier of an equivalent concept (Type defined in this XML Schema only)
*/
case class SameAsType(flexproptypableoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.FlexPropTypableOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends FlexPropTypable with ConceptRelationshipsGroupOption1 with RelatedConceptTypableOption with FlexProp2TypableOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val validfrom = attributes.get("@validfrom") map { _.as[String]}
  lazy val validto = attributes.get("@validto") map { _.as[String]}
}

      


case class Related(flexproptypableoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.FlexPropTypableOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends FlexPropTypable with RelatedConceptTypableOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val rel = attributes.get("@rel") map { _.as[String]}
  lazy val reluri = attributes.get("@reluri") map { _.as[java.net.URI]}
  lazy val rank = attributes.get("@rank") map { _.as[BigInt]}
  lazy val validfrom = attributes.get("@validfrom") map { _.as[String]}
  lazy val validto = attributes.get("@validto") map { _.as[String]}
}

      


/** The type for an identifier of a related concept 
*/
trait RelatedConceptTypable extends FlexPropTypable with ConceptRelationshipsGroupOption1 {
  def flexproptypableoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.FlexPropTypableOption]]
  def relatedconcepttypableoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.RelatedConceptTypableOption]]
  def id: Option[String]
  def creator: Option[String]
  def creatoruri: Option[java.net.URI]
  def modified: Option[String]
  def custom: Option[Boolean]
  def how: Option[String]
  def howuri: Option[java.net.URI]
  def why: Option[String]
  def whyuri: Option[java.net.URI]
  def pubconstraint: Option[Seq[String]]
  def pubconstrainturi: Option[Seq[java.net.URI]]
  def qcode: Option[String]
  def uri: Option[java.net.URI]
  def literal: Option[String]
  def typeValue: Option[String]
  def typeuri: Option[java.net.URI]
  def xmllang: Option[String]
  def dir: Option[org.iptc.sportsml.v3.Dir]
  def rel: Option[String]
  def reluri: Option[java.net.URI]
  def rank: Option[BigInt]
  def validfrom: Option[String]
  def validto: Option[String]
  def attributes: Map[String, scalaxb.DataRecord[Any]]
}


/** The type for an identifier of a related concept 
*/
case class RelatedConceptType(flexproptypableoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.FlexPropTypableOption]] = Nil,
  relatedconcepttypableoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.RelatedConceptTypableOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends RelatedConceptTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val rel = attributes.get("@rel") map { _.as[String]}
  lazy val reluri = attributes.get("@reluri") map { _.as[java.net.URI]}
  lazy val rank = attributes.get("@rank") map { _.as[BigInt]}
  lazy val validfrom = attributes.get("@validfrom") map { _.as[String]}
  lazy val validto = attributes.get("@validto") map { _.as[String]}
}

      

trait RelatedConceptTypableOption

/** The type for identifying a related concept
*/
case class FlexRelatedConceptType(flexproptypableoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.FlexPropTypableOption]] = Nil,
  relatedconcepttypableoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.RelatedConceptTypableOption]] = Nil,
  bag: Option[org.iptc.sportsml.v3.Bag] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends RelatedConceptTypable with SchemeMetaOption with ConceptRelationshipsGroupOption1 {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val rel = attributes.get("@rel") map { _.as[String]}
  lazy val reluri = attributes.get("@reluri") map { _.as[java.net.URI]}
  lazy val rank = attributes.get("@rank") map { _.as[BigInt]}
  lazy val validfrom = attributes.get("@validfrom") map { _.as[String]}
  lazy val validto = attributes.get("@validto") map { _.as[String]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
  lazy val valuedatatype = attributes.get("@valuedatatype") map { _.as[javax.xml.namespace.QName]}
  lazy val valueunit = attributes.get("@valueunit") map { _.as[String]}
  lazy val valueunituri = attributes.get("@valueunituri") map { _.as[java.net.URI]}
}

      


case class PersonDetails(born: Option[org.iptc.sportsml.v3.TruncatedDateTimePropType] = None,
  died: Option[org.iptc.sportsml.v3.TruncatedDateTimePropType] = None,
  persondetailsoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.PersonDetailsOption]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EntityDetailsGroupOption with FlexPartyPropTypableOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      

trait PersonDetailsOption

case class HasInstrument(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends OrganisationDetailsOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val symbol = attributes("@symbol").as[String]
  lazy val symbolsrc = attributes.get("@symbolsrc") map { _.as[String]}
  lazy val symbolsrcuri = attributes.get("@symbolsrcuri") map { _.as[java.net.URI]}
  lazy val market = attributes.get("@market") map { _.as[String]}
  lazy val marketuri = attributes.get("@marketuri") map { _.as[java.net.URI]}
  lazy val marketlabel = attributes.get("@marketlabel") map { _.as[String]}
  lazy val marketlabelsrc = attributes.get("@marketlabelsrc") map { _.as[String]}
  lazy val marketlabelsrcuri = attributes.get("@marketlabelsrcuri") map { _.as[java.net.URI]}
  lazy val typeValue = attributes.get("@type") map { _.as[Seq[String]]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[Seq[java.net.URI]]}
  lazy val rank = attributes.get("@rank") map { _.as[BigInt]}
}

      


case class OrganisationDetails(founded: Option[org.iptc.sportsml.v3.TruncatedDateTimePropType] = None,
  dissolved: Option[org.iptc.sportsml.v3.TruncatedDateTimePropType] = None,
  organisationdetailsoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.OrganisationDetailsOption]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EntityDetailsGroupOption with FlexPartyPropTypableOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      

trait OrganisationDetailsOption

case class Line(position: Seq[org.iptc.sportsml.v3.GeoCoordinatesType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends GeoAreaDetailsOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


case class Circle(position: org.iptc.sportsml.v3.GeoCoordinatesType,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends GeoAreaDetailsOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val radius = attributes("@radius").as[Double]
  lazy val radunit = attributes.get("@radunit") map { _.as[String]}
  lazy val radunituri = attributes.get("@radunituri") map { _.as[java.net.URI]}
}

      


case class Polygon(position: Seq[org.iptc.sportsml.v3.GeoCoordinatesType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends GeoAreaDetailsOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


case class GeoAreaDetails(position: Option[org.iptc.sportsml.v3.GeoCoordinatesType] = None,
  founded: Option[org.iptc.sportsml.v3.TruncatedDateTimePropType] = None,
  dissolved: Option[org.iptc.sportsml.v3.TruncatedDateTimePropType] = None,
  geoareadetailsoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.GeoAreaDetailsOption]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EntityDetailsGroupOption with FlexLocationPropTypableOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      

trait GeoAreaDetailsOption

case class POIDetails(position: Option[org.iptc.sportsml.v3.GeoCoordinatesType] = None,
  address: Option[org.iptc.sportsml.v3.AddressType] = None,
  openHours: Option[org.iptc.sportsml.v3.Label1Typable] = None,
  capacity: Option[org.iptc.sportsml.v3.Label1Typable] = None,
  poidetailsoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.POIDetailsOption]] = Nil,
  created: Option[org.iptc.sportsml.v3.TruncatedDateTimePropType] = None,
  ceasedToExist: Option[org.iptc.sportsml.v3.TruncatedDateTimePropType] = None,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EntityDetailsGroupOption with FlexLocationPropTypableOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      

trait POIDetailsOption

case class ObjectDetails(created: Option[org.iptc.sportsml.v3.TruncatedDateTimePropType] = None,
  objectdetailsoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ObjectDetailsOption]] = Nil,
  ceasedToExist: Option[org.iptc.sportsml.v3.TruncatedDateTimePropType] = None,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EntityDetailsGroupOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      

trait ObjectDetailsOption

case class Duration(value: javax.xml.datatype.Duration,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends DatesOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


case class Dates(start: org.iptc.sportsml.v3.ApproximateDateTimePropType,
  datesoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.DatesOption]] = None,
  recurrenceGroupSequence3: Option[org.iptc.sportsml.v3.RecurrenceGroupSequence] = None,
  confirmation: Option[org.iptc.sportsml.v3.QCodePropTypable] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      

trait DatesOption

case class ParticipationRequirement(conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]] = Nil,
  conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Flex1PropTypable with EventDetailsOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val role = attributes.get("@role") map { _.as[String]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[java.net.URI]}
}

      


case class Location(conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]] = Nil,
  conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  flexlocationproptypableoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.FlexLocationPropTypableOption]] = None,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends FlexLocationPropTypable with EventDetailsOption {
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val role = attributes.get("@role") map { _.as[String]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[java.net.URI]}
}

      


case class G2contentType(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


case class NewsCoverage(g2contentType: Option[org.iptc.sportsml.v3.G2contentType] = None,
  itemClass: Option[org.iptc.sportsml.v3.QualPropTypable] = None,
  assignedTo: Seq[org.iptc.sportsml.v3.Flex1PartyPropTypable] = Nil,
  scheduled: Option[org.iptc.sportsml.v3.ApproximateDateTimePropType] = None,
  service: Seq[org.iptc.sportsml.v3.QualPropTypable] = Nil,
  edNote: Seq[org.iptc.sportsml.v3.BlockTypable] = Nil,
  descriptiveMetadataGroupOption17: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.DescriptiveMetadataGroupOption1]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EventDetailsOption {
  lazy val role = attributes.get("@role") map { _.as[String]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[java.net.URI]}
}

      


/** The type with details specific to an event
*/
case class EventDetails(dates: org.iptc.sportsml.v3.Dates,
  occurStatus: Option[org.iptc.sportsml.v3.QualPropTypable] = None,
  newsCoverageStatus: Option[org.iptc.sportsml.v3.QualPropTypable] = None,
  eventdetailsoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.EventDetailsOption]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EntityDetailsGroupOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      

trait EventDetailsOption

case class Event(name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  eventoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.EventOption]] = Nil,
  conceptRelationshipsGroupOption13: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  eventDetails: org.iptc.sportsml.v3.EventDetails,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      

trait EventOption

case class Events(event: Seq[org.iptc.sportsml.v3.Event] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


/** The type for an affliation of a person to an organisation (Type defined in this XML Schema only)
*/
case class PersonAffiliationType(conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]] = Nil,
  conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  organisationDetails: Option[org.iptc.sportsml.v3.OrganisationDetails] = None,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends FlexOrganisationPropTypable with PersonDetailsOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val validfrom = attributes.get("@validfrom") map { _.as[String]}
  lazy val validto = attributes.get("@validto") map { _.as[String]}
}

      


/** The type for a location of an organisation (Type defined in this XML Schema only)
*/
case class OrganisationLocationType(conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]] = Nil,
  conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  flexlocationproptypableoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.FlexLocationPropTypableOption]] = None,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends FlexLocationPropTypable {
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val validfrom = attributes.get("@validfrom") map { _.as[String]}
  lazy val validto = attributes.get("@validto") map { _.as[String]}
}

      


/** The type for geographic coordinates (Type defined in this XML Schema only)
*/
case class GeoCoordinatesType(any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val latitude = attributes("@latitude").as[BigDecimal]
  lazy val longitude = attributes("@longitude").as[BigDecimal]
  lazy val altitude = attributes.get("@altitude") map { _.as[BigInt]}
  lazy val gpsdatum = attributes.get("@gpsdatum") map { _.as[String]}
}

      


case class Web(value: java.net.URI,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends ContactInfoTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val role = attributes.get("@role") map { _.as[Seq[String]]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[Seq[java.net.URI]]}
}

      


/** The type for information to get in contact with a party (Type defined in this XML Schema only)
*/
case class ContactInfoType(contactinfotypeoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ContactInfoTypeOption]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends PersonDetailsOption with OrganisationDetailsOption with POIDetailsOption with EventDetailsOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val role = attributes.get("@role") map { _.as[Seq[String]]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[Seq[java.net.URI]]}
}

      

trait ContactInfoTypeOption

case class Line2(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends IntlStringTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val role = attributes.get("@role") map { _.as[String]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[java.net.URI]}
}

      


case class AddressType(line: Seq[org.iptc.sportsml.v3.Line2] = Nil,
  locality: Seq[org.iptc.sportsml.v3.Flex1RolePropType] = Nil,
  area: Seq[org.iptc.sportsml.v3.Flex1RolePropType] = Nil,
  country: Option[org.iptc.sportsml.v3.Flex1PropTypable] = None,
  postalCode: Option[org.iptc.sportsml.v3.IntlStringTypable] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends ContactInfoTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val role = attributes.get("@role") map { _.as[Seq[String]]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[Seq[java.net.URI]]}
}

      


/** The type for an electronic address
*/
case class ElectronicAddressType(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends ContactInfoTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val role = attributes.get("@role") map { _.as[Seq[String]]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[Seq[java.net.URI]]}
}

      


/** The type for an electronic address with a technical qualifier
*/
case class ElectronicAddressTechType(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends ContactInfoTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val role = attributes.get("@role") map { _.as[Seq[String]]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[Seq[java.net.URI]]}
  lazy val tech = attributes.get("@tech") map { _.as[String]}
  lazy val techuri = attributes.get("@techuri") map { _.as[java.net.URI]}
}

      


case class G2contentType2(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


case class ItemCount(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val rangefrom = attributes("@rangefrom").as[BigInt]
  lazy val rangeto = attributes("@rangeto").as[BigInt]
}

      


case class AssignedTo(conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]] = Nil,
  conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  flexpartyproptypableoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.FlexPartyPropTypableOption]] = None,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Flex1PartyPropTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val role = attributes.get("@role") map { _.as[Seq[String]]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[Seq[java.net.URI]]}
  lazy val coversfrom = attributes.get("@coversfrom") map { _.as[javax.xml.datatype.XMLGregorianCalendar]}
  lazy val coversto = attributes.get("@coversto") map { _.as[javax.xml.datatype.XMLGregorianCalendar]}
}

      


case class NewsContentCharacteristics(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val wordcount = attributes.get("@wordcount") map { _.as[BigInt]}
  lazy val linecount = attributes.get("@linecount") map { _.as[BigInt]}
  lazy val pagecount = attributes.get("@pagecount") map { _.as[BigInt]}
  lazy val width = attributes.get("@width") map { _.as[BigInt]}
  lazy val widthunit = attributes.get("@widthunit") map { _.as[String]}
  lazy val widthunituri = attributes.get("@widthunituri") map { _.as[java.net.URI]}
  lazy val height = attributes.get("@height") map { _.as[BigInt]}
  lazy val heightunit = attributes.get("@heightunit") map { _.as[String]}
  lazy val heightunituri = attributes.get("@heightunituri") map { _.as[java.net.URI]}
  lazy val orientation = attributes.get("@orientation") map { _.as[BigInt]}
  lazy val layoutorientation = attributes.get("@layoutorientation") map { _.as[String]}
  lazy val layoutorientationuri = attributes.get("@layoutorientationuri") map { _.as[java.net.URI]}
  lazy val colourspace = attributes.get("@colourspace") map { _.as[String]}
  lazy val colourspaceuri = attributes.get("@colourspaceuri") map { _.as[java.net.URI]}
  lazy val colourindicator = attributes.get("@colourindicator") map { _.as[String]}
  lazy val colourindicatoruri = attributes.get("@colourindicatoruri") map { _.as[java.net.URI]}
  lazy val colourdepth = attributes.get("@colourdepth") map { _.as[BigInt]}
  lazy val resolution = attributes.get("@resolution") map { _.as[BigInt]}
  lazy val duration = attributes.get("@duration") map { _.as[String]}
  lazy val durationunit = attributes.get("@durationunit") map { _.as[String]}
  lazy val durationunituri = attributes.get("@durationunituri") map { _.as[java.net.URI]}
  lazy val audiocodec = attributes.get("@audiocodec") map { _.as[String]}
  lazy val audiocodecuri = attributes.get("@audiocodecuri") map { _.as[java.net.URI]}
  lazy val audiobitrate = attributes.get("@audiobitrate") map { _.as[BigInt]}
  lazy val audiovbr = attributes.get("@audiovbr") map { _.as[Boolean]}
  lazy val audiosamplesize = attributes.get("@audiosamplesize") map { _.as[BigInt]}
  lazy val audiosamplerate = attributes.get("@audiosamplerate") map { _.as[BigInt]}
  lazy val audiochannels = attributes.get("@audiochannels") map { _.as[String]}
  lazy val audiochannelsuri = attributes.get("@audiochannelsuri") map { _.as[java.net.URI]}
  lazy val videocodec = attributes.get("@videocodec") map { _.as[String]}
  lazy val videocodecuri = attributes.get("@videocodecuri") map { _.as[java.net.URI]}
  lazy val videoavgbitrate = attributes.get("@videoavgbitrate") map { _.as[BigInt]}
  lazy val videovbr = attributes.get("@videovbr") map { _.as[Boolean]}
  lazy val videoframerate = attributes.get("@videoframerate") map { _.as[BigDecimal]}
  lazy val videoscan = attributes.get("@videoscan") map { _.as[Videoscan]}
  lazy val videoaspectratio = attributes.get("@videoaspectratio") map { _.as[String]}
  lazy val videosampling = attributes.get("@videosampling") map { _.as[String]}
  lazy val videoscaling = attributes.get("@videoscaling") map { _.as[String]}
  lazy val videoscalinguri = attributes.get("@videoscalinguri") map { _.as[java.net.URI]}
  lazy val videodefinition = attributes.get("@videodefinition") map { _.as[String]}
  lazy val videodefinitionuri = attributes.get("@videodefinitionuri") map { _.as[java.net.URI]}
}

      


case class Planning(g2contentType: Option[org.iptc.sportsml.v3.G2contentType2] = None,
  itemClass: Option[org.iptc.sportsml.v3.QualPropTypable] = None,
  itemCount: Option[org.iptc.sportsml.v3.ItemCount] = None,
  assignedTo: Seq[org.iptc.sportsml.v3.AssignedTo] = Nil,
  scheduled: Option[org.iptc.sportsml.v3.ApproximateDateTimePropType] = None,
  service: Seq[org.iptc.sportsml.v3.QualPropTypable] = Nil,
  descriptiveMetadataGroupOption17: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.DescriptiveMetadataGroupOption1]] = Nil,
  edNote: Seq[org.iptc.sportsml.v3.BlockTypable] = Nil,
  newsContentCharacteristics: Option[org.iptc.sportsml.v3.NewsContentCharacteristics] = None,
  planningExtProperty: Seq[org.iptc.sportsml.v3.Flex2ExtPropType] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val coversfrom = attributes.get("@coversfrom") map { _.as[javax.xml.datatype.XMLGregorianCalendar]}
  lazy val coversto = attributes.get("@coversto") map { _.as[javax.xml.datatype.XMLGregorianCalendar]}
}

      


case class NewsCoverage2(planning: Seq[org.iptc.sportsml.v3.Planning] = Nil,
  delivery: Option[org.iptc.sportsml.v3.Delivery] = None,
  newsCoverageExtProperty: Seq[org.iptc.sportsml.v3.Flex2ExtPropType] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
}

      


case class Delivery(deliveredItemRef: Seq[org.iptc.sportsml.v3.Link1Type] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


case class Party(conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]] = Nil,
  conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  flexpartyproptypableoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.FlexPartyPropTypableOption]] = None,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends FlexPartyPropTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      


case class Action(qualproptypableoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.QualPropTypableOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends QualPropTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val target = attributes.get("@target") map { _.as[String]}
  lazy val targeturi = attributes.get("@targeturi") map { _.as[java.net.URI]}
  lazy val timestamp = attributes.get("@timestamp") map { _.as[javax.xml.datatype.XMLGregorianCalendar]}
}

      


case class Hop(party: Option[org.iptc.sportsml.v3.Party] = None,
  action: Seq[org.iptc.sportsml.v3.Action] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val seq = attributes.get("@seq") map { _.as[BigInt]}
  lazy val timestamp = attributes.get("@timestamp") map { _.as[javax.xml.datatype.XMLGregorianCalendar]}
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


case class HopHistory(hop: Seq[org.iptc.sportsml.v3.Hop] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      

trait Dir

object Dir {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Dir]): Dir = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Dir) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object Ltr extends Dir { override def toString = "ltr" }
case object Rtl extends Dir { override def toString = "rtl" }

trait Videoscan

object Videoscan {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Videoscan]): Videoscan = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Videoscan) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object Progressive extends Videoscan { override def toString = "progressive" }
case object Interlaced extends Videoscan { override def toString = "interlaced" }


/** The type of a property with date and time
*/
trait DateTimePropTypable {
  def value: javax.xml.datatype.XMLGregorianCalendar
  def id: Option[String]
  def creator: Option[String]
  def creatoruri: Option[java.net.URI]
  def modified: Option[String]
  def custom: Option[Boolean]
  def how: Option[String]
  def howuri: Option[java.net.URI]
  def why: Option[String]
  def whyuri: Option[java.net.URI]
  def pubconstraint: Option[Seq[String]]
  def pubconstrainturi: Option[Seq[java.net.URI]]
  def attributes: Map[String, scalaxb.DataRecord[Any]]
}


/** The type of a property with date and time
*/
case class DateTimePropType(value: javax.xml.datatype.XMLGregorianCalendar,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends DateTimePropTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


/** The type of a property with a date (required) and a time (optional)
*/
case class DateOptTimePropType(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends RecurrenceGroupOption1 with RecurrenceGroupOption2 {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


/** The type of a property with date and time - or Nothing
*/
case class DateTimeOrNullPropType(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


/** The type of a calendar date with an optional time part which may be truncated from the seconds part to the month part
*/
case class TruncatedDateTimePropType(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


/** The type of a calendar date with an optional time part and with an optional approximation range for the date.
*/
case class ApproximateDateTimePropType(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends DatesOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val approxstart = attributes.get("@approxstart") map { _.as[String]}
  lazy val approxend = attributes.get("@approxend") map { _.as[String]}
}

      


/** The type for an internationalized and normalized string, where the language and directionality in which the information is writte are indirected
*/
trait IntlStringTypable {
  def value: String
  def id: Option[String]
  def creator: Option[String]
  def creatoruri: Option[java.net.URI]
  def modified: Option[String]
  def custom: Option[Boolean]
  def how: Option[String]
  def howuri: Option[java.net.URI]
  def why: Option[String]
  def whyuri: Option[java.net.URI]
  def pubconstraint: Option[Seq[String]]
  def pubconstrainturi: Option[Seq[java.net.URI]]
  def xmllang: Option[String]
  def dir: Option[org.iptc.sportsml.v3.Dir]
  def attributes: Map[String, scalaxb.DataRecord[Any]]
}


/** The type for an internationalized and normalized string, where the language and directionality in which the information is writte are indirected
*/
case class IntlStringType(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends IntlStringTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      


/** The type for an internationalized and unrestricted string, where the language and directionality in which the information is writte are indirected
*/
trait IntlStringType2able {
  def value: String
  def id: Option[String]
  def creator: Option[String]
  def creatoruri: Option[java.net.URI]
  def modified: Option[String]
  def custom: Option[Boolean]
  def how: Option[String]
  def howuri: Option[java.net.URI]
  def why: Option[String]
  def whyuri: Option[java.net.URI]
  def pubconstraint: Option[Seq[String]]
  def pubconstrainturi: Option[Seq[java.net.URI]]
  def xmllang: Option[String]
  def dir: Option[org.iptc.sportsml.v3.Dir]
  def attributes: Map[String, scalaxb.DataRecord[Any]]
}


/** The type for an internationalized and unrestricted string, where the language and directionality in which the information is writte are indirected
*/
case class IntlStringType2(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends IntlStringType2able {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      


/** The type extending IntlStringType by a version information
*/
trait VersionedStringTypable extends IntlStringTypable {
  def value: String
  def id: Option[String]
  def creator: Option[String]
  def creatoruri: Option[java.net.URI]
  def modified: Option[String]
  def custom: Option[Boolean]
  def how: Option[String]
  def howuri: Option[java.net.URI]
  def why: Option[String]
  def whyuri: Option[java.net.URI]
  def pubconstraint: Option[Seq[String]]
  def pubconstrainturi: Option[Seq[java.net.URI]]
  def xmllang: Option[String]
  def dir: Option[org.iptc.sportsml.v3.Dir]
  def versioninfo: Option[String]
  def attributes: Map[String, scalaxb.DataRecord[Any]]
}


/** The type extending IntlStringType by a version information
*/
case class VersionedStringType(value: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends VersionedStringTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val versioninfo = attributes.get("@versioninfo") map { _.as[String]}
}

      


/** The type to cover all qualifers for an audience property
*/
case class AudienceType(conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]] = Nil,
  conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Flex1PropTypable with AdministrativeMetadataGroupOption1 {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val confidence = attributes.get("@confidence") map { _.as[BigInt]}
  lazy val relevance = attributes.get("@relevance") map { _.as[BigInt]}
  lazy val derivedfrom = attributes.get("@derivedfrom") map { _.as[Seq[String]]}
  lazy val significance = attributes.get("@significance") map { _.as[BigInt]}
}

      


/** The PCL-type for information about the content as natural language string with minimal markup
*/
trait Label1Typable extends GroupOption {
  def id: Option[String]
  def creator: Option[String]
  def creatoruri: Option[java.net.URI]
  def modified: Option[String]
  def custom: Option[Boolean]
  def how: Option[String]
  def howuri: Option[java.net.URI]
  def why: Option[String]
  def whyuri: Option[java.net.URI]
  def pubconstraint: Option[Seq[String]]
  def pubconstrainturi: Option[Seq[java.net.URI]]
  def xmllang: Option[String]
  def dir: Option[org.iptc.sportsml.v3.Dir]
  def role: Option[Seq[String]]
  def roleuri: Option[Seq[java.net.URI]]
  def media: Option[Seq[String]]
  def attributes: Map[String, scalaxb.DataRecord[Any]]
}


/** The PCL-type for information about the content as natural language string with minimal markup
*/
case class Label1Type(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Label1Typable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val role = attributes.get("@role") map { _.as[Seq[String]]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[Seq[java.net.URI]]}
  lazy val media = attributes.get("@media") map { _.as[Seq[String]]}
}

      

trait Label1TypableOption

/** The type for nformation about the content as natural language string with minimal markup and line breaks
*/
trait BlockTypable extends GroupOption with POIDetailsOption with EventDetailsOption {
  def id: Option[String]
  def creator: Option[String]
  def creatoruri: Option[java.net.URI]
  def modified: Option[String]
  def custom: Option[Boolean]
  def how: Option[String]
  def howuri: Option[java.net.URI]
  def why: Option[String]
  def whyuri: Option[java.net.URI]
  def pubconstraint: Option[Seq[String]]
  def pubconstrainturi: Option[Seq[java.net.URI]]
  def xmllang: Option[String]
  def dir: Option[org.iptc.sportsml.v3.Dir]
  def media: Option[Seq[String]]
  def role: Option[Seq[String]]
  def roleuri: Option[java.net.URI]
  def attributes: Map[String, scalaxb.DataRecord[Any]]
}


/** The type for nformation about the content as natural language string with minimal markup and line breaks
*/
case class BlockType(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BlockTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val media = attributes.get("@media") map { _.as[Seq[String]]}
  lazy val role = attributes.get("@role") map { _.as[Seq[String]]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[java.net.URI]}
}

      

trait BlockTypableOption

/** The type for a property with a QCode value in a qcode attribute
*/
trait QCodePropTypable {
  def id: Option[String]
  def creator: Option[String]
  def creatoruri: Option[java.net.URI]
  def modified: Option[String]
  def custom: Option[Boolean]
  def how: Option[String]
  def howuri: Option[java.net.URI]
  def why: Option[String]
  def whyuri: Option[java.net.URI]
  def pubconstraint: Option[Seq[String]]
  def pubconstrainturi: Option[Seq[java.net.URI]]
  def qcode: Option[String]
  def uri: Option[java.net.URI]
  def attributes: Map[String, scalaxb.DataRecord[Any]]
}


/** The type for a property with a QCode value in a qcode attribute
*/
case class QCodePropType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends QCodePropTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
}

      


/** Type type for a property with a  QCode value in a qcode attribute and optional names
*/
trait QualPropTypable extends QCodePropTypable with EventDetailsOption {
  def qualproptypableoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.QualPropTypableOption]]
  def id: Option[String]
  def creator: Option[String]
  def creatoruri: Option[java.net.URI]
  def modified: Option[String]
  def custom: Option[Boolean]
  def how: Option[String]
  def howuri: Option[java.net.URI]
  def why: Option[String]
  def whyuri: Option[java.net.URI]
  def pubconstraint: Option[Seq[String]]
  def pubconstrainturi: Option[Seq[java.net.URI]]
  def qcode: Option[String]
  def uri: Option[java.net.URI]
  def xmllang: Option[String]
  def dir: Option[org.iptc.sportsml.v3.Dir]
  def attributes: Map[String, scalaxb.DataRecord[Any]]
}


/** Type type for a property with a  QCode value in a qcode attribute and optional names
*/
case class QualPropType(qualproptypableoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.QualPropTypableOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends QualPropTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      

trait QualPropTypableOption

/** The type for a property with a QCode, a type and optional names
*/
case class TypedQualPropType(qualproptypableoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.QualPropTypableOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends QualPropTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
}

      


/** Flexible generic type for both controlled and uncontrolled values
*/
trait FlexPropTypable {
  def flexproptypableoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.FlexPropTypableOption]]
  def id: Option[String]
  def creator: Option[String]
  def creatoruri: Option[java.net.URI]
  def modified: Option[String]
  def custom: Option[Boolean]
  def how: Option[String]
  def howuri: Option[java.net.URI]
  def why: Option[String]
  def whyuri: Option[java.net.URI]
  def pubconstraint: Option[Seq[String]]
  def pubconstrainturi: Option[Seq[java.net.URI]]
  def qcode: Option[String]
  def uri: Option[java.net.URI]
  def literal: Option[String]
  def typeValue: Option[String]
  def typeuri: Option[java.net.URI]
  def xmllang: Option[String]
  def dir: Option[org.iptc.sportsml.v3.Dir]
  def attributes: Map[String, scalaxb.DataRecord[Any]]
}


/** Flexible generic type for both controlled and uncontrolled values
*/
case class FlexPropType(flexproptypableoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.FlexPropTypableOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends FlexPropTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      

trait FlexPropTypableOption

/** Flexible type for related concepts for both controlled and uncontrolled values
*/
trait FlexProp2Typable {
  def flexprop2typableoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.FlexProp2TypableOption]]
  def id: Option[String]
  def creator: Option[String]
  def creatoruri: Option[java.net.URI]
  def modified: Option[String]
  def custom: Option[Boolean]
  def how: Option[String]
  def howuri: Option[java.net.URI]
  def why: Option[String]
  def whyuri: Option[java.net.URI]
  def pubconstraint: Option[Seq[String]]
  def pubconstrainturi: Option[Seq[java.net.URI]]
  def qcode: Option[String]
  def uri: Option[java.net.URI]
  def literal: Option[String]
  def typeValue: Option[String]
  def typeuri: Option[java.net.URI]
  def xmllang: Option[String]
  def dir: Option[org.iptc.sportsml.v3.Dir]
  def attributes: Map[String, scalaxb.DataRecord[Any]]
}


/** Flexible type for related concepts for both controlled and uncontrolled values
*/
case class FlexProp2Type(flexprop2typableoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.FlexProp2TypableOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends FlexProp2Typable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      

trait FlexProp2TypableOption

/** Flexible generic type for both controlled and uncontrolled values of a related concept
*/
case class FlexRelatedPropType(flexprop2typableoption: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.FlexProp2TypableOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends FlexProp2Typable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val rel = attributes.get("@rel") map { _.as[String]}
  lazy val reluri = attributes.get("@reluri") map { _.as[java.net.URI]}
}

      


/** Flexible generic PCL-type for both controlled and uncontrolled values
*/
trait Flex1PropTypable {
  def conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]]
  def conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]]
  def any: Seq[scalaxb.DataRecord[Any]]
  def id: Option[String]
  def creator: Option[String]
  def creatoruri: Option[java.net.URI]
  def modified: Option[String]
  def custom: Option[Boolean]
  def how: Option[String]
  def howuri: Option[java.net.URI]
  def why: Option[String]
  def whyuri: Option[java.net.URI]
  def pubconstraint: Option[Seq[String]]
  def pubconstrainturi: Option[Seq[java.net.URI]]
  def qcode: Option[String]
  def uri: Option[java.net.URI]
  def literal: Option[String]
  def typeValue: Option[String]
  def typeuri: Option[java.net.URI]
  def xmllang: Option[String]
  def dir: Option[org.iptc.sportsml.v3.Dir]
  def attributes: Map[String, scalaxb.DataRecord[Any]]
}


/** Flexible generic PCL-type for both controlled and uncontrolled values
*/
case class Flex1PropType(conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]] = Nil,
  conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Flex1PropTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      


/** Flexible generic PCL-type for both controlled and uncontrolled values
*/
case class Flex1RolePropType(conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]] = Nil,
  conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val role = attributes.get("@role") map { _.as[String]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[java.net.URI]}
}

      


/** Flexible generic PCL-type for controlled, uncontrolled values and arbitrary values
*/
trait Flex1ExtPropTypable extends Flex1PropTypable {
  def conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]]
  def conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]]
  def any: Seq[scalaxb.DataRecord[Any]]
  def id: Option[String]
  def creator: Option[String]
  def creatoruri: Option[java.net.URI]
  def modified: Option[String]
  def custom: Option[Boolean]
  def how: Option[String]
  def howuri: Option[java.net.URI]
  def why: Option[String]
  def whyuri: Option[java.net.URI]
  def pubconstraint: Option[Seq[String]]
  def pubconstrainturi: Option[Seq[java.net.URI]]
  def qcode: Option[String]
  def uri: Option[java.net.URI]
  def literal: Option[String]
  def typeValue: Option[String]
  def typeuri: Option[java.net.URI]
  def xmllang: Option[String]
  def dir: Option[org.iptc.sportsml.v3.Dir]
  def valueAttribute: Option[String]
  def valuedatatype: Option[javax.xml.namespace.QName]
  def valueunit: Option[String]
  def valueunituri: Option[java.net.URI]
  def attributes: Map[String, scalaxb.DataRecord[Any]]
}


/** Flexible generic PCL-type for controlled, uncontrolled values and arbitrary values
*/
case class Flex1ExtPropType(conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]] = Nil,
  conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Flex1ExtPropTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
  lazy val valuedatatype = attributes.get("@valuedatatype") map { _.as[javax.xml.namespace.QName]}
  lazy val valueunit = attributes.get("@valueunit") map { _.as[String]}
  lazy val valueunituri = attributes.get("@valueunituri") map { _.as[java.net.URI]}
}

      


/**  Flexible generic PCL-Type for controlled, uncontrolled values and arbitrary values, with mandatory relationship
*/
case class Flex2ExtPropType(conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]] = Nil,
  conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Flex1ExtPropTypable with SchemeMetaOption with GroupOption with HeaderOption2 with RightsInfoTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val valueAttribute = attributes.get("@value") map { _.as[String]}
  lazy val valuedatatype = attributes.get("@valuedatatype") map { _.as[javax.xml.namespace.QName]}
  lazy val valueunit = attributes.get("@valueunit") map { _.as[String]}
  lazy val valueunituri = attributes.get("@valueunituri") map { _.as[java.net.URI]}
  lazy val rel = attributes.get("@rel") map { _.as[String]}
  lazy val reluri = attributes.get("@reluri") map { _.as[java.net.URI]}
  lazy val validfrom = attributes.get("@validfrom") map { _.as[String]}
  lazy val validto = attributes.get("@validto") map { _.as[String]}
}

      


/** Flexible generic PCL-type for both controlled and uncontrolled values, with optional attributes
*/
trait Flex1ConceptPropTypable extends Flex1PropTypable with EventDetailsOption {
  def conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]]
  def conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]]
  def any: Seq[scalaxb.DataRecord[Any]]
  def bag: Option[org.iptc.sportsml.v3.Bag]
  def id: Option[String]
  def creator: Option[String]
  def creatoruri: Option[java.net.URI]
  def modified: Option[String]
  def custom: Option[Boolean]
  def how: Option[String]
  def howuri: Option[java.net.URI]
  def why: Option[String]
  def whyuri: Option[java.net.URI]
  def pubconstraint: Option[Seq[String]]
  def pubconstrainturi: Option[Seq[java.net.URI]]
  def qcode: Option[String]
  def uri: Option[java.net.URI]
  def literal: Option[String]
  def typeValue: Option[String]
  def typeuri: Option[java.net.URI]
  def xmllang: Option[String]
  def dir: Option[org.iptc.sportsml.v3.Dir]
  def confidence: Option[BigInt]
  def relevance: Option[BigInt]
  def derivedfrom: Option[Seq[String]]
  def attributes: Map[String, scalaxb.DataRecord[Any]]
}


/** Flexible generic PCL-type for both controlled and uncontrolled values, with optional attributes
*/
case class Flex1ConceptPropType(conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]] = Nil,
  conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  bag: Option[org.iptc.sportsml.v3.Bag] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Flex1ConceptPropTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val confidence = attributes.get("@confidence") map { _.as[BigInt]}
  lazy val relevance = attributes.get("@relevance") map { _.as[BigInt]}
  lazy val derivedfrom = attributes.get("@derivedfrom") map { _.as[Seq[String]]}
}

      


/** Flexible person data type for both controlled and uncontrolled values
*/
case class FlexPersonPropType(conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]] = Nil,
  conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  personDetails: Option[org.iptc.sportsml.v3.PersonDetails] = None,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      


/** Flexible oraganisation data type for both controlled and uncontrolled values
*/
trait FlexOrganisationPropTypable {
  def conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]]
  def conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]]
  def organisationDetails: Option[org.iptc.sportsml.v3.OrganisationDetails]
  def any: Seq[scalaxb.DataRecord[Any]]
  def id: Option[String]
  def creator: Option[String]
  def creatoruri: Option[java.net.URI]
  def modified: Option[String]
  def custom: Option[Boolean]
  def how: Option[String]
  def howuri: Option[java.net.URI]
  def why: Option[String]
  def whyuri: Option[java.net.URI]
  def pubconstraint: Option[Seq[String]]
  def pubconstrainturi: Option[Seq[java.net.URI]]
  def qcode: Option[String]
  def uri: Option[java.net.URI]
  def literal: Option[String]
  def typeValue: Option[String]
  def typeuri: Option[java.net.URI]
  def xmllang: Option[String]
  def dir: Option[org.iptc.sportsml.v3.Dir]
  def attributes: Map[String, scalaxb.DataRecord[Any]]
}


/** Flexible oraganisation data type for both controlled and uncontrolled values
*/
case class FlexOrganisationPropType(conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]] = Nil,
  conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  organisationDetails: Option[org.iptc.sportsml.v3.OrganisationDetails] = None,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends FlexOrganisationPropTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      


/** Flexible geopolitical area data type for both controlled and uncontrolled values
*/
case class FlexGeoAreaPropType(conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]] = Nil,
  conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  geoAreaDetails: Option[org.iptc.sportsml.v3.GeoAreaDetails] = None,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      


/** Flexible point-of-intrerest data type for both controlled and uncontrolled values
*/
case class FlexPOIPropType(conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]] = Nil,
  conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  POIDetails: Option[org.iptc.sportsml.v3.POIDetails] = None,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      


/** Flexible party (person or organisation) PCL-type for both controlled and uncontrolled values
*/
trait FlexPartyPropTypable {
  def conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]]
  def conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]]
  def flexpartyproptypableoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.FlexPartyPropTypableOption]]
  def any: Seq[scalaxb.DataRecord[Any]]
  def id: Option[String]
  def creator: Option[String]
  def creatoruri: Option[java.net.URI]
  def modified: Option[String]
  def custom: Option[Boolean]
  def how: Option[String]
  def howuri: Option[java.net.URI]
  def why: Option[String]
  def whyuri: Option[java.net.URI]
  def pubconstraint: Option[Seq[String]]
  def pubconstrainturi: Option[Seq[java.net.URI]]
  def qcode: Option[String]
  def uri: Option[java.net.URI]
  def literal: Option[String]
  def typeValue: Option[String]
  def typeuri: Option[java.net.URI]
  def xmllang: Option[String]
  def dir: Option[org.iptc.sportsml.v3.Dir]
  def attributes: Map[String, scalaxb.DataRecord[Any]]
}


/** Flexible party (person or organisation) PCL-type for both controlled and uncontrolled values
*/
case class FlexPartyPropType(conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]] = Nil,
  conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  flexpartyproptypableoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.FlexPartyPropTypableOption]] = None,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends FlexPartyPropTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      

trait FlexPartyPropTypableOption

/** Flexible party (person or organisation) PCL-type for both controlled and uncontrolled values
*/
trait Flex1PartyPropTypable extends FlexPartyPropTypable with AdministrativeMetadataGroupOption1 with EventDetailsOption {
  def conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]]
  def conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]]
  def flexpartyproptypableoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.FlexPartyPropTypableOption]]
  def any: Seq[scalaxb.DataRecord[Any]]
  def id: Option[String]
  def creator: Option[String]
  def creatoruri: Option[java.net.URI]
  def modified: Option[String]
  def custom: Option[Boolean]
  def how: Option[String]
  def howuri: Option[java.net.URI]
  def why: Option[String]
  def whyuri: Option[java.net.URI]
  def pubconstraint: Option[Seq[String]]
  def pubconstrainturi: Option[Seq[java.net.URI]]
  def qcode: Option[String]
  def uri: Option[java.net.URI]
  def literal: Option[String]
  def typeValue: Option[String]
  def typeuri: Option[java.net.URI]
  def xmllang: Option[String]
  def dir: Option[org.iptc.sportsml.v3.Dir]
  def role: Option[Seq[String]]
  def roleuri: Option[Seq[java.net.URI]]
  def attributes: Map[String, scalaxb.DataRecord[Any]]
}


/** Flexible party (person or organisation) PCL-type for both controlled and uncontrolled values
*/
case class Flex1PartyPropType(conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]] = Nil,
  conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  flexpartyproptypableoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.FlexPartyPropTypableOption]] = None,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Flex1PartyPropTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val role = attributes.get("@role") map { _.as[Seq[String]]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[Seq[java.net.URI]]}
}

      


/** Flexible Author (creator or contributor) PCL-type for both controlled and uncontrolled values
*/
case class FlexAuthorPropType(conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]] = Nil,
  conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  flexpartyproptypableoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.FlexPartyPropTypableOption]] = None,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends FlexPartyPropTypable with ContentMetadataCatTypeOption with AdministrativeMetadataGroupOption1 with ObjectDetailsOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val role = attributes.get("@role") map { _.as[Seq[String]]}
  lazy val roleuri = attributes.get("@roleuri") map { _.as[Seq[java.net.URI]]}
  lazy val jobtitle = attributes.get("@jobtitle") map { _.as[String]}
  lazy val jobtitleuri = attributes.get("@jobtitleuri") map { _.as[java.net.URI]}
}

      


/** Flexible location (geopolitical area of point-of-interest) data type for both controlled and uncontrolled values
*/
trait FlexLocationPropTypable extends AdministrativeMetadataGroupOption1 with OrganisationDetailsOption {
  def conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]]
  def conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]]
  def flexlocationproptypableoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.FlexLocationPropTypableOption]]
  def any: Seq[scalaxb.DataRecord[Any]]
  def qcode: Option[String]
  def uri: Option[java.net.URI]
  def literal: Option[String]
  def typeValue: Option[String]
  def typeuri: Option[java.net.URI]
  def id: Option[String]
  def creator: Option[String]
  def creatoruri: Option[java.net.URI]
  def modified: Option[String]
  def custom: Option[Boolean]
  def how: Option[String]
  def howuri: Option[java.net.URI]
  def why: Option[String]
  def whyuri: Option[java.net.URI]
  def pubconstraint: Option[Seq[String]]
  def pubconstrainturi: Option[Seq[java.net.URI]]
  def xmllang: Option[String]
  def dir: Option[org.iptc.sportsml.v3.Dir]
  def attributes: Map[String, scalaxb.DataRecord[Any]]
}


/** Flexible location (geopolitical area of point-of-interest) data type for both controlled and uncontrolled values
*/
case class FlexLocationPropType(conceptDefinitionGroupOption11: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptDefinitionGroupOption1]] = Nil,
  conceptRelationshipsGroupOption12: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.ConceptRelationshipsGroupOption1]] = Nil,
  flexlocationproptypableoption: Option[scalaxb.DataRecord[org.iptc.sportsml.v3.FlexLocationPropTypableOption]] = None,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends FlexLocationPropTypable {
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      

trait FlexLocationPropTypableOption

case class Br(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BlockTypableOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
}

      


case class A(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Label1TypableOption with BlockTypableOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val href = attributes.get("@href") map { _.as[java.net.URI]}
  lazy val hreflang = attributes.get("@hreflang") map { _.as[String]}
  lazy val rel = attributes.get("@rel") map { _.as[String]}
  lazy val rev = attributes.get("@rev") map { _.as[String]}
}

      

trait AOption

case class Span(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Label1TypableOption with BlockTypableOption with AOption with InlineOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
}

      

trait SpanOption

case class Inline(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Label1TypableOption with BlockTypableOption with AOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val qcode = attributes.get("@qcode") map { _.as[String]}
  lazy val uri = attributes.get("@uri") map { _.as[java.net.URI]}
  lazy val literal = attributes.get("@literal") map { _.as[String]}
  lazy val typeValue = attributes.get("@type") map { _.as[String]}
  lazy val typeuri = attributes.get("@typeuri") map { _.as[java.net.URI]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
  lazy val confidence = attributes.get("@confidence") map { _.as[BigInt]}
  lazy val relevance = attributes.get("@relevance") map { _.as[BigInt]}
  lazy val derivedfrom = attributes.get("@derivedfrom") map { _.as[Seq[String]]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
}

      

trait InlineOption

/** Simple W3C Ruby Annotation - see http://www.w3.org/TR/ruby/. 
*/
case class Ruby(rb: String,
  rubyoption: scalaxb.DataRecord[Any],
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Label1TypableOption with BlockTypableOption with AOption with SpanOption with InlineOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val xmllang = attributes.get("@{http://www.w3.org/XML/1998/namespace}lang") map { _.as[String]}
  lazy val dir = attributes.get("@dir") map { _.as[Dir]}
}

      

case class RubySequence1(rp: String,
  rt: String,
  rp: String)

trait RubyOption

case class RRule(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends RecurrenceGroupOption1 {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val freq = attributes("@freq").as[Freq]
  lazy val interval = attributes.get("@interval") map { _.as[BigInt]}
  lazy val until = attributes.get("@until") map { _.as[String]}
  lazy val count = attributes.get("@count") map { _.as[BigInt]}
  lazy val bysecond = attributes.get("@bysecond") map { _.as[Seq[BigInt]]}
  lazy val byminute = attributes.get("@byminute") map { _.as[Seq[BigInt]]}
  lazy val byhour = attributes.get("@byhour") map { _.as[Seq[BigInt]]}
  lazy val byday = attributes.get("@byday") map { _.as[Seq[String]]}
  lazy val bymonthday = attributes.get("@bymonthday") map { _.as[Seq[String]]}
  lazy val bymonth = attributes.get("@bymonth") map { _.as[Seq[BigInt]]}
  lazy val byyearday = attributes.get("@byyearday") map { _.as[Seq[String]]}
  lazy val byweekno = attributes.get("@byweekno") map { _.as[Seq[String]]}
  lazy val bysetpos = attributes.get("@bysetpos") map { _.as[Seq[String]]}
  lazy val wkst = attributes.get("@wkst") map { _.as[Wkst]}
}

      


case class ExRule(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends RecurrenceGroupOption2 {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val creator = attributes.get("@creator") map { _.as[String]}
  lazy val creatoruri = attributes.get("@creatoruri") map { _.as[java.net.URI]}
  lazy val modified = attributes.get("@modified") map { _.as[String]}
  lazy val custom = attributes.get("@custom") map { _.as[Boolean]}
  lazy val how = attributes.get("@how") map { _.as[String]}
  lazy val howuri = attributes.get("@howuri") map { _.as[java.net.URI]}
  lazy val why = attributes.get("@why") map { _.as[String]}
  lazy val whyuri = attributes.get("@whyuri") map { _.as[java.net.URI]}
  lazy val pubconstraint = attributes.get("@pubconstraint") map { _.as[Seq[String]]}
  lazy val pubconstrainturi = attributes.get("@pubconstrainturi") map { _.as[Seq[java.net.URI]]}
  lazy val freq = attributes("@freq").as[Freq]
  lazy val interval = attributes.get("@interval") map { _.as[BigInt]}
  lazy val until = attributes.get("@until") map { _.as[String]}
  lazy val count = attributes.get("@count") map { _.as[BigInt]}
  lazy val bysecond = attributes.get("@bysecond") map { _.as[Seq[BigInt]]}
  lazy val byminute = attributes.get("@byminute") map { _.as[Seq[BigInt]]}
  lazy val byhour = attributes.get("@byhour") map { _.as[Seq[BigInt]]}
  lazy val byday = attributes.get("@byday") map { _.as[Seq[String]]}
  lazy val bymonthday = attributes.get("@bymonthday") map { _.as[Seq[String]]}
  lazy val bymonth = attributes.get("@bymonth") map { _.as[Seq[BigInt]]}
  lazy val byyearday = attributes.get("@byyearday") map { _.as[Seq[String]]}
  lazy val byweekno = attributes.get("@byweekno") map { _.as[Seq[String]]}
  lazy val bysetpos = attributes.get("@bysetpos") map { _.as[Seq[String]]}
  lazy val wkst = attributes.get("@wkst") map { _.as[Wkst]}
}

      

trait Freq

object Freq {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Freq]): Freq = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Freq) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object SECONDLY extends Freq { override def toString = "SECONDLY" }
case object MINUTELY extends Freq { override def toString = "MINUTELY" }
case object HOURLY extends Freq { override def toString = "HOURLY" }
case object DAILY extends Freq { override def toString = "DAILY" }
case object WEEKLY extends Freq { override def toString = "WEEKLY" }
case object MONTHLY extends Freq { override def toString = "MONTHLY" }
case object YEARLY extends Freq { override def toString = "YEARLY" }

trait Wkst

object Wkst {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Wkst]): Wkst = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Wkst) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object MO extends Wkst { override def toString = "MO" }
case object TU extends Wkst { override def toString = "TU" }
case object WE extends Wkst { override def toString = "WE" }
case object TH extends Wkst { override def toString = "TH" }
case object FR extends Wkst { override def toString = "FR" }
case object SA extends Wkst { override def toString = "SA" }
case object SU extends Wkst { override def toString = "SU" }

trait RecurrenceGroupOption1
trait RecurrenceGroupOption2
case class RecurrenceGroupSequence(recurrencegroupoption1: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.RecurrenceGroupOption1]] = Nil,
  recurrencegroupoption2: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.RecurrenceGroupOption2]] = Nil)

trait ConceptRelationshipsGroupOption1
trait DescriptiveMetadataCoreGroupOption1
case class AdministrativeMetadataGroupSequence(urgency: Option[org.iptc.sportsml.v3.Urgency] = None,
  contentCreated: Option[org.iptc.sportsml.v3.TruncatedDateTimePropType] = None,
  contentModified: Option[org.iptc.sportsml.v3.TruncatedDateTimePropType] = None,
  administrativemetadatagroupoption1: Seq[scalaxb.DataRecord[org.iptc.sportsml.v3.AdministrativeMetadataGroupOption1]] = Nil)

trait AdministrativeMetadataGroupOption1
case class ItemManagementGroupSequence(itemClass: org.iptc.sportsml.v3.QualPropTypable,
  provider: org.iptc.sportsml.v3.FlexPartyPropTypable,
  versionCreated: org.iptc.sportsml.v3.DateTimePropTypable,
  firstCreated: Option[org.iptc.sportsml.v3.DateTimePropTypable] = None,
  embargoed: Option[org.iptc.sportsml.v3.DateTimeOrNullPropType] = None,
  pubStatus: Option[org.iptc.sportsml.v3.QualPropTypable] = None,
  role: Option[org.iptc.sportsml.v3.QualPropTypable] = None,
  fileName: Option[org.iptc.sportsml.v3.FileName] = None,
  generator: Seq[org.iptc.sportsml.v3.Generator] = Nil,
  profile: Option[org.iptc.sportsml.v3.VersionedStringTypable] = None,
  service: Seq[org.iptc.sportsml.v3.QualPropTypable] = Nil,
  title: Seq[org.iptc.sportsml.v3.Label1Typable] = Nil,
  edNote: Seq[org.iptc.sportsml.v3.BlockTypable] = Nil,
  memberOf: Seq[org.iptc.sportsml.v3.Flex1PropTypable] = Nil,
  instanceOf: Seq[org.iptc.sportsml.v3.Flex1PropTypable] = Nil,
  signal: Seq[org.iptc.sportsml.v3.Signal] = Nil,
  altRep: Seq[org.iptc.sportsml.v3.AltRep] = Nil,
  deliverableOf: Seq[org.iptc.sportsml.v3.Link1Type] = Nil,
  hash: Seq[org.iptc.sportsml.v3.Hash] = Nil,
  expires: Seq[org.iptc.sportsml.v3.DateOptTimePropType] = Nil,
  origRep: Seq[org.iptc.sportsml.v3.OrigRep] = Nil,
  incomingFeedId: Seq[org.iptc.sportsml.v3.IncomingFeedId] = Nil)

trait DescriptiveMetadataGroupOption1
trait ConceptDefinitionGroupOption1
trait EntityDetailsGroupOption

/** A group of attributes aligning with iCalendar RECUR - see http://www.ietf.org/rfc/rfc2445.txt
*/
case class RecurrenceRuleAttributes(freq: org.iptc.sportsml.v3.Freq,
  interval: Option[BigInt] = None,
  until: Option[String] = None,
  count: Option[BigInt] = None,
  bysecond: Option[Seq[BigInt]] = None,
  byminute: Option[Seq[BigInt]] = None,
  byhour: Option[Seq[BigInt]] = None,
  byday: Option[Seq[String]] = None,
  bymonthday: Option[Seq[String]] = None,
  bymonth: Option[Seq[BigInt]] = None,
  byyearday: Option[Seq[String]] = None,
  byweekno: Option[Seq[String]] = None,
  bysetpos: Option[Seq[String]] = None,
  wkst: Option[org.iptc.sportsml.v3.Wkst] = None)


/** A group of typical physical characteristics of media content 
*/
case class MediaContentCharacteristics1(width: Option[BigInt] = None,
  widthunit: Option[String] = None,
  widthunituri: Option[java.net.URI] = None,
  height: Option[BigInt] = None,
  heightunit: Option[String] = None,
  heightunituri: Option[java.net.URI] = None,
  orientation: Option[BigInt] = None,
  layoutorientation: Option[String] = None,
  layoutorientationuri: Option[java.net.URI] = None,
  colourspace: Option[String] = None,
  colourspaceuri: Option[java.net.URI] = None,
  colourindicator: Option[String] = None,
  colourindicatoruri: Option[java.net.URI] = None,
  videocodec: Option[String] = None,
  videocodecuri: Option[java.net.URI] = None,
  colourdepth: Option[BigInt] = None)


case class ArbitraryValueAttributes(valueAttribute: Option[String] = None,
  valuedatatype: Option[javax.xml.namespace.QName] = None,
  valueunit: Option[String] = None,
  valueunituri: Option[java.net.URI] = None)


/** A group of attributes for ranking properties of the same name
*/
case class RankingAttributes(rank: Option[BigInt] = None)


/** A group of attributes expressing the time period of validity of a relationship
*/
case class TimeValidityAttributes(validfrom: Option[String] = None,
  validto: Option[String] = None)


/** A group of attributes for language and script related information
*/
case class I18nAttributes(xmllang: Option[String] = None,
  dir: Option[org.iptc.sportsml.v3.Dir] = None)


case class DeprecatedLinkAttributes(guidref: Option[String] = None,
  hreftype: Option[String] = None)


/** A group of attributes representing a content type
*/
case class NewsContentTypeAttributes(contenttype: Option[String] = None,
  format: Option[String] = None,
  formaturi: Option[java.net.URI] = None)


/** A group of typical attributes associated with a content rendition
*/
case class NewsContentAttributes(id: Option[String] = None,
  creator: Option[String] = None,
  creatoruri: Option[java.net.URI] = None,
  modified: Option[String] = None,
  custom: Option[Boolean] = None,
  how: Option[String] = None,
  howuri: Option[java.net.URI] = None,
  why: Option[String] = None,
  whyuri: Option[java.net.URI] = None,
  rendition: Option[String] = None,
  renditionuri: Option[java.net.URI] = None,
  generator: Option[String] = None,
  generated: Option[String] = None,
  hascontent: Option[Boolean] = None)


/** A group of attributes pertaining to any kind of link
*/
case class TargetResourceAttributes(href: Option[java.net.URI] = None,
  residref: Option[String] = None,
  version: Option[BigInt] = None,
  persistidref: Option[String] = None,
  contenttype: Option[String] = None,
  contenttypevariant: Option[String] = None,
  format: Option[String] = None,
  formaturi: Option[java.net.URI] = None,
  size: Option[BigInt] = None,
  title: Option[String] = None)


/** A group of attributes for all elements of a G2 Item except its root element, the itemMeta element and all of its children which are mandatory. 
*/
case class CommonPowerAttributes(id: Option[String] = None,
  creator: Option[String] = None,
  creatoruri: Option[java.net.URI] = None,
  modified: Option[String] = None,
  custom: Option[Boolean] = None,
  how: Option[String] = None,
  howuri: Option[java.net.URI] = None,
  why: Option[String] = None,
  whyuri: Option[java.net.URI] = None,
  pubconstraint: Option[Seq[String]] = None,
  pubconstrainturi: Option[Seq[java.net.URI]] = None)


/** A group of attriubutes quantifying the property value
*/
case class QuantifyAttributes(confidence: Option[BigInt] = None,
  relevance: Option[BigInt] = None,
  derivedfrom: Option[Seq[String]] = None)


/** A group of attributes associated with flexible properties
*/
case class FlexAttributes(qcode: Option[String] = None,
  uri: Option[java.net.URI] = None,
  literal: Option[String] = None,
  typeValue: Option[String] = None,
  typeuri: Option[java.net.URI] = None)


/**  A group of attributes to keep track of by whom and when the property value was changed with a persistent ID
*/
case class PersistentEditAttributes(id: Option[String] = None,
  creator: Option[String] = None,
  creatoruri: Option[java.net.URI] = None,
  modified: Option[String] = None)


/**  A group of attributes used for a qualified expression of the property
*/
case class QualifyingAttributes(qcode: Option[String] = None,
  uri: Option[java.net.URI] = None,
  literal: Option[String] = None,
  typeValue: Option[String] = None,
  typeuri: Option[java.net.URI] = None,
  role: Option[String] = None,
  roleuri: Option[java.net.URI] = None)


/** A group of typical physical characteristics of media content 
*/
case class NewsContentCharacteristicsType(wordcount: Option[BigInt] = None,
  linecount: Option[BigInt] = None,
  pagecount: Option[BigInt] = None,
  width: Option[BigInt] = None,
  widthunit: Option[String] = None,
  widthunituri: Option[java.net.URI] = None,
  height: Option[BigInt] = None,
  heightunit: Option[String] = None,
  heightunituri: Option[java.net.URI] = None,
  orientation: Option[BigInt] = None,
  layoutorientation: Option[String] = None,
  layoutorientationuri: Option[java.net.URI] = None,
  colourspace: Option[String] = None,
  colourspaceuri: Option[java.net.URI] = None,
  colourindicator: Option[String] = None,
  colourindicatoruri: Option[java.net.URI] = None,
  colourdepth: Option[BigInt] = None,
  resolution: Option[BigInt] = None,
  duration: Option[String] = None,
  durationunit: Option[String] = None,
  durationunituri: Option[java.net.URI] = None,
  audiocodec: Option[String] = None,
  audiocodecuri: Option[java.net.URI] = None,
  audiobitrate: Option[BigInt] = None,
  audiovbr: Option[Boolean] = None,
  audiosamplesize: Option[BigInt] = None,
  audiosamplerate: Option[BigInt] = None,
  audiochannels: Option[String] = None,
  audiochannelsuri: Option[java.net.URI] = None,
  videocodec: Option[String] = None,
  videocodecuri: Option[java.net.URI] = None,
  videoavgbitrate: Option[BigInt] = None,
  videovbr: Option[Boolean] = None,
  videoframerate: Option[BigDecimal] = None,
  videoscan: Option[org.iptc.sportsml.v3.Videoscan] = None,
  videoaspectratio: Option[String] = None,
  videosampling: Option[String] = None,
  videoscaling: Option[String] = None,
  videoscalinguri: Option[java.net.URI] = None,
  videodefinition: Option[String] = None,
  videodefinitionuri: Option[java.net.URI] = None)

