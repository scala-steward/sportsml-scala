// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package org.iptc.sportsml.v3


/** Metadata about the event itself. | Includes the time left, and where the ball is.
*/
case class AmericanFootballEventMetadataComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EventMetadataComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val clockState = attributes.get("@clock-state") map { _.as[ClockState]}
  lazy val teamInPossessionIdref = attributes.get("@team-in-possession-idref") map { _.as[String]}
  lazy val down = attributes.get("@down") map { _.as[Down]}
  lazy val distanceFor1stDown = attributes.get("@distance-for-1st-down") map { _.as[String]}
  lazy val fieldSide = attributes.get("@field-side") map { _.as[FieldSide]}
  lazy val fieldLine = attributes.get("@field-line") map { _.as[String]}
  lazy val week = attributes.get("@week") map { _.as[String]}
}

      


/** Player statistics for football. | Includes the same elements as team statistics.
*/
case class AmericanFootballPlayerStatsComplexType(statsAmericanFootballOffensive: Seq[org.iptc.sportsml.v3.AmericanFootballStatsOffensiveComplexType] = Nil,
  statsAmericanFootballDefensive: Seq[org.iptc.sportsml.v3.AmericanFootballStatsDefensiveComplexType] = Nil,
  statsAmericanFootballScoring: Seq[org.iptc.sportsml.v3.AmericanFootballStatsScoringComplexType] = Nil,
  statsAmericanFootballSpecialTeams: Seq[org.iptc.sportsml.v3.AmericanFootballStatsSpecialTeamsComplexType] = Nil,
  statsAmericanFootballFumbles: Seq[org.iptc.sportsml.v3.AmericanFootballStatsFumblesComplexType] = Nil,
  statsAmericanFootballPenalties: Seq[org.iptc.sportsml.v3.AmericanFootballStatsPenaltiesComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseAmericanFootballStatsComplexTypable with PlayerStatsComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsCoverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamCoverage = attributes.get("@team-coverage") map { _.as[TeamCoverage]}
  lazy val durationScope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentScope = attributes.get("@alignment-scope") map { _.as[AlignmentScope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordMakingScope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingLabel = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodValue = attributes.get("@period-value") map { _.as[String]}
  lazy val periodType = attributes.get("@period-type") map { _.as[String]}
  lazy val startDateTime = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endDateTime = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodStartDateTime = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodEndDateTime = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalUnitType = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalUnitValue = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventSpan = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentValue = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentType = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitValue = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitType = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationKey = attributes.get("@location-key") map { _.as[String]}
  lazy val venueType = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceType = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatherType = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeValue = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceMaximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceMinimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementUnits = attributes.get("@measurement-units") map { _.as[String]}
}

      


/** Player statistics for football. | Includes the same elements as team statistics.
*/
trait BaseAmericanFootballStatsComplexTypable {
  def statsAmericanFootballOffensive: Seq[org.iptc.sportsml.v3.AmericanFootballStatsOffensiveComplexType]
  def statsAmericanFootballDefensive: Seq[org.iptc.sportsml.v3.AmericanFootballStatsDefensiveComplexType]
  def statsAmericanFootballScoring: Seq[org.iptc.sportsml.v3.AmericanFootballStatsScoringComplexType]
  def statsAmericanFootballSpecialTeams: Seq[org.iptc.sportsml.v3.AmericanFootballStatsSpecialTeamsComplexType]
  def statsAmericanFootballFumbles: Seq[org.iptc.sportsml.v3.AmericanFootballStatsFumblesComplexType]
  def statsAmericanFootballPenalties: Seq[org.iptc.sportsml.v3.AmericanFootballStatsPenaltiesComplexType]
  def id: Option[String]
  def classValue: Option[String]
  def style: Option[String]
  def statsCoverage: Option[String]
  def teamCoverage: Option[org.iptc.sportsml.v3.TeamCoverage]
  def durationScope: Option[String]
  def alignmentScope: Option[org.iptc.sportsml.v3.AlignmentScope]
  def position: Option[String]
  def recordMakingScope: Option[String]
  def scopingLabel: Option[String]
  def periodValue: Option[String]
  def periodType: Option[String]
  def startDateTime: Option[String]
  def endDateTime: Option[String]
  def periodStartDateTime: Option[String]
  def periodEndDateTime: Option[String]
  def temporalUnitType: Option[String]
  def temporalUnitValue: Option[String]
  def eventSpan: Option[BigInt]
  def opponentValue: Option[String]
  def opponentType: Option[String]
  def team: Option[String]
  def competition: Option[String]
  def unitValue: Option[String]
  def unitType: Option[String]
  def situation: Option[String]
  def locationKey: Option[String]
  def venueType: Option[String]
  def surfaceType: Option[String]
  def weatherType: Option[String]
  def scopeValue: Option[String]
  def distance: Option[String]
  def distanceMaximum: Option[String]
  def distanceMinimum: Option[String]
  def measurementUnits: Option[String]
}


/** Player statistics for football. | Includes the same elements as team statistics.
*/
case class BaseAmericanFootballStatsComplexType(statsAmericanFootballOffensive: Seq[org.iptc.sportsml.v3.AmericanFootballStatsOffensiveComplexType] = Nil,
  statsAmericanFootballDefensive: Seq[org.iptc.sportsml.v3.AmericanFootballStatsDefensiveComplexType] = Nil,
  statsAmericanFootballScoring: Seq[org.iptc.sportsml.v3.AmericanFootballStatsScoringComplexType] = Nil,
  statsAmericanFootballSpecialTeams: Seq[org.iptc.sportsml.v3.AmericanFootballStatsSpecialTeamsComplexType] = Nil,
  statsAmericanFootballFumbles: Seq[org.iptc.sportsml.v3.AmericanFootballStatsFumblesComplexType] = Nil,
  statsAmericanFootballPenalties: Seq[org.iptc.sportsml.v3.AmericanFootballStatsPenaltiesComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseAmericanFootballStatsComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsCoverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamCoverage = attributes.get("@team-coverage") map { _.as[TeamCoverage]}
  lazy val durationScope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentScope = attributes.get("@alignment-scope") map { _.as[AlignmentScope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordMakingScope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingLabel = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodValue = attributes.get("@period-value") map { _.as[String]}
  lazy val periodType = attributes.get("@period-type") map { _.as[String]}
  lazy val startDateTime = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endDateTime = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodStartDateTime = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodEndDateTime = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalUnitType = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalUnitValue = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventSpan = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentValue = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentType = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitValue = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitType = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationKey = attributes.get("@location-key") map { _.as[String]}
  lazy val venueType = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceType = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatherType = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeValue = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceMaximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceMinimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementUnits = attributes.get("@measurement-units") map { _.as[String]}
}

      


/** Statistics about a particular team. | Holds elements that divide statistics into categories.
*/
case class AmericanFootballTeamStatsComplexType(statsAmericanFootballOffensive: Seq[org.iptc.sportsml.v3.AmericanFootballStatsOffensiveComplexType] = Nil,
  statsAmericanFootballDefensive: Seq[org.iptc.sportsml.v3.AmericanFootballStatsDefensiveComplexType] = Nil,
  statsAmericanFootballScoring: Seq[org.iptc.sportsml.v3.AmericanFootballStatsScoringComplexType] = Nil,
  statsAmericanFootballSpecialTeams: Seq[org.iptc.sportsml.v3.AmericanFootballStatsSpecialTeamsComplexType] = Nil,
  statsAmericanFootballFumbles: Seq[org.iptc.sportsml.v3.AmericanFootballStatsFumblesComplexType] = Nil,
  statsAmericanFootballPenalties: Seq[org.iptc.sportsml.v3.AmericanFootballStatsPenaltiesComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseAmericanFootballStatsComplexTypable with TeamStatsComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsCoverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamCoverage = attributes.get("@team-coverage") map { _.as[TeamCoverage]}
  lazy val durationScope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentScope = attributes.get("@alignment-scope") map { _.as[AlignmentScope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordMakingScope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingLabel = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodValue = attributes.get("@period-value") map { _.as[String]}
  lazy val periodType = attributes.get("@period-type") map { _.as[String]}
  lazy val startDateTime = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endDateTime = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodStartDateTime = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodEndDateTime = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalUnitType = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalUnitValue = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventSpan = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentValue = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentType = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitValue = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitType = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationKey = attributes.get("@location-key") map { _.as[String]}
  lazy val venueType = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceType = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatherType = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeValue = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceMaximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceMinimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementUnits = attributes.get("@measurement-units") map { _.as[String]}
  lazy val yardsPerAttempt = attributes.get("@yards-per-attempt") map { _.as[String]}
  lazy val numberOfPlays = attributes.get("@number-of-plays") map { _.as[String]}
  lazy val numberOfPlaysGaining = attributes.get("@number-of-plays-gaining") map { _.as[String]}
  lazy val numberOfPlaysLosing = attributes.get("@number-of-plays-losing") map { _.as[String]}
  lazy val averageStartingPosition = attributes.get("@average-starting-position") map { _.as[String]}
  lazy val timeouts = attributes.get("@timeouts") map { _.as[String]}
  lazy val turnoverRatio = attributes.get("@turnover-ratio") map { _.as[String]}
}

      


/** Statistics about a particular team or player's offensive performance. | Further breaks down stats into passing, rushing, etc.
*/
case class AmericanFootballStatsOffensiveComplexType(statsAmericanFootballPassing: Seq[org.iptc.sportsml.v3.AmericanFootballStatsPassingComplexType] = Nil,
  statsAmericanFootballRushing: Seq[org.iptc.sportsml.v3.AmericanFootballStatsRushingComplexType] = Nil,
  statsAmericanFootballDownProgress: Seq[org.iptc.sportsml.v3.AmericanFootballStatsDownProgressComplexType] = Nil,
  statsAmericanFootballSacksAgainst: Seq[org.iptc.sportsml.v3.AmericanFootballStatsSacksAgainstComplexType] = Nil,
  statsAmericanFootballScoring: Seq[org.iptc.sportsml.v3.AmericanFootballStatsScoringComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsCoverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamCoverage = attributes.get("@team-coverage") map { _.as[TeamCoverage]}
  lazy val durationScope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentScope = attributes.get("@alignment-scope") map { _.as[AlignmentScope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordMakingScope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingLabel = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodValue = attributes.get("@period-value") map { _.as[String]}
  lazy val periodType = attributes.get("@period-type") map { _.as[String]}
  lazy val startDateTime = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endDateTime = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodStartDateTime = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodEndDateTime = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalUnitType = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalUnitValue = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventSpan = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentValue = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentType = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitValue = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitType = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationKey = attributes.get("@location-key") map { _.as[String]}
  lazy val venueType = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceType = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatherType = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeValue = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceMaximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceMinimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementUnits = attributes.get("@measurement-units") map { _.as[String]}
  lazy val offensivePlaysYards = attributes.get("@offensive-plays-yards") map { _.as[String]}
  lazy val offensivePlaysNumber = attributes.get("@offensive-plays-number") map { _.as[String]}
  lazy val offensivePlaysAverageYardsPer = attributes.get("@offensive-plays-average-yards-per") map { _.as[String]}
  lazy val offensivePlaysAverageYardsPerGame = attributes.get("@offensive-plays-average-yards-per-game") map { _.as[String]}
  lazy val offensiveRank = attributes.get("@offensive-rank") map { _.as[String]}
  lazy val possessionDuration = attributes.get("@possession-duration") map { _.as[String]}
  lazy val possessionsInside20 = attributes.get("@possessions-inside-20") map { _.as[String]}
  lazy val turnoversGiveaway = attributes.get("@turnovers-giveaway") map { _.as[String]}
  lazy val turnoversGiveawayAverage = attributes.get("@turnovers-giveaway-average") map { _.as[String]}
  lazy val handoffsTotal = attributes.get("@handoffs-total") map { _.as[String]}
  lazy val pitchesTotal = attributes.get("@pitches-total") map { _.as[String]}
  lazy val tacklesOffense = attributes.get("@tackles-offense") map { _.as[String]}
  lazy val tacklesAssistsOffense = attributes.get("@tackles-assists-offense") map { _.as[String]}
}

      


/** Statistics about a particular team or player's passing performance. | Used for quarterbacks and receivers.
*/
case class AmericanFootballStatsPassingComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsCoverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamCoverage = attributes.get("@team-coverage") map { _.as[TeamCoverage]}
  lazy val durationScope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentScope = attributes.get("@alignment-scope") map { _.as[AlignmentScope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordMakingScope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingLabel = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodValue = attributes.get("@period-value") map { _.as[String]}
  lazy val periodType = attributes.get("@period-type") map { _.as[String]}
  lazy val startDateTime = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endDateTime = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodStartDateTime = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodEndDateTime = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalUnitType = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalUnitValue = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventSpan = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentValue = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentType = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitValue = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitType = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationKey = attributes.get("@location-key") map { _.as[String]}
  lazy val venueType = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceType = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatherType = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeValue = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceMaximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceMinimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementUnits = attributes.get("@measurement-units") map { _.as[String]}
  lazy val passesAttempts = attributes.get("@passes-attempts") map { _.as[String]}
  lazy val passesCompletions = attributes.get("@passes-completions") map { _.as[String]}
  lazy val passesCompletionsAveragePerGame = attributes.get("@passes-completions-average-per-game") map { _.as[String]}
  lazy val passesPercentage = attributes.get("@passes-percentage") map { _.as[String]}
  lazy val passesYardsGross = attributes.get("@passes-yards-gross") map { _.as[String]}
  lazy val passesYardsNet = attributes.get("@passes-yards-net") map { _.as[String]}
  lazy val passesYardsLost = attributes.get("@passes-yards-lost") map { _.as[String]}
  lazy val passesYardsPerAttempt = attributes.get("@passes-yards-per-attempt") map { _.as[String]}
  lazy val passesFirstDown = attributes.get("@passes-first-down") map { _.as[String]}
  lazy val passesTouchdownsPercentage = attributes.get("@passes-touchdowns-percentage") map { _.as[String]}
  lazy val passesInterceptions = attributes.get("@passes-interceptions") map { _.as[String]}
  lazy val passesInterceptionsPercentage = attributes.get("@passes-interceptions-percentage") map { _.as[String]}
  lazy val passesInterceptionsYards = attributes.get("@passes-interceptions-yards") map { _.as[String]}
  lazy val passesInterceptionsAverage = attributes.get("@passes-interceptions-average") map { _.as[String]}
  lazy val passesInterceptionsLongest = attributes.get("@passes-interceptions-longest") map { _.as[String]}
  lazy val passesInterceptionsTouchdown = attributes.get("@passes-interceptions-touchdown") map { _.as[String]}
  lazy val passesLongest = attributes.get("@passes-longest") map { _.as[String]}
  lazy val passesAverageYardsPer = attributes.get("@passes-average-yards-per") map { _.as[String]}
  lazy val passesAverageYardsPerGame = attributes.get("@passes-average-yards-per-game") map { _.as[String]}
  lazy val passerRating = attributes.get("@passer-rating") map { _.as[String]}
  lazy val receptionsTotal = attributes.get("@receptions-total") map { _.as[String]}
  lazy val receptionsAveragePerGame = attributes.get("@receptions-average-per-game") map { _.as[String]}
  lazy val receptionsYards = attributes.get("@receptions-yards") map { _.as[String]}
  lazy val receptionsFirstDown = attributes.get("@receptions-first-down") map { _.as[String]}
  lazy val receptionsLongest = attributes.get("@receptions-longest") map { _.as[String]}
  lazy val receptionsLooks = attributes.get("@receptions-looks") map { _.as[String]}
  lazy val receptionsAverageYards = attributes.get("@receptions-average-yards") map { _.as[String]}
  lazy val receptionsAverageYardsPer = attributes.get("@receptions-average-yards-per") map { _.as[String]}
  lazy val passingRank = attributes.get("@passing-rank") map { _.as[String]}
  lazy val timesThrownTotal = attributes.get("@times-thrown-total") map { _.as[String]}
  lazy val receptionsCareer100YardGames = attributes.get("@receptions-career-100-yard-games") map { _.as[String]}
  lazy val passingCareer300YardGames = attributes.get("@passing-career-300-yard-games") map { _.as[String]}
}

      


/** Statistics about a particular team or player's rushing performance. | How well they ran with the ball.
*/
case class AmericanFootballStatsRushingComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsCoverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamCoverage = attributes.get("@team-coverage") map { _.as[TeamCoverage]}
  lazy val durationScope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentScope = attributes.get("@alignment-scope") map { _.as[AlignmentScope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordMakingScope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingLabel = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodValue = attributes.get("@period-value") map { _.as[String]}
  lazy val periodType = attributes.get("@period-type") map { _.as[String]}
  lazy val startDateTime = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endDateTime = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodStartDateTime = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodEndDateTime = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalUnitType = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalUnitValue = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventSpan = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentValue = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentType = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitValue = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitType = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationKey = attributes.get("@location-key") map { _.as[String]}
  lazy val venueType = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceType = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatherType = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeValue = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceMaximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceMinimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementUnits = attributes.get("@measurement-units") map { _.as[String]}
  lazy val rushesAttempts = attributes.get("@rushes-attempts") map { _.as[String]}
  lazy val rushesYards = attributes.get("@rushes-yards") map { _.as[String]}
  lazy val rushesYardsLeft = attributes.get("@rushes-yards-left") map { _.as[String]}
  lazy val rushesYardsMiddle = attributes.get("@rushes-yards-middle") map { _.as[String]}
  lazy val rushesYardsRight = attributes.get("@rushes-yards-right") map { _.as[String]}
  lazy val rushingAverageYardsPer = attributes.get("@rushing-average-yards-per") map { _.as[String]}
  lazy val rushesFirstDown = attributes.get("@rushes-first-down") map { _.as[String]}
  lazy val rushesLongest = attributes.get("@rushes-longest") map { _.as[String]}
  lazy val rushesAverageAttemptsPerGame = attributes.get("@rushes-average-attempts-per-game") map { _.as[String]}
  lazy val rushesAverageYardsPerGame = attributes.get("@rushes-average-yards-per-game") map { _.as[String]}
  lazy val rushingRank = attributes.get("@rushing-rank") map { _.as[String]}
  lazy val rushesCareer100YardGames = attributes.get("@rushes-career-100-yard-games") map { _.as[String]}
}

      


/** Statistics about a particular team or player's performance on downs. | Covers first downs and conversions.
*/
case class AmericanFootballStatsDownProgressComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsCoverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamCoverage = attributes.get("@team-coverage") map { _.as[TeamCoverage]}
  lazy val durationScope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentScope = attributes.get("@alignment-scope") map { _.as[AlignmentScope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordMakingScope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingLabel = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodValue = attributes.get("@period-value") map { _.as[String]}
  lazy val periodType = attributes.get("@period-type") map { _.as[String]}
  lazy val startDateTime = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endDateTime = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodStartDateTime = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodEndDateTime = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalUnitType = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalUnitValue = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventSpan = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentValue = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentType = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitValue = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitType = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationKey = attributes.get("@location-key") map { _.as[String]}
  lazy val venueType = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceType = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatherType = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeValue = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceMaximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceMinimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementUnits = attributes.get("@measurement-units") map { _.as[String]}
  lazy val firstDownsTotal = attributes.get("@first-downs-total") map { _.as[String]}
  lazy val firstDownsPass = attributes.get("@first-downs-pass") map { _.as[String]}
  lazy val firstDownsRun = attributes.get("@first-downs-run") map { _.as[String]}
  lazy val firstDownsPenalty = attributes.get("@first-downs-penalty") map { _.as[String]}
  lazy val firstDownsYards = attributes.get("@first-downs-yards") map { _.as[String]}
  lazy val firstDownsAverageYardsPer = attributes.get("@first-downs-average-yards-per") map { _.as[String]}
  lazy val conversionsSecondDown = attributes.get("@conversions-second-down") map { _.as[String]}
  lazy val conversionsSecondDownAttempts = attributes.get("@conversions-second-down-attempts") map { _.as[String]}
  lazy val conversionsSecondDownPercentage = attributes.get("@conversions-second-down-percentage") map { _.as[String]}
  lazy val conversionsThirdDown = attributes.get("@conversions-third-down") map { _.as[String]}
  lazy val conversionsThirdDownAttempts = attributes.get("@conversions-third-down-attempts") map { _.as[String]}
  lazy val conversionsThirdDownPercentage = attributes.get("@conversions-third-down-percentage") map { _.as[String]}
  lazy val conversionsFourthDown = attributes.get("@conversions-fourth-down") map { _.as[String]}
  lazy val conversionsFourthDownAttempts = attributes.get("@conversions-fourth-down-attempts") map { _.as[String]}
  lazy val conversionsFourthDownPercentage = attributes.get("@conversions-fourth-down-percentage") map { _.as[String]}
}

      


/** Statistics about the sacks suffered by the offensive team. | How many times and the team was sacked, and for how many yards.
*/
case class AmericanFootballStatsSacksAgainstComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsCoverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamCoverage = attributes.get("@team-coverage") map { _.as[TeamCoverage]}
  lazy val durationScope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentScope = attributes.get("@alignment-scope") map { _.as[AlignmentScope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordMakingScope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingLabel = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodValue = attributes.get("@period-value") map { _.as[String]}
  lazy val periodType = attributes.get("@period-type") map { _.as[String]}
  lazy val startDateTime = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endDateTime = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodStartDateTime = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodEndDateTime = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalUnitType = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalUnitValue = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventSpan = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentValue = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentType = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitValue = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitType = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationKey = attributes.get("@location-key") map { _.as[String]}
  lazy val venueType = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceType = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatherType = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeValue = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceMaximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceMinimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementUnits = attributes.get("@measurement-units") map { _.as[String]}
  lazy val sacksAgainstYards = attributes.get("@sacks-against-yards") map { _.as[String]}
  lazy val sacksAgainstTotal = attributes.get("@sacks-against-total") map { _.as[String]}
  lazy val sacksAgainstAverage = attributes.get("@sacks-against-average") map { _.as[String]}
  lazy val sacksAgainstSafeties = attributes.get("@sacks-against-safeties") map { _.as[String]}
}

      


/** Statistics about a particular player or team's defensive performance. | Covers tackles, interceptions, sacks.
*/
case class AmericanFootballStatsDefensiveComplexType(statsAmericanFootballPassing: Seq[org.iptc.sportsml.v3.AmericanFootballStatsPassingComplexType] = Nil,
  statsAmericanFootballRushing: Seq[org.iptc.sportsml.v3.AmericanFootballStatsRushingComplexType] = Nil,
  statsAmericanFootballDownProgress: Seq[org.iptc.sportsml.v3.AmericanFootballStatsDownProgressComplexType] = Nil,
  statsAmericanFootballSacksAgainst: Seq[org.iptc.sportsml.v3.AmericanFootballStatsSacksAgainstComplexType] = Nil,
  statsAmericanFootballScoring: Seq[org.iptc.sportsml.v3.AmericanFootballStatsScoringComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsCoverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamCoverage = attributes.get("@team-coverage") map { _.as[TeamCoverage]}
  lazy val durationScope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentScope = attributes.get("@alignment-scope") map { _.as[AlignmentScope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordMakingScope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingLabel = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodValue = attributes.get("@period-value") map { _.as[String]}
  lazy val periodType = attributes.get("@period-type") map { _.as[String]}
  lazy val startDateTime = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endDateTime = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodStartDateTime = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodEndDateTime = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalUnitType = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalUnitValue = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventSpan = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentValue = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentType = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitValue = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitType = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationKey = attributes.get("@location-key") map { _.as[String]}
  lazy val venueType = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceType = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatherType = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeValue = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceMaximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceMinimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementUnits = attributes.get("@measurement-units") map { _.as[String]}
  lazy val tacklesTotal = attributes.get("@tackles-total") map { _.as[String]}
  lazy val tacklesSolo = attributes.get("@tackles-solo") map { _.as[String]}
  lazy val tacklesAssists = attributes.get("@tackles-assists") map { _.as[String]}
  lazy val tacklesTeam = attributes.get("@tackles-team") map { _.as[String]}
  lazy val quarterbackHurries = attributes.get("@quarterback-hurries") map { _.as[String]}
  lazy val passesDefensed = attributes.get("@passes-defensed") map { _.as[String]}
  lazy val turnoversTakeaway = attributes.get("@turnovers-takeaway") map { _.as[String]}
  lazy val yardsAllowedTotal = attributes.get("@yards-allowed-total") map { _.as[String]}
  lazy val yardsAllowedAverage = attributes.get("@yards-allowed-average") map { _.as[String]}
  lazy val defensivePlaysNumber = attributes.get("@defensive-plays-number") map { _.as[String]}
  lazy val inside20Plays = attributes.get("@inside-20-plays") map { _.as[String]}
  lazy val inside20PointsAgainst = attributes.get("@inside-20-points-against") map { _.as[String]}
  lazy val inside20TouchdownsAgainst = attributes.get("@inside-20-touchdowns-against") map { _.as[String]}
  lazy val inside20TouchdownsAgainstPercentage = attributes.get("@inside-20-touchdowns-against-percentage") map { _.as[String]}
  lazy val defenseRank = attributes.get("@defense-rank") map { _.as[String]}
  lazy val defenseRankPass = attributes.get("@defense-rank-pass") map { _.as[String]}
  lazy val defenseRankRush = attributes.get("@defense-rank-rush") map { _.as[String]}
  lazy val interceptionsTotal = attributes.get("@interceptions-total") map { _.as[String]}
  lazy val interceptionsYards = attributes.get("@interceptions-yards") map { _.as[String]}
  lazy val interceptionsAverage = attributes.get("@interceptions-average") map { _.as[String]}
  lazy val interceptionsPercentage = attributes.get("@interceptions-percentage") map { _.as[String]}
  lazy val interceptionsLongest = attributes.get("@interceptions-longest") map { _.as[String]}
  lazy val interceptionsTouchdown = attributes.get("@interceptions-touchdown") map { _.as[String]}
  lazy val sacksTotal = attributes.get("@sacks-total") map { _.as[String]}
  lazy val sacksYards = attributes.get("@sacks-yards") map { _.as[String]}
  lazy val sacksTeam = attributes.get("@sacks-team") map { _.as[String]}
  lazy val sacksYardsTeam = attributes.get("@sacks-yards-team") map { _.as[String]}
}

      


/** Statistics about a particular team's scoring performance. | For touchdowns, field goals, etc.
*/
case class AmericanFootballStatsScoringComplexType(statsAmericanFootballFieldGoals: Seq[org.iptc.sportsml.v3.AmericanFootballStatsFieldGoalsComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsCoverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamCoverage = attributes.get("@team-coverage") map { _.as[TeamCoverage]}
  lazy val durationScope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentScope = attributes.get("@alignment-scope") map { _.as[AlignmentScope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordMakingScope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingLabel = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodValue = attributes.get("@period-value") map { _.as[String]}
  lazy val periodType = attributes.get("@period-type") map { _.as[String]}
  lazy val startDateTime = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endDateTime = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodStartDateTime = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodEndDateTime = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalUnitType = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalUnitValue = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventSpan = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentValue = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentType = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitValue = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitType = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationKey = attributes.get("@location-key") map { _.as[String]}
  lazy val venueType = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceType = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatherType = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeValue = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceMaximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceMinimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementUnits = attributes.get("@measurement-units") map { _.as[String]}
  lazy val touchdownsTotal = attributes.get("@touchdowns-total") map { _.as[String]}
  lazy val touchdownsPassing = attributes.get("@touchdowns-passing") map { _.as[String]}
  lazy val touchdownsRushing = attributes.get("@touchdowns-rushing") map { _.as[String]}
  lazy val touchdownsSpecialTeams = attributes.get("@touchdowns-special-teams") map { _.as[String]}
  lazy val touchdownsDefensive = attributes.get("@touchdowns-defensive") map { _.as[String]}
  lazy val touchdownsReceptions = attributes.get("@touchdowns-receptions") map { _.as[String]}
  lazy val extraPointsAttempts = attributes.get("@extra-points-attempts") map { _.as[String]}
  lazy val extraPointsMade = attributes.get("@extra-points-made") map { _.as[String]}
  lazy val extraPointsMissed = attributes.get("@extra-points-missed") map { _.as[String]}
  lazy val extraPointsBlocked = attributes.get("@extra-points-blocked") map { _.as[String]}
  lazy val extraPointsPercentage = attributes.get("@extra-points-percentage") map { _.as[String]}
  lazy val fieldGoalAttempts = attributes.get("@field-goal-attempts") map { _.as[String]}
  lazy val fieldGoalsMade = attributes.get("@field-goals-made") map { _.as[String]}
  lazy val fieldGoalsMissed = attributes.get("@field-goals-missed") map { _.as[String]}
  lazy val fieldGoalsBlocked = attributes.get("@field-goals-blocked") map { _.as[String]}
  lazy val fieldGoalLongest = attributes.get("@field-goal-longest") map { _.as[String]}
  lazy val fieldGoalsPercentage = attributes.get("@field-goals-percentage") map { _.as[String]}
  lazy val fieldGoalsAverage = attributes.get("@field-goals-average") map { _.as[String]}
  lazy val safetiesAgainst = attributes.get("@safeties-against") map { _.as[String]}
  lazy val twoPointConversionsAttempts = attributes.get("@two-point-conversions-attempts") map { _.as[String]}
  lazy val twoPointConversionsMade = attributes.get("@two-point-conversions-made") map { _.as[String]}
  lazy val twoPointConversionsMadeRushing = attributes.get("@two-point-conversions-made-rushing") map { _.as[String]}
  lazy val twoPointConversionsMadePassing = attributes.get("@two-point-conversions-made-passing") map { _.as[String]}
  lazy val touchbacks = attributes.get("@touchbacks") map { _.as[String]}
  lazy val singlePoints = attributes.get("@single-points") map { _.as[String]}
  lazy val inside20Points = attributes.get("@inside-20-points") map { _.as[String]}
  lazy val inside20Touchdowns = attributes.get("@inside-20-touchdowns") map { _.as[String]}
  lazy val inside20TouchdownsPercentage = attributes.get("@inside-20-touchdowns-percentage") map { _.as[String]}
}

      


/** Statistics about attempted and made field goals. | Allows for breakdowns between particular yard markers.
*/
case class AmericanFootballStatsFieldGoalsComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsCoverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamCoverage = attributes.get("@team-coverage") map { _.as[TeamCoverage]}
  lazy val durationScope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentScope = attributes.get("@alignment-scope") map { _.as[AlignmentScope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordMakingScope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingLabel = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodValue = attributes.get("@period-value") map { _.as[String]}
  lazy val periodType = attributes.get("@period-type") map { _.as[String]}
  lazy val startDateTime = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endDateTime = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodStartDateTime = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodEndDateTime = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalUnitType = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalUnitValue = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventSpan = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentValue = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentType = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitValue = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitType = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationKey = attributes.get("@location-key") map { _.as[String]}
  lazy val venueType = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceType = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatherType = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeValue = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceMaximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceMinimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementUnits = attributes.get("@measurement-units") map { _.as[String]}
  lazy val minimumDistance = attributes.get("@minimum-distance") map { _.as[String]}
  lazy val maximumDistance = attributes.get("@maximum-distance") map { _.as[String]}
  lazy val attempts = attributes.get("@attempts") map { _.as[String]}
  lazy val made = attributes.get("@made") map { _.as[String]}
}

      


/** Statistics about a particular team's special teams performance. | Covers punts, touchbacks.
*/
case class AmericanFootballStatsSpecialTeamsComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsCoverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamCoverage = attributes.get("@team-coverage") map { _.as[TeamCoverage]}
  lazy val durationScope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentScope = attributes.get("@alignment-scope") map { _.as[AlignmentScope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordMakingScope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingLabel = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodValue = attributes.get("@period-value") map { _.as[String]}
  lazy val periodType = attributes.get("@period-type") map { _.as[String]}
  lazy val startDateTime = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endDateTime = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodStartDateTime = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodEndDateTime = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalUnitType = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalUnitValue = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventSpan = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentValue = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentType = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitValue = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitType = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationKey = attributes.get("@location-key") map { _.as[String]}
  lazy val venueType = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceType = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatherType = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeValue = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceMaximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceMinimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementUnits = attributes.get("@measurement-units") map { _.as[String]}
  lazy val returnsPuntTotal = attributes.get("@returns-punt-total") map { _.as[String]}
  lazy val returnsPuntYards = attributes.get("@returns-punt-yards") map { _.as[String]}
  lazy val returnsPuntAverage = attributes.get("@returns-punt-average") map { _.as[String]}
  lazy val returnsPuntLongest = attributes.get("@returns-punt-longest") map { _.as[String]}
  lazy val returnsPuntTouchdown = attributes.get("@returns-punt-touchdown") map { _.as[String]}
  lazy val returnsPuntAgainstTotal = attributes.get("@returns-punt-against-total") map { _.as[String]}
  lazy val returnsPuntAgainstYards = attributes.get("@returns-punt-against-yards") map { _.as[String]}
  lazy val returnsPuntAgainstAverage = attributes.get("@returns-punt-against-average") map { _.as[String]}
  lazy val returnsPuntAgainstLongest = attributes.get("@returns-punt-against-longest") map { _.as[String]}
  lazy val returnsPuntAgainstTouchdown = attributes.get("@returns-punt-against-touchdown") map { _.as[String]}
  lazy val kickoffsTotal = attributes.get("@kickoffs-total") map { _.as[String]}
  lazy val kickoffsAdjusted = attributes.get("@kickoffs-adjusted") map { _.as[String]}
  lazy val kickoffsToInside20 = attributes.get("@kickoffs-to-inside-20") map { _.as[String]}
  lazy val kickoffsDriveStartAgainstAverage = attributes.get("@kickoffs-drive-start-against-average") map { _.as[String]}
  lazy val onsideKicksAttempted = attributes.get("@onside-kicks-attempted") map { _.as[String]}
  lazy val onsideKicksRecovered = attributes.get("@onside-kicks-recovered") map { _.as[String]}
  lazy val returnsKickoffTotal = attributes.get("@returns-kickoff-total") map { _.as[String]}
  lazy val returnsKickoffYards = attributes.get("@returns-kickoff-yards") map { _.as[String]}
  lazy val returnsKickoffAverage = attributes.get("@returns-kickoff-average") map { _.as[String]}
  lazy val returnsKickoffLongest = attributes.get("@returns-kickoff-longest") map { _.as[String]}
  lazy val returnsKickoffTouchdown = attributes.get("@returns-kickoff-touchdown") map { _.as[String]}
  lazy val returnsKickoffAdjusted = attributes.get("@returns-kickoff-adjusted") map { _.as[String]}
  lazy val returnsKickoffInside20 = attributes.get("@returns-kickoff-inside-20") map { _.as[String]}
  lazy val returnsKickoffDriveStartAverage = attributes.get("@returns-kickoff-drive-start-average") map { _.as[String]}
  lazy val returnsKickoffAgainstTotal = attributes.get("@returns-kickoff-against-total") map { _.as[String]}
  lazy val returnsKickoffAgainstYards = attributes.get("@returns-kickoff-against-yards") map { _.as[String]}
  lazy val returnsKickoffAgainstAverage = attributes.get("@returns-kickoff-against-average") map { _.as[String]}
  lazy val returnsKickoffAgainstLongest = attributes.get("@returns-kickoff-against-longest") map { _.as[String]}
  lazy val returnsKickoffAgainstTouchdown = attributes.get("@returns-kickoff-against-touchdown") map { _.as[String]}
  lazy val returnsTotal = attributes.get("@returns-total") map { _.as[String]}
  lazy val returnsYards = attributes.get("@returns-yards") map { _.as[String]}
  lazy val puntsTotal = attributes.get("@punts-total") map { _.as[String]}
  lazy val puntsYardsGross = attributes.get("@punts-yards-gross") map { _.as[String]}
  lazy val puntsYardsNet = attributes.get("@punts-yards-net") map { _.as[String]}
  lazy val puntsLongest = attributes.get("@punts-longest") map { _.as[String]}
  lazy val puntsInside20 = attributes.get("@punts-inside-20") map { _.as[String]}
  lazy val puntsInside20Percentage = attributes.get("@punts-inside-20-percentage") map { _.as[String]}
  lazy val puntsAverage = attributes.get("@punts-average") map { _.as[String]}
  lazy val puntsAverageNet = attributes.get("@punts-average-net") map { _.as[String]}
  lazy val puntsAgainstTotal = attributes.get("@punts-against-total") map { _.as[String]}
  lazy val puntsAgainstYardsGross = attributes.get("@punts-against-yards-gross") map { _.as[String]}
  lazy val puntsAgainstYardsNet = attributes.get("@punts-against-yards-net") map { _.as[String]}
  lazy val puntsAgainstLongest = attributes.get("@punts-against-longest") map { _.as[String]}
  lazy val puntsAgainstInside20 = attributes.get("@punts-against-inside-20") map { _.as[String]}
  lazy val puntsAgainstInside20Percentage = attributes.get("@punts-against-inside-20-percentage") map { _.as[String]}
  lazy val puntsAgainstAverage = attributes.get("@punts-against-average") map { _.as[String]}
  lazy val puntsAgainstAverageNet = attributes.get("@punts-against-average-net") map { _.as[String]}
  lazy val puntsBlocked = attributes.get("@punts-blocked") map { _.as[String]}
  lazy val puntsAgainstBlocked = attributes.get("@punts-against-blocked") map { _.as[String]}
  lazy val touchbacksTotal = attributes.get("@touchbacks-total") map { _.as[String]}
  lazy val touchbacksTotalPercentage = attributes.get("@touchbacks-total-percentage") map { _.as[String]}
  lazy val touchbacksKickoffs = attributes.get("@touchbacks-kickoffs") map { _.as[String]}
  lazy val touchbacksKickoffsPercentage = attributes.get("@touchbacks-kickoffs-percentage") map { _.as[String]}
  lazy val touchbacksPunts = attributes.get("@touchbacks-punts") map { _.as[String]}
  lazy val touchbacksPuntsPercentage = attributes.get("@touchbacks-punts-percentage") map { _.as[String]}
  lazy val touchbacksInterceptions = attributes.get("@touchbacks-interceptions") map { _.as[String]}
  lazy val touchbacksInterceptionsPercentage = attributes.get("@touchbacks-interceptions-percentage") map { _.as[String]}
  lazy val touchbacksPuntsAgainst = attributes.get("@touchbacks-punts-against") map { _.as[String]}
  lazy val fairCatches = attributes.get("@fair-catches") map { _.as[String]}
  lazy val fairCatchesAgainst = attributes.get("@fair-catches-against") map { _.as[String]}
  lazy val totalReturnYardageNotKickoffs = attributes.get("@total-return-yardage-not-kickoffs") map { _.as[String]}
  lazy val touchdownsAgainst = attributes.get("@touchdowns-against") map { _.as[String]}
  lazy val tacklesSpecialTeams = attributes.get("@tackles-special-teams") map { _.as[String]}
  lazy val tacklesAssistsSpecialTeams = attributes.get("@tackles-assists-special-teams") map { _.as[String]}
  lazy val extraPointsAgainstMade = attributes.get("@extra-points-against-made") map { _.as[String]}
  lazy val extraPointsAgainstMissed = attributes.get("@extra-points-against-missed") map { _.as[String]}
  lazy val extraPointsAgainstBlocked = attributes.get("@extra-points-against-blocked") map { _.as[String]}
  lazy val fieldGoalsAgainstMade = attributes.get("@field-goals-against-made") map { _.as[String]}
  lazy val fieldGoalsAgainstMissed = attributes.get("@field-goals-against-missed") map { _.as[String]}
  lazy val fieldGoalsAgainstBlocked = attributes.get("@field-goals-against-blocked") map { _.as[String]}
}

      


/** For tracking fumble stats. | Covers teams that do the fumbling and the recovering.
*/
case class AmericanFootballStatsFumblesComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsCoverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamCoverage = attributes.get("@team-coverage") map { _.as[TeamCoverage]}
  lazy val durationScope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentScope = attributes.get("@alignment-scope") map { _.as[AlignmentScope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordMakingScope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingLabel = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodValue = attributes.get("@period-value") map { _.as[String]}
  lazy val periodType = attributes.get("@period-type") map { _.as[String]}
  lazy val startDateTime = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endDateTime = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodStartDateTime = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodEndDateTime = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalUnitType = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalUnitValue = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventSpan = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentValue = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentType = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitValue = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitType = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationKey = attributes.get("@location-key") map { _.as[String]}
  lazy val venueType = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceType = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatherType = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeValue = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceMaximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceMinimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementUnits = attributes.get("@measurement-units") map { _.as[String]}
  lazy val fumblesCommitted = attributes.get("@fumbles-committed") map { _.as[String]}
  lazy val fumblesForced = attributes.get("@fumbles-forced") map { _.as[String]}
  lazy val fumblesRecovered = attributes.get("@fumbles-recovered") map { _.as[String]}
  lazy val fumblesLost = attributes.get("@fumbles-lost") map { _.as[String]}
  lazy val fumblesLostAveragePerGame = attributes.get("@fumbles-lost-average-per-game") map { _.as[String]}
  lazy val fumblesYardsGained = attributes.get("@fumbles-yards-gained") map { _.as[String]}
  lazy val fumblesOwnCommitted = attributes.get("@fumbles-own-committed") map { _.as[String]}
  lazy val fumblesOwnRecovered = attributes.get("@fumbles-own-recovered") map { _.as[String]}
  lazy val fumblesOwnLost = attributes.get("@fumbles-own-lost") map { _.as[String]}
  lazy val fumblesOwnYardsGained = attributes.get("@fumbles-own-yards-gained") map { _.as[String]}
  lazy val fumblesOwnTouchdowns = attributes.get("@fumbles-own-touchdowns") map { _.as[String]}
  lazy val fumblesOpposingCommitted = attributes.get("@fumbles-opposing-committed") map { _.as[String]}
  lazy val fumblesOpposingRecovered = attributes.get("@fumbles-opposing-recovered") map { _.as[String]}
  lazy val fumblesOpposingRecoveredAveragePerGame = attributes.get("@fumbles-opposing-recovered-average-per-game") map { _.as[String]}
  lazy val fumblesOpposingLost = attributes.get("@fumbles-opposing-lost") map { _.as[String]}
  lazy val fumblesOpposingYardsGained = attributes.get("@fumbles-opposing-yards-gained") map { _.as[String]}
  lazy val fumblesOpposingTouchdowns = attributes.get("@fumbles-opposing-touchdowns") map { _.as[String]}
  lazy val fumblesCommittedDefense = attributes.get("@fumbles-committed-defense") map { _.as[String]}
  lazy val fumblesLostDefense = attributes.get("@fumbles-lost-defense") map { _.as[String]}
  lazy val fumblesForcedDefense = attributes.get("@fumbles-forced-defense") map { _.as[String]}
  lazy val fumblesRecoveredDefense = attributes.get("@fumbles-recovered-defense") map { _.as[String]}
  lazy val fumblesRecoveredYardsDefense = attributes.get("@fumbles-recovered-yards-defense") map { _.as[String]}
  lazy val fumblesCommittedSpecialTeams = attributes.get("@fumbles-committed-special-teams") map { _.as[String]}
  lazy val fumblesLostSpecialTeams = attributes.get("@fumbles-lost-special-teams") map { _.as[String]}
  lazy val fumblesForcedSpecialTeams = attributes.get("@fumbles-forced-special-teams") map { _.as[String]}
  lazy val fumblesRecoveredSpecialTeams = attributes.get("@fumbles-recovered-special-teams") map { _.as[String]}
  lazy val fumblesRecoveredYardsSpecialTeams = attributes.get("@fumbles-recovered-yards-special-teams") map { _.as[String]}
  lazy val fumblesCommittedOther = attributes.get("@fumbles-committed-other") map { _.as[String]}
  lazy val fumblesLostOther = attributes.get("@fumbles-lost-other") map { _.as[String]}
  lazy val fumblesForcedOther = attributes.get("@fumbles-forced-other") map { _.as[String]}
  lazy val fumblesRecoveredOther = attributes.get("@fumbles-recovered-other") map { _.as[String]}
  lazy val fumblesRecoveredYardsOther = attributes.get("@fumbles-recovered-yards-other") map { _.as[String]}
  lazy val touchbacksFumbles = attributes.get("@touchbacks-fumbles") map { _.as[String]}
  lazy val touchbacksFumblesPercentage = attributes.get("@touchbacks-fumbles-percentage") map { _.as[String]}
}

      


/** Statistics about penalties. | Applies to both offensive and defensive penalties.
*/
case class AmericanFootballStatsPenaltiesComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsCoverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamCoverage = attributes.get("@team-coverage") map { _.as[TeamCoverage]}
  lazy val durationScope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentScope = attributes.get("@alignment-scope") map { _.as[AlignmentScope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordMakingScope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingLabel = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodValue = attributes.get("@period-value") map { _.as[String]}
  lazy val periodType = attributes.get("@period-type") map { _.as[String]}
  lazy val startDateTime = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endDateTime = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodStartDateTime = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodEndDateTime = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalUnitType = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalUnitValue = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventSpan = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentValue = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentType = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitValue = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitType = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationKey = attributes.get("@location-key") map { _.as[String]}
  lazy val venueType = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceType = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatherType = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeValue = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceMaximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceMinimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementUnits = attributes.get("@measurement-units") map { _.as[String]}
  lazy val penaltiesTotal = attributes.get("@penalties-total") map { _.as[String]}
  lazy val penaltyYards = attributes.get("@penalty-yards") map { _.as[String]}
  lazy val penaltyFirstDowns = attributes.get("@penalty-first-downs") map { _.as[String]}
  lazy val penaltyOpponentYards = attributes.get("@penalty-opponent-yards") map { _.as[String]}
  lazy val penaltiesOpponentTotal = attributes.get("@penalties-opponent-total") map { _.as[String]}
  lazy val penaltiesChallenged = attributes.get("@penalties-challenged") map { _.as[String]}
  lazy val penaltiesReviewed = attributes.get("@penalties-reviewed") map { _.as[String]}
  lazy val penaltiesOverturned = attributes.get("@penalties-overturned") map { _.as[String]}
}

      

trait ClockState

object ClockState {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.ClockState]): ClockState = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: ClockState) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object Stopped extends ClockState { override def toString = "stopped" }
case object Running extends ClockState { override def toString = "running" }

trait Down

object Down {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Down]): Down = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Down) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object Number1 extends Down { override def toString = "1" }
case object Number2 extends Down { override def toString = "2" }
case object Number3 extends Down { override def toString = "3" }
case object Number4 extends Down { override def toString = "4" }
case object Number5 extends Down { override def toString = "5" }

trait FieldSide

object FieldSide {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.FieldSide]): FieldSide = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: FieldSide) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object Home extends FieldSide { override def toString = "home" }
case object Away extends FieldSide { override def toString = "away" }


case class EventStateAmericanFootball(clockState: Option[org.iptc.sportsml.v3.ClockState] = None,
  teamInPossessionIdref: Option[String] = None,
  down: Option[org.iptc.sportsml.v3.Down] = None,
  distanceFor1stDown: Option[String] = None,
  fieldSide: Option[org.iptc.sportsml.v3.FieldSide] = None,
  fieldLine: Option[String] = None)


