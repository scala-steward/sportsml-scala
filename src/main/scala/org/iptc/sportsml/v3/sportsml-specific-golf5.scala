// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package org.iptc.sportsml.v3


/** Holds metadata about a golf tournament. | Currently only holds the rank of the team. ???
*/
case class GolfTournamentMetadataComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends TournamentMetadataComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
}

      


/** Metadata about a particular division within a golf tournament. | Includes information about the course as a whole.
*/
case class GolfTournamentDivisionMetadataComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends TournamentDivisionMetadataComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val courseu45yardage = attributes.get("@course-yardage") map { _.as[String]}
  lazy val courseu45par = attributes.get("@course-par") map { _.as[String]}
}

      


/** Holds event metadata specific to golf. | Includes data about the course on which the event is held.
*/
case class GolfEventMetadataComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EventMetadataComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val round = attributes.get("@round") map { _.as[String]}
  lazy val hole = attributes.get("@hole") map { _.as[String]}
  lazy val strokes = attributes.get("@strokes") map { _.as[String]}
  lazy val score = attributes.get("@score") map { _.as[String]}
  lazy val scoreu45againstu45par = attributes.get("@score-against-par") map { _.as[String]}
  lazy val courseu45yardage = attributes.get("@course-yardage") map { _.as[String]}
  lazy val courseu45par = attributes.get("@course-par") map { _.as[String]}
  lazy val courseu45rating = attributes.get("@course-rating") map { _.as[String]}
  lazy val slopeu45rating = attributes.get("@slope-rating") map { _.as[String]}
}

      


/** Holds metadata about a team (foursome perhaps) playing in the match. | Currently only holds the rank of the team.
*/
case class GolfTeamMetadataComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseGolfMetadataComplexTypable with TeamMetadataComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val rank = attributes.get("@rank") map { _.as[String]}
}

      


/** Holds metadata about a golf player. | Currently only holds the rank of the player.
*/
case class GolfPlayerMetadataComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseGolfMetadataComplexTypable with PlayerMetadataComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val rank = attributes.get("@rank") map { _.as[String]}
}

      


/** Holds metadata about a golf player. | Currently only holds the rank of the player.
*/
trait BaseGolfMetadataComplexTypable {
  def id: Option[String]
  def classValue: Option[String]
  def style: Option[String]
  def rank: Option[String]
}


/** Holds metadata about a golf player. | Currently only holds the rank of the player.
*/
case class BaseGolfMetadataComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseGolfMetadataComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val rank = attributes.get("@rank") map { _.as[String]}
}

      


/** Holds statistics particular to the player. | Includes performance statistics during the timespan described in date-coverage-scope attributes.
*/
case class GolfPlayerStatsComplexType(statsu45golf: Option[org.iptc.sportsml.v3.GolfStatsComplexType] = None,
  statsu45golfu45round: Seq[org.iptc.sportsml.v3.GolfStatsRoundComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseGolfStatsComplexTypable with PlayerStatsComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val handicap = attributes.get("@handicap") map { _.as[String]}
}

      


/** Holds statistics particular to a team of golf players.
*/
trait BaseGolfStatsComplexTypable {
  def statsu45golf: Option[org.iptc.sportsml.v3.GolfStatsComplexType]
  def statsu45golfu45round: Seq[org.iptc.sportsml.v3.GolfStatsRoundComplexType]
  def id: Option[String]
  def classValue: Option[String]
  def style: Option[String]
  def statsu45coverage: Option[String]
  def teamu45coverage: Option[org.iptc.sportsml.v3.Teamu45coverage]
  def durationu45scope: Option[String]
  def alignmentu45scope: Option[org.iptc.sportsml.v3.Alignmentu45scope]
  def position: Option[String]
  def recordu45makingu45scope: Option[String]
  def scopingu45label: Option[String]
  def periodu45value: Option[String]
  def periodu45type: Option[String]
  def startu45dateu45time: Option[String]
  def endu45dateu45time: Option[String]
  def periodu45startu45dateu45time: Option[String]
  def periodu45endu45dateu45time: Option[String]
  def temporalu45unitu45type: Option[String]
  def temporalu45unitu45value: Option[String]
  def eventu45span: Option[BigInt]
  def opponentu45value: Option[String]
  def opponentu45type: Option[String]
  def team: Option[String]
  def competition: Option[String]
  def unitu45value: Option[String]
  def unitu45type: Option[String]
  def situation: Option[String]
  def locationu45key: Option[String]
  def venueu45type: Option[String]
  def surfaceu45type: Option[String]
  def weatheru45type: Option[String]
  def scopeu45value: Option[String]
  def distance: Option[String]
  def distanceu45maximum: Option[String]
  def distanceu45minimum: Option[String]
  def measurementu45units: Option[String]
}


/** Holds statistics particular to a team of golf players.
*/
case class BaseGolfStatsComplexType(statsu45golf: Option[org.iptc.sportsml.v3.GolfStatsComplexType] = None,
  statsu45golfu45round: Seq[org.iptc.sportsml.v3.GolfStatsRoundComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseGolfStatsComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
}

      


case class GolfStatsComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val rounds = attributes.get("@rounds") map { _.as[String]}
  lazy val average = attributes.get("@average") map { _.as[String]}
  lazy val distanceu45longest = attributes.get("@distance-longest") map { _.as[String]}
  lazy val distanceu45rank = attributes.get("@distance-rank") map { _.as[String]}
  lazy val drives = attributes.get("@drives") map { _.as[String]}
  lazy val totalu45rounds = attributes.get("@total-rounds") map { _.as[String]}
  lazy val totalu45strokes = attributes.get("@total-strokes") map { _.as[String]}
  lazy val totalu45holes = attributes.get("@total-holes") map { _.as[String]}
  lazy val totalu45putts = attributes.get("@total-putts") map { _.as[String]}
  lazy val totalu45points = attributes.get("@total-points") map { _.as[String]}
  lazy val totalu45driving = attributes.get("@total-driving") map { _.as[String]}
  lazy val totalu45paru45oru45less = attributes.get("@total-par-or-less") map { _.as[String]}
  lazy val birdies = attributes.get("@birdies") map { _.as[String]}
  lazy val birdiesu45rank = attributes.get("@birdies-rank") map { _.as[String]}
  lazy val eagles = attributes.get("@eagles") map { _.as[String]}
  lazy val eaglesu45rank = attributes.get("@eagles-rank") map { _.as[String]}
  lazy val saves = attributes.get("@saves") map { _.as[String]}
  lazy val savesu45rank = attributes.get("@saves-rank") map { _.as[String]}
  lazy val bunkers = attributes.get("@bunkers") map { _.as[String]}
  lazy val eagleu45peru45holesu45frequency = attributes.get("@eagle-per-holes-frequency") map { _.as[String]}
  lazy val greensu45hit = attributes.get("@greens-hit") map { _.as[String]}
  lazy val greensu45hitu45rank = attributes.get("@greens-hit-rank") map { _.as[String]}
  lazy val greensu45inu45regulationu45missed = attributes.get("@greens-in-regulation-missed") map { _.as[String]}
  lazy val greensu45inu45regulationu45putting = attributes.get("@greens-in-regulation-putting") map { _.as[String]}
  lazy val greensu45inu45regulationu45rank = attributes.get("@greens-in-regulation-rank") map { _.as[String]}
  lazy val fairwaysu45hit = attributes.get("@fairways-hit") map { _.as[String]}
  lazy val fairwaysu45possible = attributes.get("@fairways-possible") map { _.as[String]}
  lazy val puttsu45peru45round = attributes.get("@putts-per-round") map { _.as[String]}
  lazy val puttsu45peru45roundu45rank = attributes.get("@putts-per-round-rank") map { _.as[String]}
  lazy val holesu45underu45par = attributes.get("@holes-under-par") map { _.as[String]}
  lazy val scoringu45adjustment = attributes.get("@scoring-adjustment") map { _.as[String]}
  lazy val finishesu45topu4510 = attributes.get("@finishes-top-10") map { _.as[String]}
  lazy val finishesu45firstu45place = attributes.get("@finishes-first-place") map { _.as[String]}
  lazy val finishesu45secondu45place = attributes.get("@finishes-second-place") map { _.as[String]}
  lazy val performanceu45paru453 = attributes.get("@performance-par-3") map { _.as[String]}
  lazy val performanceu45paru454 = attributes.get("@performance-par-4") map { _.as[String]}
  lazy val performanceu45paru455 = attributes.get("@performance-par-5") map { _.as[String]}
  lazy val money = attributes.get("@money") map { _.as[String]}
  lazy val moneyu45value = attributes.get("@money-value") map { _.as[String]}
  lazy val points = attributes.get("@points") map { _.as[String]}
  lazy val pointsu45lost = attributes.get("@points-lost") map { _.as[String]}
  lazy val pointsu45gained = attributes.get("@points-gained") map { _.as[String]}
  lazy val driveu45accuracy = attributes.get("@drive-accuracy") map { _.as[String]}
  lazy val driveu45accuracyu45rank = attributes.get("@drive-accuracy-rank") map { _.as[String]}
  lazy val roundsu45underu45par = attributes.get("@rounds-under-par") map { _.as[String]}
  lazy val bogeys = attributes.get("@bogeys") map { _.as[String]}
  lazy val bogeysu45rank = attributes.get("@bogeys-rank") map { _.as[String]}
  lazy val doubleu45bogeys = attributes.get("@double-bogeys") map { _.as[String]}
  lazy val doubleu45bogeysu45rank = attributes.get("@double-bogeys-rank") map { _.as[String]}
  lazy val finishu45other = attributes.get("@finish-other") map { _.as[String]}
  lazy val finishu45otheru45rank = attributes.get("@finish-other-rank") map { _.as[String]}
  lazy val pars = attributes.get("@pars") map { _.as[String]}
  lazy val parsu45rank = attributes.get("@pars-rank") map { _.as[String]}
}

      


/** Statistics pertinent to a round within a tournament. | Allows for hole-by-hole breakdowns.
*/
case class GolfStatsRoundComplexType(statsu45golf: Option[org.iptc.sportsml.v3.GolfStatsComplexType] = None,
  statsu45golfu45hole: Seq[org.iptc.sportsml.v3.GolfStatsHoleComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val par = attributes.get("@par") map { _.as[String]}
  lazy val strokes = attributes.get("@strokes") map { _.as[String]}
  lazy val score = attributes.get("@score") map { _.as[String]}
  lazy val scoreu45againstu45par = attributes.get("@score-against-par") map { _.as[String]}
  lazy val roundu45number = attributes.get("@round-number") map { _.as[String]}
}

      

trait Holeu45type

object Holeu45type {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Holeu45type]): Holeu45type = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Holeu45type) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object Regular extends Holeu45type { override def toString = "regular" }
case object Playoff extends Holeu45type { override def toString = "playoff" }
case object Suddenu45death extends Holeu45type { override def toString = "sudden-death" }


/** Statistics pertinent to a particular hole within a golf round. | Includes what score was recorded at that hole, and the par value of the hole.
*/
case class GolfStatsHoleComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val par = attributes.get("@par") map { _.as[String]}
  lazy val strokes = attributes.get("@strokes") map { _.as[String]}
  lazy val score = attributes.get("@score") map { _.as[String]}
  lazy val scoreu45againstu45par = attributes.get("@score-against-par") map { _.as[String]}
  lazy val holeu45type = attributes.get("@hole-type") map { _.as[Holeu45type]}
  lazy val hole = attributes.get("@hole") map { _.as[String]}
}

      


case class EventStateGolf(round: Option[String] = None,
  hole: Option[String] = None,
  strokes: Option[String] = None,
  score: Option[String] = None,
  scoreu45againstu45par: Option[String] = None)


case class BaseGolfStats(id: Option[String] = None,
  classValue: Option[String] = None,
  style: Option[String] = None,
  statsu45coverage: Option[String] = None,
  teamu45coverage: Option[org.iptc.sportsml.v3.Teamu45coverage] = None,
  durationu45scope: Option[String] = None,
  alignmentu45scope: Option[org.iptc.sportsml.v3.Alignmentu45scope] = None,
  position: Option[String] = None,
  recordu45makingu45scope: Option[String] = None,
  scopingu45label: Option[String] = None,
  periodu45value: Option[String] = None,
  periodu45type: Option[String] = None,
  startu45dateu45time: Option[String] = None,
  endu45dateu45time: Option[String] = None,
  periodu45startu45dateu45time: Option[String] = None,
  periodu45endu45dateu45time: Option[String] = None,
  temporalu45unitu45type: Option[String] = None,
  temporalu45unitu45value: Option[String] = None,
  eventu45span: Option[BigInt] = None,
  opponentu45value: Option[String] = None,
  opponentu45type: Option[String] = None,
  team: Option[String] = None,
  competition: Option[String] = None,
  unitu45value: Option[String] = None,
  unitu45type: Option[String] = None,
  situation: Option[String] = None,
  locationu45key: Option[String] = None,
  venueu45type: Option[String] = None,
  surfaceu45type: Option[String] = None,
  weatheru45type: Option[String] = None,
  scopeu45value: Option[String] = None,
  distance: Option[String] = None,
  distanceu45maximum: Option[String] = None,
  distanceu45minimum: Option[String] = None,
  measurementu45units: Option[String] = None,
  par: Option[String] = None,
  strokes: Option[String] = None,
  score: Option[String] = None,
  scoreu45againstu45par: Option[String] = None)

