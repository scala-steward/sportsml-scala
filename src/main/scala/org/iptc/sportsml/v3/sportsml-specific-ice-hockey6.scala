// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package org.iptc.sportsml.v3


/** Metadata about the event itself. | Specific to ice-hockey.
*/
case class IceHockeyEventMetadataComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EventMetadataComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val poweru45playu45timeu45remaining = attributes.get("@power-play-time-remaining") map { _.as[String]}
  lazy val poweru45playu45teamu45idref = attributes.get("@power-play-team-idref") map { _.as[String]}
  lazy val poweru45playu45playeru45advantage = attributes.get("@power-play-player-advantage") map { _.as[String]}
  lazy val scoreu45team = attributes.get("@score-team") map { _.as[String]}
  lazy val scoreu45teamu45opposing = attributes.get("@score-team-opposing") map { _.as[String]}
}

      


/** Metadata for a player. | Specific to ice-hockey. 
*/
case class IceHockeyPlayerMetadataComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends PlayerMetadataComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val shootingu45hand = attributes.get("@shooting-hand") map { _.as[BodySideList]}
  lazy val catchingu45hand = attributes.get("@catching-hand") map { _.as[BodySideList]}
}

      


/** Stats about one team. | Specific to ice-hockey.
*/
case class IceHockeyTeamStatsComplexType(statsu45iceu45hockeyu45offensive: Seq[org.iptc.sportsml.v3.IceHockeyStatsOffensiveComplexType] = Nil,
  statsu45iceu45hockeyu45defensive: Seq[org.iptc.sportsml.v3.IceHockeyStatsDefensiveComplexType] = Nil,
  statsu45iceu45hockeyu45faceoffs: Seq[org.iptc.sportsml.v3.IceHockeyStatsFaceoffsComplexType] = Nil,
  statsu45iceu45hockeyu45timeu45onu45ice: Seq[org.iptc.sportsml.v3.IceHockeyStatsTimeOnIceComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseIceHockeyStatsComplexTypable with TeamStatsComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val plusu45minus = attributes.get("@plus-minus") map { _.as[String]}
  lazy val plusu45total = attributes.get("@plus-total") map { _.as[String]}
  lazy val minusu45total = attributes.get("@minus-total") map { _.as[String]}
  lazy val penaltyu45minutes = attributes.get("@penalty-minutes") map { _.as[String]}
}

      


/** Stats for a player specific to ice-hockey. | Includes the same offensive and defensive stats available for a team.
*/
case class IceHockeyPlayerStatsComplexType(statsu45iceu45hockeyu45offensive: Seq[org.iptc.sportsml.v3.IceHockeyStatsOffensiveComplexType] = Nil,
  statsu45iceu45hockeyu45defensive: Seq[org.iptc.sportsml.v3.IceHockeyStatsDefensiveComplexType] = Nil,
  statsu45iceu45hockeyu45faceoffs: Seq[org.iptc.sportsml.v3.IceHockeyStatsFaceoffsComplexType] = Nil,
  statsu45iceu45hockeyu45timeu45onu45ice: Seq[org.iptc.sportsml.v3.IceHockeyStatsTimeOnIceComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseIceHockeyStatsComplexTypable with PlayerStatsComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val plusu45minus = attributes.get("@plus-minus") map { _.as[String]}
  lazy val plusu45total = attributes.get("@plus-total") map { _.as[String]}
  lazy val minusu45total = attributes.get("@minus-total") map { _.as[String]}
  lazy val penaltyu45minutes = attributes.get("@penalty-minutes") map { _.as[String]}
  lazy val minutesu45played = attributes.get("@minutes-played") map { _.as[String]}
}

      


/** Stats for a player specific to ice-hockey. | Includes the same offensive and defensive stats available for a team.
*/
trait BaseIceHockeyStatsComplexTypable {
  def statsu45iceu45hockeyu45offensive: Seq[org.iptc.sportsml.v3.IceHockeyStatsOffensiveComplexType]
  def statsu45iceu45hockeyu45defensive: Seq[org.iptc.sportsml.v3.IceHockeyStatsDefensiveComplexType]
  def statsu45iceu45hockeyu45faceoffs: Seq[org.iptc.sportsml.v3.IceHockeyStatsFaceoffsComplexType]
  def statsu45iceu45hockeyu45timeu45onu45ice: Seq[org.iptc.sportsml.v3.IceHockeyStatsTimeOnIceComplexType]
  def id: Option[String]
  def classValue: Option[String]
  def style: Option[String]
  def statsu45coverage: Option[String]
  def teamu45coverage: Option[org.iptc.sportsml.v3.Teamu45coverage]
  def durationu45scope: Option[String]
  def alignmentu45scope: Option[org.iptc.sportsml.v3.Alignmentu45scope]
  def position: Option[String]
  def recordu45makingu45scope: Option[String]
  def scopingu45label: Option[String]
  def periodu45value: Option[String]
  def periodu45type: Option[String]
  def startu45dateu45time: Option[String]
  def endu45dateu45time: Option[String]
  def periodu45startu45dateu45time: Option[String]
  def periodu45endu45dateu45time: Option[String]
  def temporalu45unitu45type: Option[String]
  def temporalu45unitu45value: Option[String]
  def eventu45span: Option[BigInt]
  def opponentu45value: Option[String]
  def opponentu45type: Option[String]
  def team: Option[String]
  def competition: Option[String]
  def unitu45value: Option[String]
  def unitu45type: Option[String]
  def situation: Option[String]
  def locationu45key: Option[String]
  def venueu45type: Option[String]
  def surfaceu45type: Option[String]
  def weatheru45type: Option[String]
  def scopeu45value: Option[String]
  def distance: Option[String]
  def distanceu45maximum: Option[String]
  def distanceu45minimum: Option[String]
  def measurementu45units: Option[String]
  def plusu45minus: Option[String]
  def plusu45total: Option[String]
  def minusu45total: Option[String]
  def penaltyu45minutes: Option[String]
}


/** Stats for a player specific to ice-hockey. | Includes the same offensive and defensive stats available for a team.
*/
case class BaseIceHockeyStatsComplexType(statsu45iceu45hockeyu45offensive: Seq[org.iptc.sportsml.v3.IceHockeyStatsOffensiveComplexType] = Nil,
  statsu45iceu45hockeyu45defensive: Seq[org.iptc.sportsml.v3.IceHockeyStatsDefensiveComplexType] = Nil,
  statsu45iceu45hockeyu45faceoffs: Seq[org.iptc.sportsml.v3.IceHockeyStatsFaceoffsComplexType] = Nil,
  statsu45iceu45hockeyu45timeu45onu45ice: Seq[org.iptc.sportsml.v3.IceHockeyStatsTimeOnIceComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseIceHockeyStatsComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val plusu45minus = attributes.get("@plus-minus") map { _.as[String]}
  lazy val plusu45total = attributes.get("@plus-total") map { _.as[String]}
  lazy val minusu45total = attributes.get("@minus-total") map { _.as[String]}
  lazy val penaltyu45minutes = attributes.get("@penalty-minutes") map { _.as[String]}
}

      


/** Offensive stats for one team. | Specific to ice-hockey, including stats on shots, goals, and faceoffs.
*/
case class IceHockeyStatsOffensiveComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val playeru45count = attributes.get("@player-count") map { _.as[String]}
  lazy val playeru45countu45opposing = attributes.get("@player-count-opposing") map { _.as[String]}
  lazy val zone = attributes.get("@zone") map { _.as[Zone]}
  lazy val location = attributes.get("@location") map { _.as[String]}
  lazy val goalsu45total = attributes.get("@goals-total") map { _.as[String]}
  lazy val goalsu45gameu45winning = attributes.get("@goals-game-winning") map { _.as[String]}
  lazy val goalsu45gameu45tying = attributes.get("@goals-game-tying") map { _.as[String]}
  lazy val goalsu45poweru45play = attributes.get("@goals-power-play") map { _.as[String]}
  lazy val goalsu45shortu45handed = attributes.get("@goals-short-handed") map { _.as[String]}
  lazy val goalsu45evenu45strength = attributes.get("@goals-even-strength") map { _.as[String]}
  lazy val goalsu45emptyu45net = attributes.get("@goals-empty-net") map { _.as[String]}
  lazy val goalsu45overtime = attributes.get("@goals-overtime") map { _.as[String]}
  lazy val goalsu45shootout = attributes.get("@goals-shootout") map { _.as[String]}
  lazy val goalsu45shootoutu45attempts = attributes.get("@goals-shootout-attempts") map { _.as[String]}
  lazy val goalsu45penaltyu45shot = attributes.get("@goals-penalty-shot") map { _.as[String]}
  lazy val goalsu45peru45game = attributes.get("@goals-per-game") map { _.as[String]}
  lazy val assists = attributes.get("@assists") map { _.as[String]}
  lazy val assistsu45poweru45play = attributes.get("@assists-power-play") map { _.as[String]}
  lazy val assistsu45shortu45handed = attributes.get("@assists-short-handed") map { _.as[String]}
  lazy val assistsu45gameu45winning = attributes.get("@assists-game-winning") map { _.as[String]}
  lazy val assistsu45gameu45tying = attributes.get("@assists-game-tying") map { _.as[String]}
  lazy val assistsu45overtime = attributes.get("@assists-overtime") map { _.as[String]}
  lazy val points = attributes.get("@points") map { _.as[String]}
  lazy val pointsu45poweru45play = attributes.get("@points-power-play") map { _.as[String]}
  lazy val pointsu45shortu45handed = attributes.get("@points-short-handed") map { _.as[String]}
  lazy val poweru45playu45amount = attributes.get("@power-play-amount") map { _.as[String]}
  lazy val poweru45playu45percentage = attributes.get("@power-play-percentage") map { _.as[String]}
  lazy val shotsu45penaltyu45shotu45taken = attributes.get("@shots-penalty-shot-taken") map { _.as[String]}
  lazy val shotsu45penaltyu45shotu45missed = attributes.get("@shots-penalty-shot-missed") map { _.as[String]}
  lazy val shotsu45penaltyu45shotu45percentage = attributes.get("@shots-penalty-shot-percentage") map { _.as[String]}
  lazy val giveaways = attributes.get("@giveaways") map { _.as[String]}
  lazy val minutesu45poweru45play = attributes.get("@minutes-power-play") map { _.as[String]}
  lazy val scoringu45chances = attributes.get("@scoring-chances") map { _.as[String]}
  lazy val hatu45tricks = attributes.get("@hat-tricks") map { _.as[String]}
  lazy val shotsu45missed = attributes.get("@shots-missed") map { _.as[String]}
  lazy val shotu45attemptsu45blocked = attributes.get("@shot-attempts-blocked") map { _.as[String]}
  lazy val shotsu45evenu45strength = attributes.get("@shots-even-strength") map { _.as[String]}
  lazy val shotsu45poweru45play = attributes.get("@shots-power-play") map { _.as[String]}
  lazy val shotsu45shortu45handed = attributes.get("@shots-short-handed") map { _.as[String]}
}

      


/** Defensive stats for the team. | Specific to ice-hockey, including saves and shots allowed.
*/
case class IceHockeyStatsDefensiveComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val playeru45count = attributes.get("@player-count") map { _.as[String]}
  lazy val playeru45countu45opposing = attributes.get("@player-count-opposing") map { _.as[String]}
  lazy val zone = attributes.get("@zone") map { _.as[Zone]}
  lazy val location = attributes.get("@location") map { _.as[String]}
  lazy val shotsu45poweru45playu45allowed = attributes.get("@shots-power-play-allowed") map { _.as[String]}
  lazy val shotsu45penaltyu45shotu45allowed = attributes.get("@shots-penalty-shot-allowed") map { _.as[String]}
  lazy val goalsu45poweru45playu45allowed = attributes.get("@goals-power-play-allowed") map { _.as[String]}
  lazy val goalsu45penaltyu45shotu45allowed = attributes.get("@goals-penalty-shot-allowed") map { _.as[String]}
  lazy val goalsu45emptyu45netu45allowed = attributes.get("@goals-empty-net-allowed") map { _.as[String]}
  lazy val goalsu45shortu45handedu45allowed = attributes.get("@goals-short-handed-allowed") map { _.as[String]}
  lazy val goalsu45againstu45total = attributes.get("@goals-against-total") map { _.as[String]}
  lazy val goalsu45againstu45average = attributes.get("@goals-against-average") map { _.as[String]}
  lazy val saves = attributes.get("@saves") map { _.as[String]}
  lazy val saveu45percentage = attributes.get("@save-percentage") map { _.as[String]}
  lazy val goalsu45shootoutu45allowed = attributes.get("@goals-shootout-allowed") map { _.as[String]}
  lazy val shotsu45shootoutu45allowed = attributes.get("@shots-shootout-allowed") map { _.as[String]}
  lazy val penaltyu45killingu45amount = attributes.get("@penalty-killing-amount") map { _.as[String]}
  lazy val penaltyu45killingu45percentage = attributes.get("@penalty-killing-percentage") map { _.as[String]}
  lazy val shotsu45blocked = attributes.get("@shots-blocked") map { _.as[String]}
  lazy val takeaways = attributes.get("@takeaways") map { _.as[String]}
  lazy val shutouts = attributes.get("@shutouts") map { _.as[String]}
  lazy val minutesu45penaltyu45killing = attributes.get("@minutes-penalty-killing") map { _.as[String]}
  lazy val hits = attributes.get("@hits") map { _.as[String]}
  lazy val goaltenderu45wins = attributes.get("@goaltender-wins") map { _.as[String]}
  lazy val goaltenderu45losses = attributes.get("@goaltender-losses") map { _.as[String]}
  lazy val goaltenderu45ties = attributes.get("@goaltender-ties") map { _.as[String]}
  lazy val goaltenderu45winsu45overtime = attributes.get("@goaltender-wins-overtime") map { _.as[String]}
  lazy val goaltenderu45lossesu45overtime = attributes.get("@goaltender-losses-overtime") map { _.as[String]}
}

      


/** Defensive stats for the team. | Specific to ice-hockey, including saves and shots allowed.
*/
case class IceHockeyStatsFaceoffsComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val playeru45count = attributes.get("@player-count") map { _.as[String]}
  lazy val playeru45countu45opposing = attributes.get("@player-count-opposing") map { _.as[String]}
  lazy val zone = attributes.get("@zone") map { _.as[Zone]}
  lazy val location = attributes.get("@location") map { _.as[String]}
  lazy val faceoffsu45total = attributes.get("@faceoffs-total") map { _.as[String]}
  lazy val faceoffu45wins = attributes.get("@faceoff-wins") map { _.as[String]}
  lazy val faceoffu45losses = attributes.get("@faceoff-losses") map { _.as[String]}
  lazy val faceoffu45winu45percentage = attributes.get("@faceoff-win-percentage") map { _.as[String]}
  lazy val faceoffsu45evenu45strengthu45total = attributes.get("@faceoffs-even-strength-total") map { _.as[String]}
  lazy val faceoffsu45evenu45strengthu45wins = attributes.get("@faceoffs-even-strength-wins") map { _.as[String]}
  lazy val faceoffsu45evenu45strengthu45losses = attributes.get("@faceoffs-even-strength-losses") map { _.as[String]}
  lazy val faceoffsu45evenu45strengthu45winu45percentage = attributes.get("@faceoffs-even-strength-win-percentage") map { _.as[String]}
  lazy val faceoffsu45poweru45playu45total = attributes.get("@faceoffs-power-play-total") map { _.as[String]}
  lazy val faceoffsu45poweru45playu45wins = attributes.get("@faceoffs-power-play-wins") map { _.as[String]}
  lazy val faceoffsu45poweru45playu45losses = attributes.get("@faceoffs-power-play-losses") map { _.as[String]}
  lazy val faceoffsu45poweru45playu45winu45percentage = attributes.get("@faceoffs-power-play-win-percentage") map { _.as[String]}
  lazy val faceoffsu45shortu45handedu45total = attributes.get("@faceoffs-short-handed-total") map { _.as[String]}
  lazy val faceoffsu45shortu45handedu45wins = attributes.get("@faceoffs-short-handed-wins") map { _.as[String]}
  lazy val faceoffsu45shortu45handedu45losses = attributes.get("@faceoffs-short-handed-losses") map { _.as[String]}
  lazy val faceoffsu45shortu45handedu45winu45percentage = attributes.get("@faceoffs-short-handed-win-percentage") map { _.as[String]}
}

      


/** Defensive stats for the team. | Specific to ice-hockey, including saves and shots allowed.
*/
case class IceHockeyStatsTimeOnIceComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val playeru45count = attributes.get("@player-count") map { _.as[String]}
  lazy val playeru45countu45opposing = attributes.get("@player-count-opposing") map { _.as[String]}
  lazy val zone = attributes.get("@zone") map { _.as[Zone]}
  lazy val location = attributes.get("@location") map { _.as[String]}
  lazy val shifts = attributes.get("@shifts") map { _.as[String]}
  lazy val shiftsu45poweru45play = attributes.get("@shifts-power-play") map { _.as[String]}
  lazy val shiftsu45shortu45handed = attributes.get("@shifts-short-handed") map { _.as[String]}
  lazy val shiftsu45average = attributes.get("@shifts-average") map { _.as[String]}
  lazy val timeu45averageu45peru45shift = attributes.get("@time-average-per-shift") map { _.as[String]}
  lazy val timeu45averageu45evenu45strength = attributes.get("@time-average-even-strength") map { _.as[String]}
  lazy val timeu45averageu45shortu45handed = attributes.get("@time-average-short-handed") map { _.as[String]}
  lazy val timeu45averageu45poweru45play = attributes.get("@time-average-power-play") map { _.as[String]}
  lazy val timeu45poweru45play = attributes.get("@time-power-play") map { _.as[String]}
  lazy val timeu45shortu45handed = attributes.get("@time-short-handed") map { _.as[String]}
  lazy val timeu45evenu45strength = attributes.get("@time-even-strength") map { _.as[String]}
  lazy val timeu45emptyu45net = attributes.get("@time-empty-net") map { _.as[String]}
  lazy val timeu45poweru45playu45emptyu45net = attributes.get("@time-power-play-empty-net") map { _.as[String]}
  lazy val timeu45shortu45handedu45emptyu45net = attributes.get("@time-short-handed-empty-net") map { _.as[String]}
  lazy val timeu45evenu45strengthu45emptyu45net = attributes.get("@time-even-strength-empty-net") map { _.as[String]}
}

      

trait Zone

object Zone {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Zone]): Zone = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Zone) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object Offensive extends Zone { override def toString = "offensive" }
case object Defensive extends Zone { override def toString = "defensive" }
case object NeutralValue extends Zone { override def toString = "neutral" }


case class CommonPropertiesIceHockey(playeru45count: Option[String] = None,
  playeru45countu45opposing: Option[String] = None,
  zone: Option[org.iptc.sportsml.v3.Zone] = None,
  location: Option[String] = None)


case class EventStateIceHockey(poweru45playu45timeu45remaining: Option[String] = None,
  poweru45playu45teamu45idref: Option[String] = None,
  poweru45playu45playeru45advantage: Option[String] = None,
  scoreu45team: Option[String] = None,
  scoreu45teamu45opposing: Option[String] = None)

