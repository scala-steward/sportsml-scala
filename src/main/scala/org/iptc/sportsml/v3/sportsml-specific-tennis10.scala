// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package org.iptc.sportsml.v3


/** Tennis scoring: A game is a subpart of a set and a tennis match is played in best of 3 or 5 sets. A set is played within matches and you need 6 games to win the set. Sets are won by two games unless games are tied 6-6, in which case a tie-breaker ensues with the set won 7-6. The tie-break is counted point by point and is won at 7 by a two-point margin. Play will continue past 7 until that margin is achieved. In games the count proceeds from "love" (0) to 15, 30 and 40, after which the game must be won. If it is not 40-40, the player winning the next point has an "advantage" and if winning the next point too it means winning the game. Otherwise it is back to 40-40 and a continued play for advantage followed by a second winning point to win the game. A game won off an opponent's serve is called a break.
*/


/** For holding metadata having to do with a tennis tournament. Includes an attribute for the name of the tennis tour.
*/
case class TennisTournamentMetadataComplexType(touru45name: Seq[org.iptc.sportsml.v3.ConceptNameType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends TournamentMetadataComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
}

      


/** Metadata about the specific tennis match. | When in the match this document was issued.
*/
case class TennisEventMetadataComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends EventMetadataComplexTypeOption {
  lazy val set = attributes.get("@set") map { _.as[String]}
  lazy val game = attributes.get("@game") map { _.as[String]}
  lazy val serveru45idref = attributes.get("@server-idref") map { _.as[String]}
  lazy val serveru45score = attributes.get("@server-score") map { _.as[GameResultu46Tennis]}
  lazy val receiveru45idref = attributes.get("@receiver-idref") map { _.as[String]}
  lazy val receiveru45score = attributes.get("@receiver-score") map { _.as[GameResultu46Tennis]}
  lazy val serveu45number = attributes.get("@serve-number") map { _.as[Serveu45number]}
  lazy val numberu45ofu45sets = attributes.get("@number-of-sets") map { _.as[String]}
}

      


/** Holds tennis-specific stats. Used for singles matches. | Generally having to do with the score of the match.
*/
case class TennisPlayerStatsComplexType(statsu45tennisu45service: Seq[org.iptc.sportsml.v3.TennisStatsServiceComplexType] = Nil,
  statsu45tennisu45return: Seq[org.iptc.sportsml.v3.TennisStatsReturnComplexType] = Nil,
  statsu45tennisu45set: Seq[org.iptc.sportsml.v3.TennisStatsSetComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseTennisStatsComplexTypable with PlayerStatsComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val netu45pointsu45won = attributes.get("@net-points-won") map { _.as[String]}
  lazy val netu45pointsu45played = attributes.get("@net-points-played") map { _.as[String]}
  lazy val netu45pointsu45wonu45pct = attributes.get("@net-points-won-pct") map { _.as[String]}
  lazy val pointsu45won = attributes.get("@points-won") map { _.as[String]}
  lazy val winners = attributes.get("@winners") map { _.as[String]}
  lazy val winnersu45forehand = attributes.get("@winners-forehand") map { _.as[String]}
  lazy val winnersu45backhand = attributes.get("@winners-backhand") map { _.as[String]}
  lazy val winnersu45volley = attributes.get("@winners-volley") map { _.as[String]}
  lazy val unforcedu45errors = attributes.get("@unforced-errors") map { _.as[String]}
}

      


/** Holds tennis-specific stats. Used for doubles matches. | Generally having to do with the score of the match.
*/
case class TennisTeamStatsComplexType(statsu45tennisu45service: Seq[org.iptc.sportsml.v3.TennisStatsServiceComplexType] = Nil,
  statsu45tennisu45return: Seq[org.iptc.sportsml.v3.TennisStatsReturnComplexType] = Nil,
  statsu45tennisu45set: Seq[org.iptc.sportsml.v3.TennisStatsSetComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseTennisStatsComplexTypable with TeamStatsComplexTypeOption {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val netu45pointsu45won = attributes.get("@net-points-won") map { _.as[String]}
  lazy val netu45pointsu45played = attributes.get("@net-points-played") map { _.as[String]}
  lazy val netu45pointsu45wonu45pct = attributes.get("@net-points-won-pct") map { _.as[String]}
  lazy val pointsu45won = attributes.get("@points-won") map { _.as[String]}
  lazy val winners = attributes.get("@winners") map { _.as[String]}
  lazy val winnersu45forehand = attributes.get("@winners-forehand") map { _.as[String]}
  lazy val winnersu45backhand = attributes.get("@winners-backhand") map { _.as[String]}
  lazy val winnersu45volley = attributes.get("@winners-volley") map { _.as[String]}
  lazy val unforcedu45errors = attributes.get("@unforced-errors") map { _.as[String]}
}

      


/** Holds the score of a set. | Includes an attribute for a set's tiebreaker score.
*/
case class TennisStatsSetComplexType(statsu45tennisu45service: Seq[org.iptc.sportsml.v3.TennisStatsServiceComplexType] = Nil,
  statsu45tennisu45return: Seq[org.iptc.sportsml.v3.TennisStatsReturnComplexType] = Nil,
  statsu45tennisu45game: Seq[org.iptc.sportsml.v3.TennisStatsGameComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseTennisStatsComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val netu45pointsu45won = attributes.get("@net-points-won") map { _.as[String]}
  lazy val netu45pointsu45played = attributes.get("@net-points-played") map { _.as[String]}
  lazy val netu45pointsu45wonu45pct = attributes.get("@net-points-won-pct") map { _.as[String]}
  lazy val pointsu45won = attributes.get("@points-won") map { _.as[String]}
  lazy val winners = attributes.get("@winners") map { _.as[String]}
  lazy val winnersu45forehand = attributes.get("@winners-forehand") map { _.as[String]}
  lazy val winnersu45backhand = attributes.get("@winners-backhand") map { _.as[String]}
  lazy val winnersu45volley = attributes.get("@winners-volley") map { _.as[String]}
  lazy val unforcedu45errors = attributes.get("@unforced-errors") map { _.as[String]}
  lazy val score = attributes.get("@score") map { _.as[String]}
  lazy val duration = attributes.get("@duration") map { _.as[String]}
  lazy val setu45number = attributes.get("@set-number") map { _.as[String]}
  lazy val scoreu45tiebreaker = attributes.get("@score-tiebreaker") map { _.as[String]}
}

      


/** Holds the score of a game. | Also holds details of each point.
*/
case class TennisStatsGameComplexType(statsu45tennisu45service: Seq[org.iptc.sportsml.v3.TennisStatsServiceComplexType] = Nil,
  statsu45tennisu45return: Seq[org.iptc.sportsml.v3.TennisStatsReturnComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseTennisStatsComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val netu45pointsu45won = attributes.get("@net-points-won") map { _.as[String]}
  lazy val netu45pointsu45played = attributes.get("@net-points-played") map { _.as[String]}
  lazy val netu45pointsu45wonu45pct = attributes.get("@net-points-won-pct") map { _.as[String]}
  lazy val pointsu45won = attributes.get("@points-won") map { _.as[String]}
  lazy val winners = attributes.get("@winners") map { _.as[String]}
  lazy val winnersu45forehand = attributes.get("@winners-forehand") map { _.as[String]}
  lazy val winnersu45backhand = attributes.get("@winners-backhand") map { _.as[String]}
  lazy val winnersu45volley = attributes.get("@winners-volley") map { _.as[String]}
  lazy val unforcedu45errors = attributes.get("@unforced-errors") map { _.as[String]}
  lazy val score = attributes.get("@score") map { _.as[GameResultu46Tennis]}
  lazy val duration = attributes.get("@duration") map { _.as[String]}
}

      


/** Basic elements and attributes for tennis statistics
*/
trait BaseTennisStatsComplexTypable {
  def statsu45tennisu45service: Seq[org.iptc.sportsml.v3.TennisStatsServiceComplexType]
  def statsu45tennisu45return: Seq[org.iptc.sportsml.v3.TennisStatsReturnComplexType]
  def id: Option[String]
  def classValue: Option[String]
  def style: Option[String]
  def statsu45coverage: Option[String]
  def teamu45coverage: Option[org.iptc.sportsml.v3.Teamu45coverage]
  def durationu45scope: Option[String]
  def alignmentu45scope: Option[org.iptc.sportsml.v3.Alignmentu45scope]
  def position: Option[String]
  def recordu45makingu45scope: Option[String]
  def scopingu45label: Option[String]
  def periodu45value: Option[String]
  def periodu45type: Option[String]
  def startu45dateu45time: Option[String]
  def endu45dateu45time: Option[String]
  def periodu45startu45dateu45time: Option[String]
  def periodu45endu45dateu45time: Option[String]
  def temporalu45unitu45type: Option[String]
  def temporalu45unitu45value: Option[String]
  def eventu45span: Option[BigInt]
  def opponentu45value: Option[String]
  def opponentu45type: Option[String]
  def team: Option[String]
  def competition: Option[String]
  def unitu45value: Option[String]
  def unitu45type: Option[String]
  def situation: Option[String]
  def locationu45key: Option[String]
  def venueu45type: Option[String]
  def surfaceu45type: Option[String]
  def weatheru45type: Option[String]
  def scopeu45value: Option[String]
  def distance: Option[String]
  def distanceu45maximum: Option[String]
  def distanceu45minimum: Option[String]
  def measurementu45units: Option[String]
  def netu45pointsu45won: Option[String]
  def netu45pointsu45played: Option[String]
  def netu45pointsu45wonu45pct: Option[String]
  def pointsu45won: Option[String]
  def winners: Option[String]
  def winnersu45forehand: Option[String]
  def winnersu45backhand: Option[String]
  def winnersu45volley: Option[String]
  def unforcedu45errors: Option[String]
}


/** Basic elements and attributes for tennis statistics
*/
case class BaseTennisStatsComplexType(statsu45tennisu45service: Seq[org.iptc.sportsml.v3.TennisStatsServiceComplexType] = Nil,
  statsu45tennisu45return: Seq[org.iptc.sportsml.v3.TennisStatsReturnComplexType] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends BaseTennisStatsComplexTypable {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val netu45pointsu45won = attributes.get("@net-points-won") map { _.as[String]}
  lazy val netu45pointsu45played = attributes.get("@net-points-played") map { _.as[String]}
  lazy val netu45pointsu45wonu45pct = attributes.get("@net-points-won-pct") map { _.as[String]}
  lazy val pointsu45won = attributes.get("@points-won") map { _.as[String]}
  lazy val winners = attributes.get("@winners") map { _.as[String]}
  lazy val winnersu45forehand = attributes.get("@winners-forehand") map { _.as[String]}
  lazy val winnersu45backhand = attributes.get("@winners-backhand") map { _.as[String]}
  lazy val winnersu45volley = attributes.get("@winners-volley") map { _.as[String]}
  lazy val unforcedu45errors = attributes.get("@unforced-errors") map { _.as[String]}
}

      


/** Stats for the play where the player served.
*/
case class TennisStatsServiceComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val aces = attributes.get("@aces") map { _.as[String]}
  lazy val firstu45servicesu45good = attributes.get("@first-services-good") map { _.as[String]}
  lazy val firstu45servicesu45goodu45pct = attributes.get("@first-services-good-pct") map { _.as[String]}
  lazy val firstu45servicesu45pointsu45won = attributes.get("@first-services-points-won") map { _.as[String]}
  lazy val firstu45servicesu45pointsu45wonu45pct = attributes.get("@first-services-points-won-pct") map { _.as[String]}
  lazy val secondu45servicesu45pointsu45won = attributes.get("@second-services-points-won") map { _.as[String]}
  lazy val secondu45servicesu45pointsu45wonu45pct = attributes.get("@second-services-points-won-pct") map { _.as[String]}
  lazy val serviceu45gamesu45played = attributes.get("@service-games-played") map { _.as[String]}
  lazy val serviceu45gamesu45won = attributes.get("@service-games-won") map { _.as[String]}
  lazy val serviceu45gamesu45wonu45pct = attributes.get("@service-games-won-pct") map { _.as[String]}
  lazy val breaku45pointsu45against = attributes.get("@break-points-against") map { _.as[String]}
  lazy val breaku45pointsu45saved = attributes.get("@break-points-saved") map { _.as[String]}
  lazy val breaku45pointsu45savedu45pct = attributes.get("@break-points-saved-pct") map { _.as[String]}
  lazy val serveu45pointsu45played = attributes.get("@serve-points-played") map { _.as[String]}
  lazy val serviceu45pointsu45won = attributes.get("@service-points-won") map { _.as[String]}
  lazy val serviceu45pointsu45wonu45pct = attributes.get("@service-points-won-pct") map { _.as[String]}
  lazy val doubleu45faults = attributes.get("@double-faults") map { _.as[String]}
  lazy val firstu45serviceu45topu45speed = attributes.get("@first-service-top-speed") map { _.as[String]}
  lazy val firstu45serveu45averageu45speed = attributes.get("@first-serve-average-speed") map { _.as[String]}
  lazy val secondu45servicesu45good = attributes.get("@second-services-good") map { _.as[String]}
  lazy val secondu45servicesu45goodu45pct = attributes.get("@second-services-good-pct") map { _.as[String]}
  lazy val secondu45serveu45averageu45speed = attributes.get("@second-serve-average-speed") map { _.as[String]}
  lazy val speedu45units = attributes.get("@speed-units") map { _.as[String]}
}

      


/** Stats for play where the player is receiving the serve.
*/
case class TennisStatsReturnComplexType(attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[String]}
  lazy val classValue = attributes.get("@class") map { _.as[String]}
  lazy val style = attributes.get("@style") map { _.as[String]}
  lazy val statsu45coverage = attributes.get("@stats-coverage") map { _.as[String]}
  lazy val teamu45coverage = attributes.get("@team-coverage") map { _.as[Teamu45coverage]}
  lazy val durationu45scope = attributes.get("@duration-scope") map { _.as[String]}
  lazy val alignmentu45scope = attributes.get("@alignment-scope") map { _.as[Alignmentu45scope]}
  lazy val position = attributes.get("@position") map { _.as[String]}
  lazy val recordu45makingu45scope = attributes.get("@record-making-scope") map { _.as[String]}
  lazy val scopingu45label = attributes.get("@scoping-label") map { _.as[String]}
  lazy val periodu45value = attributes.get("@period-value") map { _.as[String]}
  lazy val periodu45type = attributes.get("@period-type") map { _.as[String]}
  lazy val startu45dateu45time = attributes.get("@start-date-time") map { _.as[String]}
  lazy val endu45dateu45time = attributes.get("@end-date-time") map { _.as[String]}
  lazy val periodu45startu45dateu45time = attributes.get("@period-start-date-time") map { _.as[String]}
  lazy val periodu45endu45dateu45time = attributes.get("@period-end-date-time") map { _.as[String]}
  lazy val temporalu45unitu45type = attributes.get("@temporal-unit-type") map { _.as[String]}
  lazy val temporalu45unitu45value = attributes.get("@temporal-unit-value") map { _.as[String]}
  lazy val eventu45span = attributes.get("@event-span") map { _.as[BigInt]}
  lazy val opponentu45value = attributes.get("@opponent-value") map { _.as[String]}
  lazy val opponentu45type = attributes.get("@opponent-type") map { _.as[String]}
  lazy val team = attributes.get("@team") map { _.as[String]}
  lazy val competition = attributes.get("@competition") map { _.as[String]}
  lazy val unitu45value = attributes.get("@unit-value") map { _.as[String]}
  lazy val unitu45type = attributes.get("@unit-type") map { _.as[String]}
  lazy val situation = attributes.get("@situation") map { _.as[String]}
  lazy val locationu45key = attributes.get("@location-key") map { _.as[String]}
  lazy val venueu45type = attributes.get("@venue-type") map { _.as[String]}
  lazy val surfaceu45type = attributes.get("@surface-type") map { _.as[String]}
  lazy val weatheru45type = attributes.get("@weather-type") map { _.as[String]}
  lazy val scopeu45value = attributes.get("@scope-value") map { _.as[String]}
  lazy val distance = attributes.get("@distance") map { _.as[String]}
  lazy val distanceu45maximum = attributes.get("@distance-maximum") map { _.as[String]}
  lazy val distanceu45minimum = attributes.get("@distance-minimum") map { _.as[String]}
  lazy val measurementu45units = attributes.get("@measurement-units") map { _.as[String]}
  lazy val returnsu45played = attributes.get("@returns-played") map { _.as[String]}
  lazy val receiveu45pointsu45won = attributes.get("@receive-points-won") map { _.as[String]}
  lazy val receiveu45pointsu45wonu45pct = attributes.get("@receive-points-won-pct") map { _.as[String]}
  lazy val firstu45serviceu45returnu45pointsu45won = attributes.get("@first-service-return-points-won") map { _.as[String]}
  lazy val firstu45serviceu45returnu45pointsu45wonu45pct = attributes.get("@first-service-return-points-won-pct") map { _.as[String]}
  lazy val secondu45serviceu45returnu45pointsu45won = attributes.get("@second-service-return-points-won") map { _.as[String]}
  lazy val secondu45serviceu45returnu45pointsu45wonu45pct = attributes.get("@second-service-return-points-won-pct") map { _.as[String]}
  lazy val returnu45gamesu45played = attributes.get("@return-games-played") map { _.as[String]}
  lazy val returnu45gamesu45won = attributes.get("@return-games-won") map { _.as[String]}
  lazy val returnu45gamesu45wonu45pct = attributes.get("@return-games-won-pct") map { _.as[String]}
  lazy val breaku45pointsu45played = attributes.get("@break-points-played") map { _.as[String]}
  lazy val breaku45pointsu45converted = attributes.get("@break-points-converted") map { _.as[String]}
  lazy val breaku45pointsu45convertedu45pct = attributes.get("@break-points-converted-pct") map { _.as[String]}
}

      

trait Serveu45number

object Serveu45number {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.Serveu45number]): Serveu45number = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Serveu45number) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object FirstValue extends Serveu45number { override def toString = "first" }
case object Second extends Serveu45number { override def toString = "second" }

trait GameResultu46Tennis

object GameResultu46Tennis {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[org.iptc.sportsml.v3.GameResultu46Tennis]): GameResultu46Tennis = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: GameResultu46Tennis) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object Love extends GameResultu46Tennis { override def toString = "love" }
case object Number15 extends GameResultu46Tennis { override def toString = "15" }
case object Number30 extends GameResultu46Tennis { override def toString = "30" }
case object Number40 extends GameResultu46Tennis { override def toString = "40" }
case object Game extends GameResultu46Tennis { override def toString = "game" }
case object Ad extends GameResultu46Tennis { override def toString = "ad" }
case object Deuce extends GameResultu46Tennis { override def toString = "deuce" }


/** A group of attributes (set, game, server, server-score, receiver receiver-score, serve-number) that can be used for tennis actions.
*/
case class EventStateTennis(set: Option[String] = None,
  game: Option[String] = None,
  serveru45idref: Option[String] = None,
  serveru45score: Option[org.iptc.sportsml.v3.GameResultu46Tennis] = None,
  receiveru45idref: Option[String] = None,
  receiveru45score: Option[org.iptc.sportsml.v3.GameResultu46Tennis] = None,
  serveu45number: Option[org.iptc.sportsml.v3.Serveu45number] = None)


case class StatsTennis(netu45pointsu45won: Option[String] = None,
  netu45pointsu45played: Option[String] = None,
  netu45pointsu45wonu45pct: Option[String] = None,
  pointsu45won: Option[String] = None,
  winners: Option[String] = None,
  winnersu45forehand: Option[String] = None,
  winnersu45backhand: Option[String] = None,
  winnersu45volley: Option[String] = None,
  unforcedu45errors: Option[String] = None)

